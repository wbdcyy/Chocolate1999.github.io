<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>腾讯云COS前端一面凉经</title>
      <link href="/posts/2055151/"/>
      <url>/posts/2055151/</url>
      
        <content type="html"><![CDATA[<ol><li>自我介绍（介绍了自己的博客）</li><li>写博客带来了最大的收获</li><li>最近写了哪些方面的博客</li><li>Vue你用在了哪些项目</li><li>你对Vue的理解</li><li>Vue中双向绑定的实现原理 </li><li>Vue响应式实现原理（分Vue2.0和Vue3.0）</li><li>Vue3.0你还了解哪些特性？有没有上手过？</li><li>Vuex了解过吗？能解决什么问题</li><li>组件通信还有哪些方式？</li><li><code>event.$on</code> 和 <code>event.$off</code> </li><li>自定义事件和 Vuex 在通信这一块有什么区别？</li><li>Vuex如何实现父子组件通信</li><li>vue-router有使用过吗？有哪几种模式</li><li>history模式是怎样实现的？</li><li>了解虚拟dom吗？和真实dom有什么区别？</li><li>diff算法匹配机制了解吗？</li><li>diff算法比对时有哪些优化？能讲述一下过程嘛</li><li>工程里面有没有使用过webpack？有没有自己修改过相关配置？</li><li>大概介绍一下webpack中配置入口，构建结果，性能优化？</li><li>你目前用的什么CDN？</li><li>写代码过程中有用过TypeScript？</li><li>有使用过ES6之类的嘛？用了哪些特性？</li><li>async 和 await 有使用过吗？解决什么问题？</li><li>await 和 promise 有什么关系？</li><li>async 和 await 如何捕获异常？</li><li>rejected出来异常 await 拿得到吗？怎么拿到内部抛出的异常？</li><li>有使用过 koa 是吧？除了这个，还有使用过其它框架嘛？这些框架做了什么事情？</li><li>nuxt.js你觉得使用有什么特点？</li><li>除了koa2，你有了解node嘛？</li><li>有没有听说过express？</li><li>使用element-ui有没有遇到什么问题？</li><li>对element-ui按需加载怎样做？引用路径有什么区别？</li><li>你写博客的频率？</li><li>有没有参加或者看过一些开源源码？</li><li>你清楚前端闭包是什么东西吗？会导致什么问题</li><li>最后两道代码题：浅拷贝和深拷贝</li><li>如何快速简单得实现深拷贝（JSON.parse(JSON.stringify(obj));）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 腾讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode面试题集 和你一起愉快A题 （C++）（持续更新中）</title>
      <link href="/posts/205591/"/>
      <url>/posts/205591/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><p>本篇博客是根据 <code>LeetCode101: ALeetCodeGrindingGuide(C++Version)</code> 电子书籍整理而来的版本，参考了部分解题思路，now，一起愉快地A题吧，拿下满意的 Offer~</p><h2 id="LeetCode-455-分发饼干【贪心】"><a href="#LeetCode-455-分发饼干【贪心】" class="headerlink" title="LeetCode 455. 分发饼干【贪心】"></a>LeetCode 455. 分发饼干【贪心】</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一群孩子和一堆饼干，每个孩子有一个饥饿度，每个饼干都有一个大小。每个孩子只能吃 最多一个饼干，且只有饼干的大小大于孩子的饥饿度时，这个孩子才能吃饱。求解最多有多少孩 子可以吃饱。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>贪心。对孩子饥饿度和饼干尺寸从小到大排序，然后逐一比较，满足条件就算一个孩子。</p><h3 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123;</span><br><span class="line">        sort(g.begin(),g.end());</span><br><span class="line">        sort(s.begin(),s.end());</span><br><span class="line">        int i=<span class="number">0</span>,j=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;g.size()&amp;&amp;j&lt;s.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]&gt;=g[i]) ++cnt,i++,j++;</span><br><span class="line">            <span class="keyword">else</span> j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-135-分发糖果【贪心】"><a href="#LeetCode-135-分发糖果【贪心】" class="headerlink" title="LeetCode 135. 分发糖果【贪心】"></a>LeetCode 135. 分发糖果【贪心】</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>一群孩子站成一排，每一个孩子有自己的评分。现在需要给这些孩子发糖果，规则是如果一 个孩子的评分比自己身旁的一个孩子要高，那么这个孩子就必须得到比身旁孩子更多的糖果；所有孩子至少要有一个糖果。求解最少需要多少个糖果。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>把所有孩子的糖果数初始化为 1； 先从左往右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的 糖果数加1；</p></li><li><p>再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数 不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加1。</p></li><li><p>通过这两次遍历， 分配的糖果就可以满足题目要求了。这里的贪心策略即为，在每次遍历中，只考虑并更新相邻一 侧的大小关系。 </p></li></ul><h3 id="AC-1"><a href="#AC-1" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    int candy(vector&lt;int&gt;&amp; ratings) &#123;</span><br><span class="line">        int size = ratings.size();</span><br><span class="line">        <span class="keyword">if</span>(size&lt;<span class="number">2</span>) <span class="keyword">return</span> size;</span><br><span class="line">        vector&lt;int&gt; v(size,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//先从左到右遍历</span></span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i+<span class="number">1</span>]&gt;ratings[i])</span><br><span class="line">                v[i+<span class="number">1</span>]=v[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再从右到左遍历</span></span><br><span class="line">        <span class="keyword">for</span>(int i=size<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i<span class="number">-1</span>]&gt;ratings[i])</span><br><span class="line">                v[i<span class="number">-1</span>]=max(v[i<span class="number">-1</span>],v[i]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accumulate(v.begin(),v.end(),<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-435-无重叠区间【贪心】"><a href="#LeetCode-435-无重叠区间【贪心】" class="headerlink" title="LeetCode 435. 无重叠区间【贪心】"></a>LeetCode 435. 无重叠区间【贪心】</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定多个区间，计算让这些区间互不重叠所需要移除区间的最少个数。起止相连不算重叠。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其它区间的空间 就越大，就越能保留更多的区间。因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间。 </li><li>具体实现方法为，先把区间按照结尾的大小进行增序排序，每次选择结尾最小且和前一个选 择的区间不重叠的区间。我们这里使用 C++ 的 Lambda，结合 std::sort() 函数进行自定义排序。</li><li>在样例中，排序后的数组为 [[1,2], [1,3], [2,4]]。按照我们的贪心策略，首先初始化为区间 [1,2]；由于 [1,3] 与 [1,2] 相交，我们跳过该区间；由于 [2,4] 与 [1,2] 不相交，我们将其保留。因此最终保留的区间为[[1,2],[2,4]]。</li></ul><p><strong>注意</strong> 需要根据实际情况判断按区间开头排序还是按区间结尾排序。</p><h3 id="AC-2"><a href="#AC-2" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        int n = intervals.size();</span><br><span class="line">        <span class="comment">//按照区间结尾从小到大排序</span></span><br><span class="line">        sort(intervals.begin(),intervals.end(),[](vector&lt;int&gt; a,vector&lt;int&gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        int cnt=<span class="number">0</span>,pre=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>]&lt;pre) ++cnt;</span><br><span class="line">            <span class="keyword">else</span> pre = intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-167-两数之和-II-输入有序数组【玩转双指针】"><a href="#LeetCode-167-两数之和-II-输入有序数组【玩转双指针】" class="headerlink" title="LeetCode 167. 两数之和 II - 输入有序数组【玩转双指针】"></a>LeetCode 167. 两数之和 II - 输入有序数组【玩转双指针】</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个增序的整数数组里找到两个数，使它们的和为给定值。已知有且只有一对解。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>因为数组已经排好序，我们可以采用方向相反的双指针来寻找这两个数字，一个初始指向最 小的元素，即数组最左边，向右遍历；一个初始指向最大的元素，即数组最右边，向左遍历。 如果两个指针指向元素的和等于给定值，那么它们就是我们要的结果。</li><li>如果两个指针指向元 素的和小于给定值，我们把左边的指针右移一位，使得当前的和增加一点。如果两个指针指向元 素的和大于给定值，我们把右边的指针左移一位，使得当前的和减少一点。 </li><li>可以证明，对于排好序且有解的数组，双指针一定能遍历到最优解。证明方法如下：假设最 优解的两个数的位置分别是 l 和 r。我们假设在左指针在 l 左边的时候，右指针已经移动到了 r； 此时两个指针指向值的和小于给定值，因此左指针会一直右移直到到达 l。同理，如果我们假设 在右指针在 r 右边的时候，左指针已经移动到了 l；此时两个指针指向值的和大于给定值，因此 右指针会一直左移直到到达r。所以双指针在任何时候都不可能处于(l,r)之间，又因为不满足条 件时指针必须移动一个，所以最终一定会收敛在 l 和r。</li></ul><h3 id="AC-3"><a href="#AC-3" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) &#123;</span><br><span class="line">        int le=<span class="number">0</span>,re=numbers.size()<span class="number">-1</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(le&lt;re)&#123;</span><br><span class="line">            sum = numbers[le] + numbers[re];</span><br><span class="line">            <span class="keyword">if</span>(sum==target) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target) --re;</span><br><span class="line">            <span class="keyword">else</span> ++le;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;int&gt;&#123;le+<span class="number">1</span>,re+<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-88-MergeSortedArray-Easy-【玩转双指针】"><a href="#LeetCode-88-MergeSortedArray-Easy-【玩转双指针】" class="headerlink" title="LeetCode 88. MergeSortedArray(Easy)【玩转双指针】"></a>LeetCode 88. MergeSortedArray(Easy)【玩转双指针】</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个有序数组，把两个数组合并为一个。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于题目要求不借助第三个数组，合并到 <code>nums1</code> 上，就用尾指针，然后逐一比较，运用归并排序的思想来解答。最后判断一下 <code>nums2</code> 数组是否还存在元素，若存在，直接放入（因为数组是有序的）。</p><h3 id="AC-4"><a href="#AC-4" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="keyword">void</span> merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) &#123;</span><br><span class="line">        int pos = m+n<span class="number">-1</span>;</span><br><span class="line">        m-=<span class="number">1</span>,n-=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;=<span class="number">0</span>&amp;&amp;n&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[pos--] = nums1[m] &gt; nums2[n]? nums1[m--]:nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;=<span class="number">0</span>) nums1[pos--] = nums2[n--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-142-Linked-List-Cycle-II【快慢指针】（Floyd判圈法）"><a href="#LeetCode-142-Linked-List-Cycle-II【快慢指针】（Floyd判圈法）" class="headerlink" title="LeetCode 142. Linked List Cycle II【快慢指针】（Floyd判圈法）"></a>LeetCode 142. Linked List Cycle II【快慢指针】（Floyd判圈法）</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个链表，如果有环路，找出环路的开始点。</p><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于链表找环路的问题，有一个通用的解法——<strong>快慢指针（Floyd判圈法）</strong>。给定两个指针， 分别命名为 slow 和 fast，起始位置在链表的开头。每次 fast 前进两步，slow 前进一步。如果 fast 可以走到尽头，那么说明没有环路；如果fast可以无限走下去，那么说明一定有环路，且一定存 在一个时刻slow和fast相遇。当slow和fast第一次相遇时，我们将fast重新移动到链表开头，并 让slow和fast每次都前进一步。当slow和fast第二次相遇时，相遇的节点即为环路的开始点。</p><h3 id="AC-5"><a href="#AC-5" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode *detectCycle(ListNode *head) &#123;</span><br><span class="line">        ListNode *slow = head,*fast = head;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="comment">//看fast是否走到链表结尾，进而判断是否存在环路</span></span><br><span class="line">            <span class="keyword">if</span>(!fast||!fast-&gt;next) <span class="keyword">return</span> NULL;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">while</span>(slow!=fast);</span><br><span class="line">        <span class="comment">//如果存在，找节点位置</span></span><br><span class="line">        fast=head;</span><br><span class="line">        <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">            fast=fast-&gt;next;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-76-最小覆盖子串-【滑动窗口】"><a href="#LeetCode-76-最小覆盖子串-【滑动窗口】" class="headerlink" title="LeetCode 76. 最小覆盖子串 【滑动窗口】"></a>LeetCode 76. 最小覆盖子串 【滑动窗口】</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个字符串 S 和T，求 S 中包含T 所有字符的最短连续子字符串的长度，同时要求时间 复杂度不得超过O(n)。</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>需要思考以下四个问题：</p><p>1、当移动 <code>right</code> 扩大窗口，即加入字符时，应该更新哪些数据？</p><p>2、什么条件下，窗口应该暂停扩大，开始移动<code>left</code> 缩小窗口？</p><p>3、当移动 <code>left</code>缩小窗口，即移出字符时，应该更新哪些数据？</p><p>4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？</p><p>如果一个字符进入窗口，应该增加 <code>window</code>计数器；如果一个字符将移出窗口的时候，应该减少 <code>window</code> 计数器；当 <code>cnt</code>满足 <code>need</code>时应该收缩窗口；应该在收缩窗口的时候更新最终结果。</p><p>需要注意的是，当我们发现某个字符在<code>window</code>的数量满足了<code>need</code>的需要，就要更新 valid，表示有一个字符已经满足要求。而且，你能发现，两次对窗口内数据的更新操作是完全对称的。</p><p>当 <code>cnt == need.size()</code>时，说明<code>T</code> 中所有字符已经被覆盖，已经得到一个可行的覆盖子串，现在应该开始收缩窗口了，以便得到「最小覆盖子串」。</p><p>移动 <code>left</code>收缩窗口时，窗口内的字符都是可行解，所以应该在收缩窗口的阶段进行最小覆盖子串的更新，以便从可行解中找到长度最短的最终结果。</p><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/solution/hua-dong-chuang-kou-suan-fa-tong-yong-si-xiang-by-/" target="_blank" rel="noopener">参考 ：labuladong 大佬题解</a></p><h3 id="AC-6"><a href="#AC-6" class="headerlink" title="AC"></a>AC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    string minWindow(string s, string t) &#123;</span><br><span class="line">        unordered_map&lt;char,int&gt; need,<span class="built_in">window</span>;</span><br><span class="line">        <span class="keyword">for</span>(char c : t) need[c]++;</span><br><span class="line">        int left=<span class="number">0</span>,right=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录最小覆盖子串的起始索引及长度</span></span><br><span class="line">        int start=<span class="number">0</span>,len=INT_MAX;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;s.size())&#123;</span><br><span class="line">         <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">            char c = s[right];</span><br><span class="line">            <span class="comment">// 右移窗口</span></span><br><span class="line">            right++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            <span class="keyword">if</span>(need.count(c))&#123;</span><br><span class="line">                <span class="built_in">window</span>[c]++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>[c]==need[c])</span><br><span class="line">                    ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">            <span class="keyword">while</span>(cnt==need.size())&#123;</span><br><span class="line">            <span class="comment">// 在这里更新最小覆盖子串</span></span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;len)&#123;</span><br><span class="line">                    len=right-left;</span><br><span class="line">                    start=left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// dd 是将移出窗口的字符</span></span><br><span class="line">                char dd = s[left];</span><br><span class="line">                <span class="comment">// 左移窗口</span></span><br><span class="line">                left++;</span><br><span class="line">                <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">                <span class="keyword">if</span>(need.count(dd))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">window</span>[dd]==need[dd]) --cnt;</span><br><span class="line">                    <span class="built_in">window</span>[dd]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len == INT_MAX? <span class="string">""</span> : s.substr(start,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-567-字符串的排列-【滑动窗口】"><a href="#LeetCode-567-字符串的排列-【滑动窗口】" class="headerlink" title="LeetCode 567. 字符串的排列 【滑动窗口】"></a>LeetCode 567. 字符串的排列 【滑动窗口】</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p><p>示例1:</p><p>输入: s1 = “ab” s2 = “eidbaooo”<br>输出: True<br>解释: s2 包含 s1 的排列之一 (“ba”).</p><p>示例2:</p><p>输入: s1= “ab” s2 = “eidboaoo”<br>输出: False</p><p>注意：</p><ul><li>输入的字符串只包含小写字母</li><li>两个字符串的长度都在 [1, 10,000] 之间</li></ul><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题依旧是可以用滑动窗口算法来做，基本上与模板没什么太大差别。</p><p>需要修改的小地方：<br>1、本题移动 left 缩小窗口的时机是窗口大小 <code>大于或等于</code> s1.size() 时。</p><p>2、当发现 cnt == need.size() 时，就说明窗口中就是一个合法的排列，所以立即返回 true。</p><h3 id="AC-7"><a href="#AC-7" class="headerlink" title="AC"></a>AC</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; window,need;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s1) need[c]++;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>,len=INT_MAX;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;s2.size())&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s2[right];</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span>(need.count(c))&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(window[c]==need[c]) ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(right-left&gt;=s1.size())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt == need.size())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> dd = s2[left];</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">if</span>(need.count(dd))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(window[dd]==need[dd]) --cnt;</span><br><span class="line">                    --window[dd];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-438-找到字符串中所有字母异位词【滑动窗口】"><a href="#LeetCode-438-找到字符串中所有字母异位词【滑动窗口】" class="headerlink" title="LeetCode 438. 找到字符串中所有字母异位词【滑动窗口】"></a>LeetCode 438. 找到字符串中所有字母异位词【滑动窗口】</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。</p><p>字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。</p><p>说明：</p><p>字母异位词指字母相同，但排列不同的字符串。<br>不考虑答案输出的顺序。<br>示例 1:</p><p>输入:<br>s: “cbaebabacd” p: “abc”</p><p>输出:<br>[0, 6]</p><p>解释:<br>起始索引等于 0 的子串是 “cba”, 它是 “abc” 的字母异位词。<br>起始索引等于 6 的子串是 “bac”, 它是 “abc” 的字母异位词。<br> 示例 2:</p><p>输入:<br>s: “abab” p: “ab”</p><p>输出:<br>[0, 1, 2]</p><p>解释:<br>起始索引等于 0 的子串是 “ab”, 它是 “ab” 的字母异位词。<br>起始索引等于 1 的子串是 “ba”, 它是 “ab” 的字母异位词。<br>起始索引等于 2 的子串是 “ab”, 它是 “ab” 的字母异位词。</p><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>输入一个串 S，一个串 T，找到 S 中所有 T 的排列，返回它们的起始索引。</p><p>这道题依旧是可以用滑动窗口算法来做，基本上与模板没什么太大差别。</p><p>需要修改的小地方：<br>1、本题移动 left 缩小窗口的时机是窗口大小 大于或等于 s1.size() 时。</p><p>2、当发现 cnt == need.size() 时，就说明窗口中就是一个合法的排列，添加对应索引值（即 <code>left</code>值）</p><h3 id="AC-8"><a href="#AC-8" class="headerlink" title="AC"></a>AC</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; window,need;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:p) need[c]++;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>,len=INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;s.size())&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[right];</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span>(need.count(c))&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(window[c]==need[c]) ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(right-left&gt;=p.size())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt == need.size())</span><br><span class="line">                    res.push_back(left);</span><br><span class="line">                <span class="keyword">char</span> dd = s[left];</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">if</span>(need.count(dd))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(window[dd]==need[dd]) --cnt;</span><br><span class="line">                    --window[dd];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之Vue篇</title>
      <link href="/posts/205511/"/>
      <url>/posts/205511/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="v-show和v-if有什么区别"><a href="#v-show和v-if有什么区别" class="headerlink" title="v-show和v-if有什么区别"></a>v-show和v-if有什么区别</h3><ul><li><code>v-show</code> 通过 <code>CSS</code> <code>display</code> 控制显示和隐藏</li><li><code>v-if</code> 组件真正的渲染和销毁，而不是显示和隐藏</li></ul><h3 id="为何在v-for使用key"><a href="#为何在v-for使用key" class="headerlink" title="为何在v-for使用key"></a>为何在v-for使用key</h3><ul><li>必须用 <code>key</code> ， 且不能是 <code>index</code> 和 <code>random</code></li><li><code>diff</code> 算法中通过 <code>tag</code> 和 <code>key</code> 来判断，是否是 <code>sameNode</code></li><li>减少渲染次数，提升渲染性能</li></ul><h3 id="Vue-组件生命周期（包括父子组件）"><a href="#Vue-组件生命周期（包括父子组件）" class="headerlink" title="Vue 组件生命周期（包括父子组件）"></a>Vue 组件生命周期（包括父子组件）</h3><p><a href="https://www.cnblogs.com/gagag/p/6246493.html" target="_blank" rel="noopener">参考：Vue生命周期</a></p><h3 id="Vue-组件如何通信（常见）"><a href="#Vue-组件如何通信（常见）" class="headerlink" title="Vue 组件如何通信（常见）"></a>Vue 组件如何通信（常见）</h3><ul><li>父子组件 <code>props</code> 和 <code>this.$emit</code></li><li>自定义事件 <code>event.$no</code>  <code>event.$off</code>   <code>event.$emit</code></li><li><code>vuex</code></li></ul><h3 id="描述组件渲染和更新的过程"><a href="#描述组件渲染和更新的过程" class="headerlink" title="描述组件渲染和更新的过程"></a>描述组件渲染和更新的过程</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505091121253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>如上图所示，vue原理三大模块：响应式、模板渲染、vdom</p><p><strong>初次渲染过程</strong></p><ul><li>解析模板为 <code>render</code> 函数 （或在开发环境已完成，<code>vue-loader</code>）</li><li>触发响应式，监听 <code>data</code> 属性 <code>getter</code>、 <code>setter</code></li><li>执行 <code>render</code> 函数，生成 <code>vnode</code> ，<code>patch(elem,vnode)</code></li></ul><p><strong>更新过程</strong></p><ul><li>修改 <code>data</code>，触发 <code>setter</code>（此前在 <code>getter</code> 中已被监听）</li><li>重新执行 <code>render</code> 函数，生成 <code>newVnode</code></li><li><code>patch(vnode,newVnode)</code></li></ul><h3 id="with-语法"><a href="#with-语法" class="headerlink" title="with 语法"></a>with 语法</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020050509462587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><ul><li>改变 { } 内自由变量的查找规则，当做 <code>obj</code> 属性来查找</li><li>如果找不到匹配的 <code>obj</code> 属性，就会报错</li><li><code>with</code> 要慎用，它打破了作用域规则，易读性变差 </li></ul><h3 id="vue为何是异步渲染"><a href="#vue为何是异步渲染" class="headerlink" title="vue为何是异步渲染"></a>vue为何是异步渲染</h3><ul><li>减少 <code>DOM</code> 操作次数，提高性能</li></ul><p><code>$nextTick</code> 待 <code>DOM</code> 渲染完后再回调，页面渲染时会将 <code>data</code> 的修改做整合，多次 <code>data</code> 修改只会渲染一次。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505094049883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="双向数据绑定-v-model-的实现原理"><a href="#双向数据绑定-v-model-的实现原理" class="headerlink" title="双向数据绑定 v-model 的实现原理"></a>双向数据绑定 v-model 的实现原理</h3><ul><li><code>input</code> 元素的 value = this.name</li><li>绑定 input 事件 this.name = $event.target.value</li><li>data 更新触发 <code>re-render</code></li></ul><h3 id="对-MVVM-的理解"><a href="#对-MVVM-的理解" class="headerlink" title="对 MVVM 的理解"></a>对 MVVM 的理解</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505100528243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="computed-有何特点"><a href="#computed-有何特点" class="headerlink" title="computed 有何特点"></a>computed 有何特点</h3><ul><li>缓存，data 不变不会重新计算</li><li>提高性能</li></ul><h3 id="为何组件-data-必须是一个函数"><a href="#为何组件-data-必须是一个函数" class="headerlink" title="为何组件 data 必须是一个函数"></a>为何组件 data 必须是一个函数</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505100654826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>如上图所示，这个不是 <code>vue</code> 相关问题，而是关于 <code>js</code> 方面问题。<code>vue</code> 文件编译之后实际上是 <code>class</code> ，是一个类。而对组件使用的时候，相当于对组件进行了实例化。如果 <code>data</code> 不是一个函数的话，那每一个组件实例就共享了，就会造成数据污染问题。而函数的话，就会形成闭包，保护变量，不会造成影响。</p><h3 id="ajax-请求应该放在哪个生命周期"><a href="#ajax-请求应该放在哪个生命周期" class="headerlink" title="ajax 请求应该放在哪个生命周期"></a>ajax 请求应该放在哪个生命周期</h3><ul><li>mounted</li><li>JS 是单线程的，ajax 异步获取数据</li><li>放在 mounted 之前没有用，只会让逻辑更加混乱</li></ul><h3 id="如何将组件所有-props-传递给子组件"><a href="#如何将组件所有-props-传递给子组件" class="headerlink" title="如何将组件所有 props 传递给子组件"></a>如何将组件所有 props 传递给子组件</h3><ul><li>$pros</li><li>用法：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;User v-bind=<span class="string">"$props"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="如何自己实现-v-model"><a href="#如何自己实现-v-model" class="headerlink" title="如何自己实现 v-model"></a>如何自己实现 v-model</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505101451463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="多个组件有相同的逻辑，如何抽离"><a href="#多个组件有相同的逻辑，如何抽离" class="headerlink" title="多个组件有相同的逻辑，如何抽离"></a>多个组件有相同的逻辑，如何抽离</h3><ul><li>mixin</li></ul><h3 id="何时要使用异步组件"><a href="#何时要使用异步组件" class="headerlink" title="何时要使用异步组件"></a>何时要使用异步组件</h3><ul><li>加载大文件</li><li>路由异步加载</li><li>优化性能<h3 id="何时使用-keep-alive"><a href="#何时使用-keep-alive" class="headerlink" title="何时使用 keep-alive"></a>何时使用 keep-alive</h3></li><li>缓存组件，不需要重复渲染</li><li>如多个静态 <code>tab</code> 页的切换</li><li>优化性能</li></ul><h3 id="何时需要使用-beforeDestory"><a href="#何时需要使用-beforeDestory" class="headerlink" title="何时需要使用 beforeDestory"></a>何时需要使用 beforeDestory</h3><ul><li>解绑自定义事件 <code>event.$off</code></li><li>清除定时器</li><li>解绑自定义的 <code>DOM</code> 事件，如<code>window scroll</code> 等</li></ul><h3 id="什么是作用域插槽"><a href="#什么是作用域插槽" class="headerlink" title="什么是作用域插槽"></a>什么是作用域插槽</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505102221943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505102237428.png"  alt=""></p><h3 id="Vuex-中-action-和-mutation-有何区别"><a href="#Vuex-中-action-和-mutation-有何区别" class="headerlink" title="Vuex 中 action 和 mutation 有何区别"></a>Vuex 中 action 和 mutation 有何区别</h3><ul><li>action 中处理异步，mutation 不可以</li><li>mutation 做原子操作（每次就做一个操作）</li><li>action 可以整个多个 mutation</li></ul><h3 id="Vue-router-常用的路由模式"><a href="#Vue-router-常用的路由模式" class="headerlink" title="Vue-router 常用的路由模式"></a>Vue-router 常用的路由模式</h3><ul><li>hash 默认</li><li>H5 history（需要服务端支持）</li></ul><h3 id="如何配置-Vue-router-异步加载"><a href="#如何配置-Vue-router-异步加载" class="headerlink" title="如何配置 Vue-router 异步加载"></a>如何配置 Vue-router 异步加载</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505102650619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="请用-vnode-描述一个-DOM-结构"><a href="#请用-vnode-描述一个-DOM-结构" class="headerlink" title="请用 vnode 描述一个 DOM 结构"></a>请用 vnode 描述一个 DOM 结构</h3><p>场景：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200505104236415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>vnode:<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020050510425981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="diff-算法的时间复杂度"><a href="#diff-算法的时间复杂度" class="headerlink" title="diff 算法的时间复杂度"></a>diff 算法的时间复杂度</h3><ul><li>O(n)</li><li>在O(n^3)上做了优化</li></ul><h3 id="简述-diff-算法过程"><a href="#简述-diff-算法过程" class="headerlink" title="简述 diff 算法过程"></a>简述 diff 算法过程</h3><ul><li>patch ( elem , vnode ) 和 patch ( vnode , newVnode )</li><li>patchVnode 和 addVnodes 和 removeVnodes</li><li>updateChildren （key的重要性）</li></ul><h3 id="vue-常见性能优化方式"><a href="#vue-常见性能优化方式" class="headerlink" title="vue 常见性能优化方式"></a>vue 常见性能优化方式</h3><ul><li>合理使用 <code>v-show</code> 和 <code>v-if</code></li><li>合理使用 <code>computed</code></li><li><code>v-for</code> 时加 <code>key</code>，以及避免和 <code>v-if</code> 同时使用</li><li>自定义事件、<code>DOM</code>事件及时销毁</li><li>合理使用异步组件</li><li>合理使用 <code>keep-alive</code></li><li><code>data</code> 层级不要太深</li><li>使用 <code>vue-loader</code> 在开发环境做模板编译（预编译）</li><li>webpack层面的优化（<a href="https://blog.csdn.net/weixin_42429718/article/details/105902005" target="_blank" rel="noopener">传送门</a>）</li><li>使用<code>SSR</code></li></ul><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>之前一直折腾美团那个项目，在视频介绍有说过，做完项目就继续整理我的笔记仓库。如下图所示，自己还是觉得有不错的回应吧，建立仓库之初还没有想过会有人给我 <code>star</code>，更别说 <code>fork</code> 之后 <code>pull request</code> 了。诶，没想到还真有，✿✿ヽ(°▽°)ノ✿</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504215017221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">:sunny:小狮子前端の学习:cloud:整理笔记:heart:（传送门）</a></p><p><a href="https://github.com/Chocolate1999/Vue-family-bucket-SSR-Koa2-full-stack-development-from-Meituan" target="_blank" rel="noopener">Vue全家桶+SSR+Koa2全栈开发:cloud:（传送门）</a></p><p>如果您觉得不错，那么请毫不留情地给个 <code>star</code> 吧，您的支持是我继续创作的动力！<code>star</code> 数越多，就会有更多的小伙伴能够看到，或许更多的人在前端有了方向不是。</p><p>目前，可以说前端知识梳理篇正式出炉啦，请读者跟上俺的步伐，一起学习前端知识吧，不妨关注一波不迷路~</p><p>此外，我的微信公众号：<code>小狮子前端Vue</code> 也运作啦，目前已经开设前端每日一题专栏，每天会发布一篇文章，具体如下图所示，仅需几分钟，就能获得知识，岂不是白嫖的感觉~<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504214831255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>此次灵感也是来自于在微信 <code>看一看</code> ，我看到了考研大军的激情，有着每日一句的专栏，每天可能就只需要那么几分钟的时间，就能学习英语。我觉得是挺不错的，那我也想尝试这样做，一方面，我能每天整理一点学习笔记来，另一方面，也算是自己每天学习打卡。<strong>一小步或许就是未来一大步</strong>，要来一起打卡吗✿✿ヽ(°▽°)ノ✿</p><p>最后，没啥要总结的了，小狮子笔记仓库会一直更新下去，每日一题专栏我也会坚持记录。我想，能影响一些人就已经不错啦，曾经也是受过很多dalao影响，目前也是在回馈开源。好啦，下期再见，一个不是只会写业务代码的前端攻城狮在下一期又会写什么呢？</p><p>点赞收藏评论，三连支持，下期早点见哈哈哈哈哈~</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">学如逆水行舟，不进则退</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之HTML篇</title>
      <link href="/posts/20542/"/>
      <url>/posts/20542/</url>
      
        <content type="html"><![CDATA[<h2 id="html5有哪些新特性、移除了那些元素？"><a href="#html5有哪些新特性、移除了那些元素？" class="headerlink" title="html5有哪些新特性、移除了那些元素？"></a>html5有哪些新特性、移除了那些元素？</h2><ul><li><p><code>HTML5</code> 现在已经不是 <code>SGML</code> 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p><p>  绘画 <code>canvas</code><br>  用于媒介回放的<code>video</code> 和 <code>audio</code> 元素<br>  本地离线存储<code>localStorage</code> 长期存储数据，浏览器关闭后数据不丢失<br>  <code>sessionStorage</code> 的数据在浏览器关闭后自动删除<br>  语意化更好的内容元素，比如<code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code><br>  表单控件，<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code><br>  新的技术<code>webworker</code>、<code>websocket</code>、 <code>Geolocation</code></p></li><li><p><code>移除</code> 的元素：</p><p>  纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>font</code>、 <code>s</code>、<code>strike</code>、<code>tt</code>、<code>u</code><br>  对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></p></li><li><p>支持<code>HTML5</code>新标签：</p><p>  IE8/IE7/IE6支持通过<code>document.createElement</code>方法产生的标签<br>  可以利用这一特性让这些浏览器支持<code>HTML5</code>新标签<br>  浏览器支持新标签后，还需要添加标签默认的样式</p></li><li><p>当然也可以直接使用成熟的框架、比如<code>html5shim</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt; src=<span class="string">"http://html5shim.googlecode.com/svn/trunk/html5.js"</span>&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前端注意哪些SEO"><a href="#前端注意哪些SEO" class="headerlink" title="前端注意哪些SEO?"></a>前端注意哪些SEO?</h2><ul><li>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，<code>title</code>值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面<code>title</code>要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li><li>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li><li>重要内容不要用<code>js</code>输出：爬虫不会执行js获取内容</li><li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li><li>非装饰性图片必须加<code>alt</code></li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><h2 id="从浏览器地址栏输入url到显示页面的步骤"><a href="#从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="从浏览器地址栏输入url到显示页面的步骤"></a>从浏览器地址栏输入url到显示页面的步骤</h2><p><strong>简略回答</strong></p><ul><li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li><li>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><p><strong>详细回答</strong></p><ol><li>从浏览器接收<code>url</code>到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</li><li>开启网络线程到发出一个完整的<code>HTTP</code>请求（这一部分涉及到dns查询，<code>TCP/IP</code>请求，五层因特网协议栈等知识）</li><li>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</li><li>后台和前台的<code>HTTP</code>交互（这一部分包括<code>HTTP</code>头部、响应码、报文结构、<code>cookie</code>等知识，可以提下静态资源的<code>cookie</code>优化，以及编码解码，如<code>gzip</code>压缩等）</li><li>单独拎出来的缓存问题，<code>HTTP</code>的缓存（这部分包括http缓存头部，<code>ETag</code>，<code>catch-control</code>等）</li><li>浏览器接收到<code>HTTP</code>数据包后的解析流程（解析<code>html</code>-词法分析然后解析成<code>dom</code>树、解析<code>css</code>生成<code>css规则树</code>、合并成<code>render</code>树，然后<code>layout、painting</code>渲染、复合图层的合成、<code>GPU</code>绘制、外链资源的处理、<code>loaded</code>和<code>DOMContentLoaded</code>等）</li><li><code>CSS</code>的可视化格式模型（元素的渲染规则，如包含块，控制框，<code>BFC</code>，<code>IFC</code>等概念）</li><li><code>JS</code>引擎解析过程（<code>JS</code>的解释阶段，预处理阶段，执行阶段生成执行上下文，<code>VO</code>，作用域链、回收机制等等）</li><li>其它（可以拓展不同的知识模块，如<code>跨域</code>，<code>web安全</code>，<code>hybrid</code>模式等等内容）</li></ol><h2 id="如何进行网站性能优化"><a href="#如何进行网站性能优化" class="headerlink" title="如何进行网站性能优化"></a>如何进行网站性能优化</h2><ul><li><p><code>content</code> 方面</p><p>  减少<code>HTTP</code>请求：合并文件、<code>CSS</code>精灵、<code>inline Image</code><br>  减少<code>DNS</code>查询：<code>DNS</code>缓存、将资源分布到恰当数量的主机名<br>  减少<code>DOM</code>元素数量</p></li><li><p><code>Cookie</code> 方面</p><p>  减小<code>cookie</code>大小</p></li><li><p><code>Server</code> 方面</p><p>  使用<code>CDN</code><br>  配置<code>ETag</code><br>  对组件使用<code>Gzip</code>压缩</p></li><li><p><code>图片</code> 方面</p><p>  优化图片：根据实际颜色需要选择色深、压缩<br>  优化<code>css</code>精灵<br>  不要在<code>HTML</code>中拉伸图片</p></li><li><p><code>css</code> 方面</p><p>   将样式表放到页面顶部<br>  不使用<code>CSS</code>表达式<br>  使用<code>&lt;link&gt;</code>不使用<code>@import</code></p></li><li><p><code>js</code> 方面</p><p>  将脚本放到页面底部<br>  将<code>javascript</code>和<code>css</code>从外部引入<br>  压缩<code>javascript</code>和<code>css</code><br>  删除不需要的脚本<br>  减少<code>DOM</code>访问</p></li></ul><h2 id="语义化的理解"><a href="#语义化的理解" class="headerlink" title="语义化的理解"></a>语义化的理解</h2><ul><li>简单来说：用正确的标签做正确的事情！</li><li><code>HTML</code>语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</li><li>在没有样式<code>CSS</code>情况下也以一种文档格式显示，并且是容易阅读的。</li><li>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 <code>SEO</code>。</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li></ul><h2 id="对浏览器内核的理解"><a href="#对浏览器内核的理解" class="headerlink" title="对浏览器内核的理解"></a>对浏览器内核的理解</h2><ul><li><p>主要分成两部分：渲染引擎(<code>layout engineer</code>或<code>Rendering Engine</code>)和<code>JS</code>引擎</p></li><li><p>渲染引擎：负责取得网页的内容（<code>HTML</code>、<code>XML</code>、图像等等）、整理讯息（例如加入<code>CSS</code>等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p></li><li><p><code>JS</code>引擎则：解析和执行<code>javascript</code>来实现网页的动态效果</p></li><li><p>最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</p></li></ul><h2 id="请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h2><ul><li><p><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p></li><li><p><code>cookie</code>数据始终在同源的http请求中携带（即使不需要），即会在浏览器和服务器间来回传递</p></li><li><p><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</p></li><li><p>存储大小：</p><p>  <code>cookie</code>数据大小不能超过4k<br>  <code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</p></li><li><p>有期时间：</p><p>  <code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据<br>  <code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除<br>  <code>cookie</code> 设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</p></li></ul><h2 id="页面访问cookie的限制条件"><a href="#页面访问cookie的限制条件" class="headerlink" title="页面访问cookie的限制条件"></a>页面访问cookie的限制条件</h2><p>cookie （储存在用户本地终端上的数据）</p><p>cookie 指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据。cookie 在网络系统中几乎无处不在，当我们浏览以前访问过的网站时，网页中可能会出现 ：你好 XXX。</p><p><strong>1. 跨域问题：</strong></p><p><code>cookie</code>允许Web开发者保留他们的用户的登录状态。但是当你的站点有一个以上的域名时就会出现问题了。在<code>cookie</code>规范上说，一个<code>cookie</code>只能用于一个域名，不能够发给其它的域名。因此，如果在浏览器中对一个域名设置了一个<code>cookie</code>，这个<code>cookie</code>对于其它的域名将无效。</p><p><strong>解决：</strong></p><ul><li>通过nginx反向代理</li><li>jsonp方式请求</li></ul><p><strong>2. 设置了HTTP only：</strong></p><p>如果在cookie中设置了<code>HttpOnly</code>属性，那么通过程序(JS脚本、Applet等)将无法读取到<code>cookie</code>信息，这样能有效的防止<code>XSS</code>攻击。</p><h2 id="cookie的作用与弊端"><a href="#cookie的作用与弊端" class="headerlink" title="cookie的作用与弊端"></a>cookie的作用与弊端</h2><p><strong>cookie的作用</strong></p><ul><li>可以在客户端上保存用户数据，起到简单的缓存和用户身份识别等作用。</li><li>保存用户的登陆状态，用户进行登陆，成功登陆后，服务器生成特定的cookie返回给客户端，客户端下次访问该域名下的任何页面，将该cookie的信息发送给服务器，服务器经过检验，来判断用户是否登陆。</li><li>记录用户的行为。</li></ul><p><strong>cookie弊端</strong></p><ul><li>增加流量消耗，每次请求都需要带上cookie信息。</li><li>安全性隐患，cookie使用明文传输。如果cookie被人拦截了，那人就可以取得所有的session信息。</li><li>Cookie数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉</li></ul><h2 id="介绍cookie的属性"><a href="#介绍cookie的属性" class="headerlink" title="介绍cookie的属性"></a>介绍cookie的属性</h2><p>在chrome控制台中的Application选项卡中可以看到cookie的信息。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200328111716129.png"  alt=""></p><p>一个域名下面可能存在着很多个<code>cookie</code>对象。但一个<code>cookie</code>只能用于一个域名，不能够发给其它的域名。</p><ul><li><p>Name</p><p>  为一个cookie的名称（用 JavaScript 操作 Cookie 的时候注意对 Value 进行编码处理。）</p></li><li><p>value</p><p>  为一个cookie的值（用 JavaScript 操作 Cookie 的时候注意对 Value 进行编码处理。）</p></li><li><p>Domain<br>  为可以访问此cookie的域名</p></li></ul><p>注：二级域名能读取设置了<code>domain</code>为顶级域名或者自身的cookie，不能读取其他二级域名<code>domain</code>的<code>cookie</code>。所以要想<code>cookie</code>在多个二级域名中共享，需要设置<code>domain</code>为顶级域名，这样就可以在所有二级域名里面获得到这个<code>cookie</code>的值了。</p><p>顶级域名只能获取到<code>domain</code>设置为顶级域名的<code>cookie</code>，其他domain设置为二级域名的无法获取。</p><ul><li>Path</li></ul><p>为可以访问此cookie的页面路径。 比如domain是abc.com,path是/test，那么只有/test路径下的页面可以读取此cookie</p><ul><li>Expires</li></ul><p>字段为此cookie<code>超时时间</code>。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话<code>默认值是Session</code>，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: id=a3fWa; Expires=Wed, <span class="number">21</span> Oct <span class="number">2015</span> <span class="number">07</span>:<span class="number">28</span>:<span class="number">00</span> GMT;</span><br></pre></td></tr></table></figure><p>当为<code>会话性 Cookie</code> 的时候，值保存在客户端内存中，并在用户关闭浏览器时失效。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期 Cookie 也会被保留下来，就好像浏览器从来没有关闭一样。</p><p>与会话性 Cookie 相对的是<code>持久性 Cookie</code>，持久性 Cookies 会保存在用户的硬盘中，直至过期或者清除 Cookie。这里值得注意的是，设定的日期和时间只与客户端相关，而不是服务端。</p><ul><li>Max-Age</li></ul><p><code>Max-Age</code>用于设置在 Cookie 失效之前需要经过的<code>秒数</code>。比如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: id=a3fWa; Max-Age=<span class="number">604800</span>;</span><br></pre></td></tr></table></figure><p><code>Max-Age</code> 可以为正数、负数、甚至是 0。</p><p>如果 max-Age 属性为<code>正数</code>时，浏览器会将其持久化，即写到对应的 Cookie 文件中。</p><p>当 max-Age 属性为<code>负数</code>，则表示该 Cookie 只是一个会话性 Cookie。</p><p>当 max-Age 为 <code>0</code>时，则会立即删除这个 Cookie。</p><p>假如 <code>Expires</code>和 <code>Max-Age</code> 都存在，<code>Max-Age</code>优先级更高。</p><ul><li><p>Size<br>  此cookie大小</p></li><li><p>HttpOnly</p></li></ul><p>若此属性为<code>true</code>，则只有在http请求头中会带有此cookie的信息，而不能通过<code>document.cookie</code>来访问此cookie。</p><ul><li><p>Secure<br>  设置是否只能通过https来传递此条cookie。使用 <code>HTTPS</code>安全协议，可以保护 Cookie 在浏览器和 Web 服务器间的传输过程中不被窃取和篡改。</p></li><li><p>SameSite<br>(    3月份比较火的一个问题，下面会参考别人文章进行整理）</p></li></ul><h2 id="预测最近面试会考-Cookie-的-SameSite-属性"><a href="#预测最近面试会考-Cookie-的-SameSite-属性" class="headerlink" title="预测最近面试会考 Cookie 的 SameSite 属性"></a>预测最近面试会考 Cookie 的 SameSite 属性</h2><p><a href="https://segmentfault.com/a/1190000022055666" target="_blank" rel="noopener">参考文章出处</a></p><p><strong>前言</strong></p><p>2 月份发布的 Chrome 80 版本中默认屏蔽了第三方的 Cookie，在灰度期间，就导致了阿里系的很多应用都产生了问题，为此还专门成立了小组，推动各 BU 进行改造，目前阿里系基本已经改造完成。所有的前端团队估计都收到过通知，也着实加深了一把大家对于 Cookie 的理解，所以很可能就此出个面试题，而即便不是面试题，当问到 HTTP 相关内容的时候，不妨也扯到这件事情来，一能表明你对前端时事的跟进，二还能借此引申到前端安全方面的内容，为你的面试加分。</p><p><strong>HTTP</strong></p><p>一般我们都会说 “HTTP 是一个<code>无状态的协议</code>”，不过要注意这里的 HTTP 其实是指 HTTP 1.x，而所谓无状态协议，简单的理解就是即使同一个客户端连续两次发送请求给服务器，服务器也<code>识别不出这是同一个客户端发送的请求</code>，这导致的问题就比如你加了一个商品到购物车中，但因为识别不出是同一个客户端，你刷新下页面就没有了……</p><p><strong>Cookie</strong></p><p>为了解决 HTTP 无状态导致的问题，后来出现了 Cookie。不过这样说可能会让你产生一些误解，首先无状态并不是不好，有优点，但也会导致一些问题。而 Cookie 的存在也不是为了解决通讯协议无状态的问题，只是为了解决客户端与服务端会话状态的问题，这个状态是指<code>后端服务的状态而非通讯协议的状态</code>。</p><p><strong>Cookie 的设置</strong></p><p>那 Cookie 是怎么设置的呢？简单来说就是</p><ol><li>客户端发送 HTTP 请求到服务器</li><li>当服务器收到 HTTP 请求时，在响应头里面添加一个 Set-Cookie 字段</li><li>浏览器收到响应后保存下 Cookie</li><li>之后对该服务器每一次请求中都通过 Cookie 字段将 Cookie 信息发送给服务器。</li></ol><h2 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h2><p>SameSite 是最近非常值得一提的内容，因为 2 月份发布的 Chrome80 版本中默认屏蔽了第三方的 Cookie，这会导致阿里系的很多应用都产生问题，为此还专门成立了问题小组，推动各 BU 进行改造。</p><p><strong>作用</strong></p><p>SameSite 属性可以让<code>Cookie</code>在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（<code>CSRF</code>）。</p><p><strong>属性值</strong></p><ul><li><code>Strict</code>仅允许一方请求携带 Cookie，即浏览器将只发送<code>相同站点</code>请求的 Cookie，即当前网页 URL 与请求目标 <code>URL 完全一致</code>。</li><li><code>Lax</code>允许部分第三方请求携带 Cookie</li><li><code>None</code>无论是否跨站都会发送 Cookie</li></ul><p>之前默认是<code>None</code> 的，Chrome80 后默认是 <code>Lax</code>。</p><p><strong>跨域和跨站</strong></p><p>首先要理解的一点就是<code>跨站</code>和<code>跨域</code>是不同的。同站(<code>same-site</code>)/跨站(<code>cross-site</code>)」和第一方(<code>first-party</code>)/第三方(<code>third-party</code>)是等价的。但是与浏览器同源策略（<code>SOP</code>）中的「同源(<code>same-origin</code>)/跨域(<code>cross-origin</code>)」是完全不同的概念。</p><p>同源策略的同源是指两个 URL 的协议/主机名/端口一致。例如，<code>https://www.taobao.com/pages/...</code>，它的协议是<code>https</code>，主机名是<code>www.taobao.com</code>，端口是 <code>443</code>。</p><p>同源策略作为浏览器的安全基石，其「同源」判断是比较严格的，相对而言，<code>Cookie</code>中的「同站」判断就比较宽松：只要两个 URL 的 eTLD+1 相同即可，不需要考虑协议和端口。其中，eTLD 表示有效顶级域名，注册于 Mozilla 维护的公共后缀列表（Public Suffix List）中，例如，.com、.co.uk、.github.io 等。eTLD+1 则表示，有效顶级域名+二级域名，例如taobao.com等</p><p>举几个例子，<code>www.taobao.com</code>和<code>www.baidu.com</code>是跨站，<code>www.a.taobao.com</code>和<code>www.b.taobao.com</code>是同站，<code>a.github.io</code>和<code>b.github.io</code>是跨站(注意是跨站)。</p><p><strong>改变</strong></p><p>接下来看下从 None 改成 Lax 到底影响了哪些地方的 Cookies 的发送？直接来一个图表：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200328135320693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>从上图可以看出，对大部分 web 应用而言，Post 表单，iframe，AJAX，Image 这四种情况从以前的跨站会发送三方 Cookie，变成了不发送。</p><p><code>Post表单</code>：应该的，学 CSRF 总会举表单的例子。</p><p><code>iframe</code>：iframe 嵌入的 web 应用有很多是跨站的，都会受到影响。</p><p><code>AJAX</code>：可能会影响部分前端取值的行为和结果。</p><p><code>Image</code>：图片一般放 CDN，大部分情况不需要 Cookie，故影响有限。但如果引用了需要鉴权的图片，可能会受到影响。</p><p>除了这些还有 script 的方式，这种方式也不会发送 Cookie，像淘宝的大部分请求都是 <code>jsonp</code>，如果涉及到跨站也有可能会被影响。</p><p><strong>问题</strong></p><p>我们再看看会出现什么的问题？举几个例子：</p><ul><li>天猫和飞猪的页面靠请求淘宝域名下的接口获取登录信息，由于 Cookie 丢失，用户无法登录，页面还会误判断成是由于用户开启了浏览器的“禁止第三方 Cookie”功能导致而给与错误的提示</li><li>淘宝部分页面内嵌支付宝确认付款和确认收货页面、天猫内嵌淘宝的登录页面等，由于 Cookie 失效，付款、登录等操作都会失败</li><li>阿里妈妈在各大网站比如今日头条，网易，微博等投放的广告，也是用 iframe 嵌入的，没有了 Cookie，就不能准确的进行推荐</li><li>一些埋点系统会把用户 id 信息埋到 Cookie 中，用于日志上报，这种系统一般走的都是单独的域名，与业务域名分开，所以也会受到影响。</li><li>一些用于防止恶意请求的系统，对判断为恶意请求的访问会弹出验证码让用户进行安全验证，通过安全验证后会在请求所在域种一个Cookie，请求中带上这个Cookie之后，短时间内不再弹安全验证码。在Chrome80以上如果因为Samesite的原因请求没办法带上这个Cookie，则会出现一直弹出验证码进行安全验证。</li><li>天猫商家后台请求了跨域的接口，因为没有 Cookie，接口不会返回数据</li><li>……</li></ul><p>如果不解决，影响的系统其实还是很多的……</p><p>解决方案就是<code>设置 SameSite 为 none</code>。</p><h2 id="doctype-的作用？严格模式与混杂模式如何区分？它们有何意义？"><a href="#doctype-的作用？严格模式与混杂模式如何区分？它们有何意义？" class="headerlink" title="doctype 的作用？严格模式与混杂模式如何区分？它们有何意义？"></a>doctype 的作用？严格模式与混杂模式如何区分？它们有何意义？</h2><p>DOCTYPE是<code>document type (文档类型)</code> 的缩写。 &lt; !DOCTYPE &gt; 声明位于文档的最前面，处于标签之前，它不是html标签。主要作用是告诉浏览器的解析器使用哪种HTML规范或者XHTML规范来解析页面。</p><p><code>严格模式</code>和<code>混杂模式</code>都是浏览器的呈现模式，浏览器究竟使用混杂模式还是严格模式呈现页面与网页中的<code>DTD</code>（文件类型定义）有关，DTD里面包含了文档的规则。比如：loose.dtd</p><ul><li>严格模式：又称标准模式，是指浏览器按照<code>W3C</code>标准来解析代码，呈现页面</li><li>混杂模式：又称为怪异模式或者兼容模式，是指浏览器按照自己的方式来解析代码，使用一种比较宽松的向后兼容的方式来显示页面。</li></ul><h2 id="HTML5-为什么只需写-lt-DOCTYPE-HTML-gt"><a href="#HTML5-为什么只需写-lt-DOCTYPE-HTML-gt" class="headerlink" title="HTML5 为什么只需写&lt; !DOCTYPE HTML&gt; ?"></a>HTML5 为什么只需写&lt; !DOCTYPE HTML&gt; ?</h2><p>HTML5不基于<code>SGML</code> （标准通用标记语言），因此不需要对<code>DTD</code>（ DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。）进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。</p><p>而HTML4.01基于<code>SGML</code>,所以需要对<code>DTD</code>进行引用，才能告知浏览器文档所使用的文档类型。</p><h2 id="WEB标准以及W3C标准是什么"><a href="#WEB标准以及W3C标准是什么" class="headerlink" title="WEB标准以及W3C标准是什么?"></a>WEB标准以及W3C标准是什么?</h2><p>标签闭合、标签小写、不乱嵌套、使用外链<code>css</code>和<code>js</code>、结构行为表现的分离</p><h2 id="行内元素有哪些？块级元素有哪些？空（void）元素有哪些？"><a href="#行内元素有哪些？块级元素有哪些？空（void）元素有哪些？" class="headerlink" title="行内元素有哪些？块级元素有哪些？空（void）元素有哪些？"></a>行内元素有哪些？块级元素有哪些？空（void）元素有哪些？</h2><p>行内元素不可以设置宽高，不独占一行<br>块级元素可以设置宽高，独占一行</p><ul><li>行内：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;、&lt;abbr&gt;、&lt;acronym&gt;、&lt;b&gt;、&lt;bdo&gt;、&lt;big&gt;、&lt;br&gt;、&lt;cite&gt;、&lt;code&gt;、&lt;dfn&gt;、&lt;em&gt;、&lt;i&gt;、&lt;img&gt;、&lt;input&gt;、&lt;kbd&gt;、&lt;label&gt;、&lt;q&gt;、&lt;samp&gt;、&lt;select&gt;、&lt;small&gt;、&lt;span&gt;、&lt;strong&gt;、&lt;sub&gt;、&lt;sup&gt;、&lt;textarea&gt;、&lt;tt&gt;、&lt;<span class="keyword">var</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>块级：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;、&lt;caption&gt;、&lt;dd&gt;、&lt;div&gt;、&lt;dl&gt;、&lt;dt&gt;、&lt;fieldset&gt;、&lt;form&gt;、&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;、&lt;hr&gt;、&lt;legend&gt;、&lt;li&gt;、&lt;noframes&gt;、&lt;noscript&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;p&gt;、&lt;pre&gt;、&lt;table&gt;、&lt;tbody&gt;、&lt;td&gt;、&lt;tfoot&gt;、&lt;th&gt;、&lt;thead&gt;、&lt;tr&gt;</span><br></pre></td></tr></table></figure><ul><li>空：</li></ul><p>常见的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</span><br></pre></td></tr></table></figure><p>鲜为人知的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;link&gt; &lt;meta&gt;&lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</span><br></pre></td></tr></table></figure><h2 id="xhtml和html有什么区别"><a href="#xhtml和html有什么区别" class="headerlink" title="xhtml和html有什么区别?"></a>xhtml和html有什么区别?</h2><ul><li><p>功能上的差别</p><p>  主要是XHTML可兼容各大浏览器、手机以及PDA，并且浏览器也能快速正确地编译网页</p></li><li><p>书写习惯的差别</p><p>  XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</p></li></ul><h2 id="iframe有那些缺点？"><a href="#iframe有那些缺点？" class="headerlink" title="iframe有那些缺点？"></a>iframe有那些缺点？</h2><ul><li>iframe会阻塞主页面的<code>Onload</code>事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于<code>SEO</code></li><li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给iframe添加<code>src</code>属性值，这样可以绕开以上两个问题</li></ul><h2 id="网页验证码是干嘛的，是为了解决什么安全问题"><a href="#网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="网页验证码是干嘛的，是为了解决什么安全问题"></a>网页验证码是干嘛的，是为了解决什么安全问题</h2><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><h2 id="title与h1的区别、b与strong的区别、i与em的区别？"><a href="#title与h1的区别、b与strong的区别、i与em的区别？" class="headerlink" title="title与h1的区别、b与strong的区别、i与em的区别？"></a>title与h1的区别、b与strong的区别、i与em的区别？</h2><ul><li><code>title</code>属性没有明确意义只表示是个标题，<code>H1</code>则表示层次明确的标题，对页面信息的抓取也有很大的影响;</li><li><code>strong</code>是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时，<code>&lt;strong&gt;</code> 会重读，而<code>&lt;B&gt;</code>是展示强调内容。</li><li><code>i</code>内容展示为斜体，<code>em</code>表示强调的文本；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之webpack篇</title>
      <link href="/posts/20541/"/>
      <url>/posts/20541/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504214722871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="前端代码为何要进行构建和打包？"><a href="#前端代码为何要进行构建和打包？" class="headerlink" title="前端代码为何要进行构建和打包？"></a>前端代码为何要进行构建和打包？</h3><p><strong>第一点，代码层面：</strong></p><ul><li>体积更小（<code>Tree-Shaking</code> 、压缩、合并），加载更快</li><li>编译高级语言或语法（<code>TS</code>、<code>ES6+</code>、模块化、<code>scss</code>）</li><li>兼容性和错误检查（<code>Polyfill</code>、<code>postcss</code>、<code>eslint</code>）</li></ul><p><strong>第二点，研发流程方面：</strong></p><ul><li>统一、高效的开发环境</li><li>统一的构建流程、产出标准</li><li>集成公司构建规范（提测、上线等）<h3 id="module-chunk-bundle分别什么意思，有何区别？"><a href="#module-chunk-bundle分别什么意思，有何区别？" class="headerlink" title="module chunk bundle分别什么意思，有何区别？"></a>module chunk bundle分别什么意思，有何区别？</h3></li><li><code>module</code> —— 各个源码文件，webpack中一切皆模块</li><li><code>chunk</code> —— 多模块合并成的，如 <code>entry</code> <code>import()</code> <code>splitChunk</code></li><li><code>bundle</code> —— 最终的输出文件<h3 id="loader-和-plugin-的区别？"><a href="#loader-和-plugin-的区别？" class="headerlink" title="loader 和 plugin 的区别？"></a>loader 和 plugin 的区别？</h3></li><li><code>loader</code> 模块转换器，如 less -&gt; css 。常见 <code>loader</code> : json-loader、cache-loader、babel-loader、html,css,less,imports…</li><li><code>plugin</code> 拓展插件，如 <code>HtmlWebpackPlugin</code>，把 <code>js</code> 或 <code>css</code> 塞进 <code>html</code> 文件里。常见 <code>puglin</code>：DefinePlugin、BannerPlugin、DllPlugin、IgnorePlugin等</li></ul><h3 id="babel-和-webpack-的区别？"><a href="#babel-和-webpack-的区别？" class="headerlink" title="babel 和 webpack 的区别？"></a>babel 和 webpack 的区别？</h3><ul><li><code>babel</code> —— <code>JS</code> 新语法编译工具、不关心<code>api</code>、不关心模块化</li><li><code>webpack</code> —— 打包构建工具，是多个 <code>loader</code>、<code>Plugin</code> 的集合</li></ul><h3 id="如何产出一个lib？"><a href="#如何产出一个lib？" class="headerlink" title="如何产出一个lib？"></a>如何产出一个lib？</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504173141618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="webpack如何实现懒加载？"><a href="#webpack如何实现懒加载？" class="headerlink" title="webpack如何实现懒加载？"></a>webpack如何实现懒加载？</h3><ul><li>imort()</li><li>结合 <code>Vue</code> <code>React</code> 异步组件</li><li>结合 <code>Vue-router</code> <code>React-router</code> 异步加载路由</li></ul><h3 id="为何Proxy-不能被-Ployfill"><a href="#为何Proxy-不能被-Ployfill" class="headerlink" title="为何Proxy 不能被 Ployfill"></a>为何Proxy 不能被 Ployfill</h3><ul><li>如 <code>class</code> 可以用 <code>function</code> 模拟</li><li>如 <code>Promise</code> 可以用 <code>callback</code> 来模拟</li><li>但 <code>Proxy</code> 的功能用 <code>Object.defineProperty</code> 无法模拟</li></ul><h3 id="babel-runtime-和-babel-ployfill的区别？"><a href="#babel-runtime-和-babel-ployfill的区别？" class="headerlink" title="babel-runtime 和 babel-ployfill的区别？"></a>babel-runtime 和 babel-ployfill的区别？</h3><ul><li><code>babel-ployfill</code> 会污染全局</li><li><code>babel-runtime</code> 不会污染全局</li><li>产出第三方 <code>lib</code> 需要用 <code>babel-runtime</code></li></ul><h3 id="webpack常见性能优化？"><a href="#webpack常见性能优化？" class="headerlink" title="webpack常见性能优化？"></a>webpack常见性能优化？</h3><h4 id="构建速度优化"><a href="#构建速度优化" class="headerlink" title="构建速度优化"></a>构建速度优化</h4><ul><li>优化 <code>babel-loader</code>：<code>babel</code> 编译 <code>ES6+</code> 到 <code>ES5</code> 过程会有较大消耗<br>  <img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504092703180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></li><li><code>IgnorePlugin</code>：避免一些<code>Plugin</code></li><li><code>noParse</code>：不去解析哪些</li><li><code>happyPack</code>（开发和生成环境均可）：多进程打包工具<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504093219974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504093252536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></li><li><code>ParallelUglifyPlugin</code>（仅生产环境）：开启多进程并进行<code>JS</code>代码压缩<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504093437514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> c=a+b;</span><br><span class="line">优化之后: <span class="keyword">var</span> c=<span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><strong>关于开启多进程</strong></p><p>项目较大，打包较慢，开启多进程能够提高速度<br>项目较小，打包很快，开启多进程会降低速度（增加进程开销）<br>因此，按需使用</p><ul><li><p>自动刷新（<strong>不用于生产环境</strong>）：保存之后，编译完成后，浏览器会自动刷新（默认开启）<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504094617307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p></li><li><p>热更新（<strong>不用于生产环境</strong>）：自动刷新升级版，修改后，浏览器不用刷新，代码就生效</p><p>   关于自动刷新的问题：整个网页全部刷新，速度较慢，状态会丢失，另外，对于<code>SPA</code>网页，如果有深层路由的话，一旦代码修改，路由就会返回首页。<br>   而热更新的好处是，新代码生效，网页不刷新，状态不丢失。</p></li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504112504302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504112707334.png"  alt=""></p><ul><li><code>DllPlugin</code>（动态链接库插件，<strong>不用于生产环境</strong>）：针对比较大的第三方插件，没有必要每次打包都要让它打包一遍，可以优先打包好后，即打包 <code>dll</code> 文件，然后再引用它，具体使用通过 <code>DllReferencePlugin</code> 来使用 <code>dll</code> 文件。</li></ul><h4 id="产出代码优化"><a href="#产出代码优化" class="headerlink" title="产出代码优化"></a>产出代码优化</h4><p>为了达到如下效果：</p><ul><li>体积更小</li><li>合理分包，不重复加载</li><li>速度更快、内容使用更少</li></ul><p>处理：</p><ul><li><p>小图片 <code>base64</code> 编码，减少网络请求</p></li><li><p><code>bundle</code> 加 <code>hash</code></p></li><li><p>懒加载</p></li><li><p>提取公共代码</p></li><li><p><code>IgnorePlugin</code></p></li><li><p>使用 <code>CDN</code> 加速</p></li><li><p>使用 <code>production</code></p><p>  自动开启压缩代码<br>  <code>Vue</code> <code>React</code> 等会自动删掉调试代码（如开发环境的 <code>warning</code>）<br>  （<code>ES6 Module</code> 才能让 <code>tree-shaking</code> 生效，而 <code>commonjs</code> 不行，因为只有静态引用才可生效，见下文区别）</p></li><li><p><code>Scope Hosting</code><br>  代码体积更小<br>  创建函数作用域更少<br>  代码可读性更好<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504131854442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p></li></ul><p><strong>ES6 Module 和 Commonjs 区别</strong></p><ul><li>ES6 Module 静态引入，编译时引入（直接引用，不能用代码变量判断是否引用）</li><li>Commonjs 动态引入，执行时引入</li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504131642495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>之前一直折腾美团那个项目，在视频介绍有说过，做完项目就继续整理我的笔记仓库。如下图所示，自己还是觉得有不错的回应吧，建立仓库之初还没有想过会有人给我 <code>star</code>，更别说 <code>fork</code> 之后 <code>pull request</code> 了。诶，没想到还真有，✿✿ヽ(°▽°)ノ✿</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504215017221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">:sunny:小狮子前端の学习:cloud:整理笔记:heart:（传送门）</a></p><p><a href="https://github.com/Chocolate1999/Vue-family-bucket-SSR-Koa2-full-stack-development-from-Meituan" target="_blank" rel="noopener">Vue全家桶+SSR+Koa2全栈开发:cloud:（传送门）</a></p><p>如果您觉得不错，那么请毫不留情地给个 <code>star</code> 吧，您的支持是我继续创作的动力！<code>star</code> 数越多，就会有更多的小伙伴能够看到，或许更多的人在前端有了方向不是。</p><p>目前，可以说前端知识梳理篇正式出炉啦，请读者跟上俺的步伐，一起学习前端知识吧，不妨关注一波不迷路~</p><p>此外，我的微信公众号：<code>小狮子前端Vue</code> 也运作啦，目前已经开设前端每日一题专栏，每天会发布一篇文章，具体如下图所示，仅需几分钟，就能获得知识，岂不是白嫖的感觉~<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200504214831255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>此次灵感也是来自于在微信 <code>看一看</code> ，我看到了考研大军的激情，有着每日一句的专栏，每天可能就只需要那么几分钟的时间，就能学习英语。我觉得是挺不错的，那我也想尝试这样做，一方面，我能每天整理一点学习笔记来，另一方面，也算是自己每天学习打卡。<strong>一小步或许就是未来一大步</strong>，要来一起打卡吗✿✿ヽ(°▽°)ノ✿</p><p>最后，没啥要总结的了，小狮子笔记仓库会一直更新下去，每日一题专栏我也会坚持记录。我想，能影响一些人就已经不错啦，曾经也是受过很多dalao影响，目前也是在回馈开源。好啦，下期再见，一个不是只会写业务代码的前端攻城狮在下一期又会写什么呢？</p><p>点赞收藏评论，三连支持，下期早点见哈哈哈哈哈~</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">学如逆水行舟，不进则退</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 技术栈 手写响应式原理 到 探索设计模式</title>
      <link href="/posts/37332/"/>
      <url>/posts/37332/</url>
      
        <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>学习完了ES 6基础，<a href="https://blog.csdn.net/weixin_42429718/article/details/104696830" target="_blank" rel="noopener">推荐阅读：ECMAScript 6 全套学习目录 整理 完结</a></p><p>现在开始逐步深入Vue 技术栈，想了想，技术栈专栏的主要内容包括：</p><p>1、Vue源码分析<br>2、手把手教 保姆级 撸代码<br>3、无惧面试，学以致用，继承创新<br>4、谈谈前端发展与学习心得<br>5、手写源码技术栈，附上详细注释<br>6、从源码中学习设计模式，一举两得<br>7、编程思想的提升及代码质量的提高<br>8、通过分析源码学习架构，看看优秀的框架<br>9、项目实战开发<br>10、面试准备，完善个人简历</p><hr/><p>暂时想到的就这么多，把这列举的10点做好了，我觉得也OK了，欢迎一起学习，觉得不错的话，可以关注博主，专栏会不断更新，可以关注一下，<a href="https://blog.csdn.net/weixin_42429718/category_9761758.html" target="_blank" rel="noopener">传送门~</a></p><h2 id="学习目录"><a href="#学习目录" class="headerlink" title="学习目录"></a>学习目录</h2><p>为了方便自己查阅与最后整合，还是打算整个目录，关于Vue技术栈前面的几篇优秀的文章：</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Vue-2的响应式原理"><a href="#Vue-2的响应式原理" class="headerlink" title="Vue 2的响应式原理"></a>Vue 2的响应式原理</h3><hr/><p>提到Vue2的响应式原理，或许你就会想到<code>Object.defineProperty()</code>，但Object.defineProperty()严格来说的话，并不是来做响应式的。</p><h4 id="什么是defineProperty"><a href="#什么是defineProperty" class="headerlink" title="什么是defineProperty( )"></a>什么是defineProperty( )</h4><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104472989" target="_blank" rel="noopener">推荐阅读：Vue 中 数据劫持 Object.defineProperty()</a></p><ul><li>defineProperty其实是定义对象的属性，或者你可以认为是对象的属性标签<blockquote><div>defineProperty其实并不是核心的为一个对象做数据双向绑定，而是去给对象做属性标签，只不过属性里的get和set实现了响应式</div></blockquote></li></ul><table><thead><tr><th>属性名</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>undefined</td></tr><tr><td>get</td><td>undefined</td></tr><tr><td>set</td><td>undefined</td></tr><tr><td>writalbe</td><td>true</td></tr><tr><td>enumerable</td><td>true</td></tr><tr><td>configurable</td><td>true</td></tr></tbody></table><p>下面我们来详细了解一下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数说明：1.对象 2.对象的某个属性 3.对于属性的配置</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line">writable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">'a'</span>));</span><br></pre></td></tr></table></figure><p>打开浏览器，按F12，将以上代码粘贴过去，查看控制台内容：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307130404152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>上述，打印的就是我们obj对象中a属性的一系列标签，权限方面可以看到默认的话为true</p><p>那么，我们刚刚设置了 writalbe为false，即设置了a属性不可写，进行简单测试一下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307130555143.png"  alt=""><br>发现我们无法对a属性进行value的修改，因为将writalbe设置了为false</p><p>当然，我们可以设置其他权限标签，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数说明：1.对象 2.对象的某个属性 3.对于属性的配置</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line">writable:<span class="literal">false</span>,</span><br><span class="line">enumerable:<span class="literal">false</span>,</span><br><span class="line">configurable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">'a'</span>));</span><br></pre></td></tr></table></figure><p>因此，承接上文所述，defineProperty并不是来做响应式的，而是给对象中某个属性设置权限操作，是否可写，是否可以for in，是否可delete</p><hr/><h4 id="get和set的使用"><a href="#get和set的使用" class="headerlink" title="get和set的使用"></a>get和set的使用</h4><p>Vue中实现双向绑定，其实就是与get和set有很大关系</p><p>举个栗子，请看如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数说明：1.对象 2.对象的某个属性 3.对于属性的配置</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line"><span class="keyword">get</span>:function()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a is be get!'</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>:function()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a is be set!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">'a'</span>));</span><br></pre></td></tr></table></figure><p>我们在控制台，简单测试一下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307131508633.png"  alt=""><br>问题来了，细心的伙伴，应该发现了上图的问题，当我们get的时候，我们返回的是一个undefined，而且我们set一个值之后，也是获取不到新值，依旧是undefined，如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307131752670.png"  alt=""><br>原因呢，其实就是我们的get函数是有返回值的，如果你不return的话，就会默认返回undefined，不管你怎么set都没用，那么如何解决这个问题呢，请看下面代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//借助外部变量存储值</span></span><br><span class="line"><span class="keyword">let</span> _value=obj.a;</span><br><span class="line"><span class="comment">//参数说明：1.对象 2.对象的某个属性 3.对于属性的配置</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line"><span class="keyword">get</span>:function()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a is be get!'</span>);</span><br><span class="line"><span class="keyword">return</span> _value;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>:function(newVal)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a is be set!'</span>);</span><br><span class="line">_value=newVal;</span><br><span class="line"><span class="keyword">return</span> _value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">'a'</span>));</span><br></pre></td></tr></table></figure><p>可以看到，我们必须借助一个外部变量，也就是中转站一样，才能达到我们的get和set效果，这也是vue2 中不太优雅的地方</p><p>然后，查看控制台，解决了上述问题<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307132357945.png"  alt=""></p><h4 id="Vue中从改变一个数据到发生改变的过程"><a href="#Vue中从改变一个数据到发生改变的过程" class="headerlink" title="Vue中从改变一个数据到发生改变的过程"></a>Vue中从改变一个数据到发生改变的过程</h4><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307132712267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h4 id="手写-Vue-2-中响应式原理"><a href="#手写-Vue-2-中响应式原理" class="headerlink" title="手写 Vue 2 中响应式原理"></a>手写 Vue 2 中响应式原理</h4><p>基于上述流程图，我们可以手写一个简单版的Vue2.0实现双向绑定的例子：</p><p>这里我就只实现逻辑，不具体去弄视图渲染了</p><p><strong>文件名：2.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vue响应式手写实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.$data=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">this</span>.el=<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="keyword">this</span>.virtualdom=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">this</span>.observer(<span class="keyword">this</span>.$data)</span><br><span class="line"><span class="keyword">this</span>.render();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册get和set监听</span></span><br><span class="line">vue.prototype.observer=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> value; <span class="comment">//借助外部变量</span></span><br><span class="line"><span class="keyword">var</span> self=<span class="keyword">this</span>; <span class="comment">//缓存this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*下面代码 a可能是data里的某个对象，不是属性</span></span><br><span class="line"><span class="comment">因此在vue2.0中需要for in循环找到属性*/</span></span><br><span class="line"><span class="comment">//Object.defineProperty(obj,'a') </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">value=obj[key];</span><br><span class="line"><span class="comment">//判断是否为对象</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">'object'</span>)&#123;</span><br><span class="line"><span class="keyword">this</span>.observer(value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data,key,&#123;</span><br><span class="line"><span class="keyword">get</span>:function()&#123;</span><br><span class="line"><span class="comment">//进行依赖收集</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>:function(newVal)&#123;</span><br><span class="line">value=newVal;</span><br><span class="line"><span class="comment">//视图渲染</span></span><br><span class="line">self.render();</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新渲染部分</span></span><br><span class="line">vue.prototype.render=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.virtualdom=<span class="string">"i am "</span>+<span class="keyword">this</span>.$data.a;</span><br><span class="line"><span class="keyword">this</span>.el.innerHTML=<span class="keyword">this</span>.virtualdom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件名：index.html</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;手写Vue响应式原理&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">'app'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>./<span class="number">2.</span>js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">var vm = new vue();</span></span><br><span class="line"><span class="string">//设置set定时器</span></span><br><span class="line"><span class="string">setTimeout(function()&#123;</span></span><br><span class="line"><span class="string">console.log('2秒后将值改为123');</span></span><br><span class="line"><span class="string">console.log(vm.$data);</span></span><br><span class="line"><span class="string">vm.$data.a=123;</span></span><br><span class="line"><span class="string">&#125;,2000)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>查看页面，就会有如下效果：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307135836555.gif"  alt=""></p><p>那么，以后面试如果遇到手写响应式原理，把上述js代码写上去就ok了</p><h4 id="源码分析：响应式原理中的依赖收集"><a href="#源码分析：响应式原理中的依赖收集" class="headerlink" title="源码分析：响应式原理中的依赖收集"></a>源码分析：响应式原理中的依赖收集</h4><p>手写的代码里面对于依赖收集这一块我们进行了省略，下面我们从源码的角度去看依赖收集到底是什么玩意：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defineReactive$$1</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    obj,</span></span></span><br><span class="line"><span class="function"><span class="params">    key,</span></span></span><br><span class="line"><span class="function"><span class="params">    val,</span></span></span><br><span class="line"><span class="function"><span class="params">    customSetter,</span></span></span><br><span class="line"><span class="function"><span class="params">    shallow</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="comment">//依赖收集</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">    <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">    <span class="keyword">var</span> getter = property &amp;&amp; property.get;</span><br><span class="line">    <span class="keyword">var</span> setter = property &amp;&amp; property.set;</span><br><span class="line">    <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">      val = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> childOb = !shallow &amp;&amp; observe(val);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      <span class="keyword">get</span>: function reactiveGetter () &#123;</span><br><span class="line">        <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">  <span class="comment">//进行依赖收集</span></span><br><span class="line">          dep.depend();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*采用依赖收集的原因：*/</span></span><br><span class="line">  </span><br><span class="line">          <span class="comment">//1.data里面的数据并不是所有地方都要用到</span></span><br><span class="line">          <span class="comment">//2.如果我们直接更新整个视图，会造成资源浪费</span></span><br><span class="line">  <span class="comment">//3.将依赖于某个变量的组件收集起来</span></span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">            childOb.dep.depend();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">              dependArray(value);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">        <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">        <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">        <span class="keyword">if</span> (customSetter) &#123;</span><br><span class="line">          customSetter();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// #7981: for accessor properties without setter</span></span><br><span class="line">        <span class="keyword">if</span> (getter &amp;&amp; !setter) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">          setter.call(obj, newVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">        childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class="line">        dep.notify();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="对依赖收集的总结"><a href="#对依赖收集的总结" class="headerlink" title="对依赖收集的总结"></a>对依赖收集的总结</h4><p>在初次渲染时，会触发一次get函数，为了提高效率，节省资源，采用依赖收集，这里以之前手写的为例，get部分，我们就会对<code>this.$data</code>里的每一个属性（即key值）进行收集，看在哪些组件里进行了调用，以此提高效率。</p><p>而在set部分，就会更新我们收集到的依赖 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data,key,&#123;</span><br><span class="line"><span class="keyword">get</span>:function()&#123;</span><br><span class="line"><span class="comment">//进行依赖收集</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>:function(newVal)&#123;</span><br><span class="line">value=newVal;</span><br><span class="line"><span class="comment">//视图渲染</span></span><br><span class="line">self.render();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="额外注意——关于数组的监听（探索设计模式）"><a href="#额外注意——关于数组的监听（探索设计模式）" class="headerlink" title="额外注意——关于数组的监听（探索设计模式）"></a>额外注意——关于数组的监听（探索设计模式）</h4><p>从前文我们可以了解到，defineProperty定义的ger和set是对象的属性，那么数组该怎么办呢？</p><p>对于数组呢，在Vue中，你是没有办法像C/C++、Java等语言那样直接通过操作下标来触发更新，只能通过push、pop等方法来触发数据更新</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">arr.pop();</span><br><span class="line">arr.shift();</span><br></pre></td></tr></table></figure><p>这里 <strong><font color=red>特别重要!</font></strong></p><p>关于数组这一块里面巧妙运用到了一个设计模式——<font color=blue>装饰者模式</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//装饰者模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先取出原型</span></span><br><span class="line"><span class="keyword">var</span> arraypro=<span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="comment">//拷贝一份，原因：避免影响到了原来的原型链</span></span><br><span class="line"><span class="keyword">var</span> arrob=<span class="built_in">Object</span>.create(arraypro);</span><br><span class="line"><span class="comment">//定义一个需要装饰的方法的数组，这里只例举以下三个</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="string">'push'</span>,<span class="string">'pop'</span>,<span class="string">'shift'</span>];</span><br><span class="line"><span class="comment">//设置重写方法（装饰者模式）</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">methods,index</span>)</span>&#123;</span><br><span class="line">arrob[method]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//先调用原来的方法</span></span><br><span class="line"><span class="keyword">var</span> res=arraypro[method].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">//触发视图更新</span></span><br><span class="line">dep.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//接下来将数组的prototype替换到data上的prototype(此处省略)</span></span><br><span class="line"><span class="comment">//这样的话，例如我们push方法，既能push又能触发视图更新了</span></span><br></pre></td></tr></table></figure><p>对于设计模式呢，其实并不是很难，常说难懂，很难学，可能你学设计模式，你看了书，看到的可能就是简单事例，只是一个用法，没有训练思维，正确的做法是：</p><ul><li>提高我们的思维，提高代码质量</li><li>先学透，记住一些定义和一些具体使用，然后去看，去探索</li><li>非常好的一种方式就是结合源码，例如上文我们从Vue数组的监听原理里面剖析出来了装饰者模式</li><li>学以致用</li></ul><h3 id="Vue-3的响应式原理"><a href="#Vue-3的响应式原理" class="headerlink" title="Vue 3的响应式原理"></a>Vue 3的响应式原理</h3><hr/><p>对于2.0响应式原理，我们暂告一段落，接下来，我们讨论Vue 3中的技巧，众所周知，Vue 3将<code>defineProperty</code>替换成了<code>proxy</code></p><h4 id="什么是proxy"><a href="#什么是proxy" class="headerlink" title="什么是proxy"></a>什么是proxy</h4><p>用于定义基本操作的自定义行为</p><blockquote><div>和defineProperty类似，功能几乎一样，只不过用法上有所不同</div></blockquote><p>和上文一样，我们依旧写一个响应式，不过下面的代码是有问题的，读者可以先思考一下。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无需借助外部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line"><span class="keyword">get</span>(target,key,receiver)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(target,key,receiver);</span><br><span class="line"><span class="keyword">return</span> target[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(target,key,value,receiver)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value);</span><br><span class="line"><span class="comment">//return target[key]=value;</span></span><br><span class="line"><span class="comment">/*上面注释的代码和上一行意思相同*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们在控制台跑一下上述代码，发现它并没有输出console.log的内容，因此是有问题的<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307191318942.png"  alt=""><br>正确代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无需借助外部变量</span></span><br><span class="line"><span class="comment">//对于vue 2，提高效率，无需for in 遍历找属性</span></span><br><span class="line"><span class="comment">//不会污染原对象，会返回一个新的代理对象，原对象依旧是原对象</span></span><br><span class="line"><span class="comment">//也是软件工程里的重要知识，尽量不要"污染"原对象，不用给原对象做任何操作</span></span><br><span class="line"><span class="comment">//只需对代理对象进行操作</span></span><br><span class="line"><span class="keyword">var</span> objChildren=<span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line"><span class="keyword">get</span>(target,key,receiver)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(target,key,receiver);</span><br><span class="line"><span class="keyword">return</span> target[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(target,key,value,receiver)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value);</span><br><span class="line"><span class="comment">//return target[key]=value;</span></span><br><span class="line"><span class="comment">/*上面注释的代码和上一行意思相同*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="总结：为什么Vue-3中使用proxy"><a href="#总结：为什么Vue-3中使用proxy" class="headerlink" title="总结：为什么Vue 3中使用proxy"></a>总结：为什么Vue 3中使用proxy</h4><ul><li>defineProperty只能监听某个属性，不能对全对象进行监听</li><li>可以省去for in遍历找对象中的属性，提高效率，省去很多代码</li><li>可以监听数组，不用再去单独的对数组进行特异性操作</li><li>不会污染原对象，会返回一个新的代理对象，原对象依旧是原对象</li><li>只需对代理对象进行操作</li></ul><h4 id="手写-Vue-3-中响应式原理"><a href="#手写-Vue-3-中响应式原理" class="headerlink" title="手写 Vue 3 中响应式原理"></a>手写 Vue 3 中响应式原理</h4><p>下面代码，是在上文手写 Vue 2 响应式原理基础上修改的，通过对比，可以发现，我们省去了好多代码，不需要进行for in循环比较复杂、耗时间的操作了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vue响应式手写实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.$data=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">this</span>.el=<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="keyword">this</span>.virtualdom=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">this</span>.observer(<span class="keyword">this</span>.$data)</span><br><span class="line"><span class="keyword">this</span>.render();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册get和set监听</span></span><br><span class="line">vue.prototype.observer=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> self=<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.$data=<span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">this</span>.$data,&#123;</span><br><span class="line"><span class="keyword">get</span>(target,key)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(target,key,value)&#123;</span><br><span class="line">target[key]=value;</span><br><span class="line">self.render();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新渲染部分</span></span><br><span class="line">vue.prototype.render=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.virtualdom=<span class="string">"i am "</span>+<span class="keyword">this</span>.$data.a;</span><br><span class="line"><span class="comment">//this.el.innerHTML=this.virtualdom;</span></span><br><span class="line"><span class="keyword">this</span>.el.innerHTML=<span class="keyword">this</span>.virtualdom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看页面，就会有如下效果：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200307135836555.gif"  alt=""></p><h4 id="proxy这么好用，还能做什么呢？（再遇设计模式）"><a href="#proxy这么好用，还能做什么呢？（再遇设计模式）" class="headerlink" title="proxy这么好用，还能做什么呢？（再遇设计模式）"></a>proxy这么好用，还能做什么呢？（再遇设计模式）</h4><p>我们学习知识并不只是为了应付面试那种程度，对于面试应该作为我们的最低要求，接下来，我们接着去深度研究proxy还能干什么呢？</p><p>在 Vue 3 基本上已经不兼容IE8了，这里简单提及一下</p><ul><li><strong>类型验证</strong></li></ul><p>这里我们就自定义一个实例：创建一个成人的对象，拥有name和age两个属性</p><p>要求：name必须是中文，age必须是数字，并且大于18</p><p>如果用纯原生js做验证的话，可想有多难去验证上述需求，或许你想到的是在构造函数里面去实现，但也不会简单，那么我们看看proxy怎么实现的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型验证</span></span><br><span class="line"><span class="comment">//外部定义一个验证器对象</span></span><br><span class="line"><span class="keyword">var</span> validator=&#123;</span><br><span class="line">name:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[\u4E00-\u9FA5]+$/</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> value==<span class="string">'string'</span>&amp;&amp;reg.test(value))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br><span class="line">age:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> value==<span class="string">'number'</span>&amp;&amp;value&gt;=<span class="number">18</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">this</span>,&#123;</span><br><span class="line"><span class="keyword">get</span>(target,key)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(target,key,value)&#123;</span><br><span class="line"><span class="keyword">if</span>(validator[key](value))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(key+<span class="string">' is not right!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <strong><font color=red>特别重要!</font></strong></p><p>关于类型验证这一块里面又巧妙运用到了一个设计模式——<font color=blue>策略模式</font></p><p>关于设计模式这一块，此专栏不会细讲，但会在探索源码时发现了好的实例，会提出来一下。</p><p>上述用到了一个正则表达式，关于这个可能面试会问到，这是之前ES 6 里的内容，大家可以看看这篇简单易懂的文章：</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104591240" target="_blank" rel="noopener">推荐阅读：ES6 面试题：你能说出浏览器上到此支持多少个中文字吗？</a></p><ul><li><strong>私有变量</strong></li></ul><p>关于私有变量这一块，我们就拿 <code>vue-router 源码</code>来进行分析：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue-router源码分析</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>,<span class="string">'$router'</span>,&#123;<span class="comment">//Router的实例</span></span><br><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>._root._router;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>,<span class="string">'$route'</span>,&#123;</span><br><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="comment">//当前路由所在的状态</span></span><br><span class="line">current:<span class="keyword">this</span>._root._router.history.current</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过查看源码，提出疑问：为什么要为<code>$router</code>写get方法呢，而且没做什么操作，只是一个return？</p><p>原因：这样可以使得<code>$router</code>不可修改。避免程序员通过set修改了路由，导致路由失效的情况。这里就体现了数据安全思想，前端程序员或许考虑的没有Java程序员多，甚至没有为变量想过某个变量设置不可修改。由于工作的需要，我们也要努力提升自己的代码质量！让自己的职业生涯更加辉煌！</p><h3 id="virtual-dom-和-diff算法"><a href="#virtual-dom-和-diff算法" class="headerlink" title="virtual dom 和 diff算法"></a>virtual dom 和 diff算法</h3><hr/><p>关于diff算法和虚拟dom，也是面试常见的问题，平常容易忽视，这里我也就深入研究了一下：</p><h4 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h4><p>所谓虚拟dom，如字面意思，它是虚拟的，只在概念里面存在，并不真的存在，在vue中是ast语法树，关于这个语法树本文就不详细介绍了，有兴趣的读者可以深入研究一下。</p><p>下面代码，是一个简单vue template模板，那么解析成虚拟dom是怎样的呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">'dd'</span>&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;abc&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;<span class="number">123</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><p>解析成虚拟dom：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">diff &lt;div&gt;</span><br><span class="line">props:&#123;</span><br><span class="line">id:dd</span><br><span class="line">&#125;,</span><br><span class="line">children:[</span><br><span class="line">diff &lt;p&gt;</span><br><span class="line">props:</span><br><span class="line">children:[</span><br><span class="line"></span><br><span class="line">],</span><br><span class="line">text:xxx,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>上述代码就是概念上的介绍，如果懂一点算法知识的应该就明白了，就是不断地嵌套，但为了让更多伙伴读懂学会虚拟dom，下面来手写一个对象的形式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">'dd'</span>&gt;</span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;abc&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;<span class="number">123</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var virtual=</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">dom:'div',</span></span><br><span class="line"><span class="regexp">props:&#123;</span></span><br><span class="line"><span class="regexp">id:dd</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">children:[</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">dom:'p',</span></span><br><span class="line"><span class="regexp">children:[</span></span><br><span class="line"><span class="regexp">dom:'span',</span></span><br><span class="line"><span class="regexp">children:[]</span></span><br><span class="line"><span class="regexp">]</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">dom:'p',</span></span><br><span class="line"><span class="regexp">children:[</span></span><br><span class="line"><span class="regexp">]</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">dom:'p',</span></span><br><span class="line"><span class="regexp">children:[</span></span><br><span class="line"><span class="regexp">]</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">]</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>上述代码应该就很清晰了，简单来说，就是将最上面的dom结构，解析成下面用js解析成的对象，每一个对象都有一个基础的结构：</p><ul><li>dom元素标签</li><li>props记录挂载了哪些属性</li><li>children记录有哪些子元素（子元素拥有和父元素相同的结构）</li></ul><h4 id="diff算法的比对机制"><a href="#diff算法的比对机制" class="headerlink" title="diff算法的比对机制"></a>diff算法的比对机制</h4><p>下面部分采用了伪代码形式介绍diff算法的比对机制，已经给出了详细的注释说明：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//diff算法匹配机制</span></span><br><span class="line">patchVnode(oldVnode,vnode)&#123;</span><br><span class="line"><span class="comment">//先拿到真实的dom</span></span><br><span class="line"><span class="keyword">const</span> el=vnode.el=oldVnode.el;</span><br><span class="line"><span class="comment">//分别拿出旧节点和新节点的子元素</span></span><br><span class="line"><span class="keyword">let</span> i,oldCh=oldVnode.children,ch=vnode.children;</span><br><span class="line"><span class="comment">//如果新旧节点相同，直接return</span></span><br><span class="line"><span class="keyword">if</span>(oldVnode==vnode) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/*分四种情况讨论*/</span></span><br><span class="line"><span class="comment">//1.只有文字节点不同的情况</span></span><br><span class="line"><span class="keyword">if</span>(oldVnode.text!==<span class="literal">null</span>&amp;&amp;vnode.text!==<span class="literal">null</span>&amp;&amp;oldVnode.text!==vnode.text)&#123;</span><br><span class="line">api.setTextContent(el,vnode.text);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">updateEle();</span><br><span class="line"><span class="comment">//2.如果新旧节点的子元素都存在，那么发生的是子元素变动</span></span><br><span class="line"><span class="keyword">if</span>(oldCh&amp;&amp;ch&amp;&amp;oldCh!==ch)&#123;</span><br><span class="line">updateChildren();</span><br><span class="line"><span class="comment">//3.如果只有新节点有子元素，那么发生的是新增子元素</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch)&#123;</span><br><span class="line">createEl(vnode);</span><br><span class="line"><span class="comment">//4.如果只有旧节点有子元素，那么发生的是新节点删除了子元素</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(oldCh)&#123;</span><br><span class="line">api.removeChildren(el);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">学如逆水行舟，不进则退</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加加载动画</title>
      <link href="/posts/35726/"/>
      <url>/posts/35726/</url>
      
        <content type="html"><![CDATA[<h2 id="butterfly主题"><a href="#butterfly主题" class="headerlink" title="butterfly主题"></a>butterfly主题</h2><h3 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h3><p>如果你是 <code>clone</code> 原主题 <code>dev</code> 分支的话，这篇博客可能不需要继续阅读下去，你只需将主题下<code>Butterfly.yml</code> 中 <code>preloader: false</code> 变为 <code>true</code> 即可。但是如果你是 <code>clone</code> 的 <code>master</code> 分支，和我一样，想自己搞一个加载动画，那就按着教程一步一步来。但我弄完之后，发现不开着或许会好一点，然后又变为<code>false</code>了。</p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>第一步，在 <code>themes/Butterfly/layout/includes/layout.pug</code> 添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.preloader</span><br><span class="line">      !=<span class="keyword">partial</span>(<span class="string">'includes/loading/loading'</span>, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425161421493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>继续，在 <code>themes/Butterfly/layout/404.pug</code> 添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.preloader</span><br><span class="line">  !=<span class="keyword">partial</span>(<span class="string">'includes/loading/loading'</span>, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)  </span><br><span class="line"><span class="keyword">if</span> theme.fireworks &amp;&amp; theme.fireworks.enable</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425165337982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>在 <code>themes/Butterfly/layout/includes/additional-js.pug</code> 最后一行添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.preloader</span><br><span class="line">  !=<span class="keyword">partial</span>(<span class="string">'includes/loading/loading-js'</span>, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425162511644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>第二步，在 <code>themes/Butterfly/layout/includes</code> 下新建一个文件夹，命名为 <code>loading</code>，如下图所示，添加两个文件。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425161524732.png"  alt=""></p><p><code>loading-js.pug</code></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">script.</span><br><span class="line">  <span class="keyword">var</span> endLoading = function () &#123;</span><br><span class="line">    document.body.style.overflow = <span class="string">'auto'</span>;</span><br><span class="line">    document.getElementById(<span class="string">'loading-box'</span>).classList.<span class="keyword">add</span>(<span class="string">"loaded"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(<span class="string">'load'</span>,endLoading)</span><br></pre></td></tr></table></figure><p><code>loading.pug</code></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#loading-box</span></span><br><span class="line">  .loading-left-bg</span><br><span class="line">  .loading-right-bg</span><br><span class="line">  .spinner-box</span><br><span class="line">    .configure-border<span class="number">-1</span></span><br><span class="line">      .configure-core</span><br><span class="line">    .configure-border<span class="number">-2</span></span><br><span class="line">      .configure-core</span><br><span class="line">    .loading-word= _p(<span class="string">'loading'</span>)</span><br></pre></td></tr></table></figure><p>第三步，在<code>themse/Butterfly/source/css/_layout/</code> 文件夹下新建 <code>loadding.styl</code>，复制下面代码，添加</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hexo-config(<span class="string">'preloader'</span>)</span><br><span class="line">  loading-bg()</span><br><span class="line">    position: <span class="keyword">fixed</span></span><br><span class="line">    z-index: <span class="number">1000</span></span><br><span class="line">    width: <span class="number">50</span>%</span><br><span class="line">    height: <span class="number">100</span>%</span><br><span class="line">    background-color: $preloader-bg</span><br><span class="line">    transition: all <span class="number">.5</span>s</span><br><span class="line"></span><br><span class="line">  <span class="meta">#loading-box</span></span><br><span class="line">    .loading-left-bg</span><br><span class="line">      loading-bg()</span><br><span class="line"></span><br><span class="line">    .loading-right-bg</span><br><span class="line">      loading-bg()</span><br><span class="line">      right: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    .spinner-box</span><br><span class="line">      position: <span class="keyword">fixed</span></span><br><span class="line">      z-index: <span class="number">1001</span></span><br><span class="line">      display: flex</span><br><span class="line">      justify-content: center</span><br><span class="line">      align-items: center</span><br><span class="line">      width: <span class="number">100</span>%</span><br><span class="line">      height: <span class="number">100</span>vh</span><br><span class="line"></span><br><span class="line">      .configure-border<span class="number">-1</span></span><br><span class="line">        position: absolute</span><br><span class="line">        padding: <span class="number">3</span>px</span><br><span class="line">        width: <span class="number">115</span>px</span><br><span class="line">        height: <span class="number">115</span>px</span><br><span class="line">        background: <span class="meta">#ffab91</span></span><br><span class="line">        animation: configure-clockwise <span class="number">3</span>s ease-<span class="keyword">in</span>-<span class="keyword">out</span> <span class="number">0</span>s infinite alternate</span><br><span class="line"></span><br><span class="line">      .configure-border<span class="number">-2</span></span><br><span class="line">        left: <span class="number">-115</span>px</span><br><span class="line">        padding: <span class="number">3</span>px</span><br><span class="line">        width: <span class="number">115</span>px</span><br><span class="line">        height: <span class="number">115</span>px</span><br><span class="line">        background: rgb(<span class="number">63</span>, <span class="number">249</span>, <span class="number">220</span>)</span><br><span class="line">        transform: rotate(<span class="number">45</span>deg)</span><br><span class="line">        animation: configure-xclockwise <span class="number">3</span>s ease-<span class="keyword">in</span>-<span class="keyword">out</span> <span class="number">0</span>s infinite alternate</span><br><span class="line"></span><br><span class="line">      .loading-word</span><br><span class="line">        position: absolute</span><br><span class="line">        color: $white</span><br><span class="line">        font-size: <span class="number">.8</span>rem</span><br><span class="line"></span><br><span class="line">      .configure-core</span><br><span class="line">        width: <span class="number">100</span>%</span><br><span class="line">        height: <span class="number">100</span>%</span><br><span class="line">        background-color: $preloader-bg</span><br><span class="line"></span><br><span class="line">    &amp;.loaded</span><br><span class="line">      .loading-left-bg</span><br><span class="line">        transform: translate(<span class="number">-100</span>%, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      .loading-right-bg</span><br><span class="line">        transform: translate(<span class="number">100</span>%, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      .spinner-box</span><br><span class="line">        display: none</span><br><span class="line"></span><br><span class="line">  @keyframes configure-clockwise</span><br><span class="line">    <span class="number">0</span>%</span><br><span class="line">      transform: rotate(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="number">25</span>%</span><br><span class="line">      transform: rotate(<span class="number">90</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">50</span>%</span><br><span class="line">      transform: rotate(<span class="number">180</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">75</span>%</span><br><span class="line">      transform: rotate(<span class="number">270</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">100</span>%</span><br><span class="line">      transform: rotate(<span class="number">360</span>deg)</span><br><span class="line"></span><br><span class="line">  @keyframes configure-xclockwise</span><br><span class="line">    <span class="number">0</span>%</span><br><span class="line">      transform: rotate(<span class="number">45</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">25</span>%</span><br><span class="line">      transform: rotate(<span class="number">-45</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">50</span>%</span><br><span class="line">      transform: rotate(<span class="number">-135</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">75</span>%</span><br><span class="line">      transform: rotate(<span class="number">-225</span>deg)</span><br><span class="line"></span><br><span class="line">    <span class="number">100</span>%</span><br><span class="line">      transform: rotate(<span class="number">-315</span>deg)</span><br></pre></td></tr></table></figure><p>然后在<code>themse/Butterfly/source/css/_mode/darkmode.styl</code> 文件最后一行添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hexo-config(<span class="string">'preloader'</span>)</span><br><span class="line">  <span class="meta">#loading-box</span></span><br><span class="line">    .loading-left-bg,</span><br><span class="line">    .loading-right-bg,</span><br><span class="line">    .configure-core</span><br><span class="line">      background-color: darken(<span class="meta">#121212, 2)</span></span><br><span class="line"></span><br><span class="line">    .loading-word</span><br><span class="line">      color: alpha(<span class="meta">#FFFFFF, .6)</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425164207160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>然后在<code>themse/Butterfly/source/css/var.styl</code> 文件大约在85行添加如下代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//preloader</span></span><br><span class="line">$preloader-bg = #<span class="number">37474f</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425164438387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>第四步，在 <code>themes/Butterfly/languages/zh-CN.yml</code> 文件最后一行，添加如下代码</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">loading: 加载中...</span><br></pre></td></tr></table></figure><p>具体位置参考如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200425161855816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>将<code>themes/Butterfly/layout/includes/head/subtitle.pug</code> 文件替换为如下代码（将原本的删除）</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.subtitle.enable</span><br><span class="line">  - <span class="keyword">var</span> source = theme.subtitle.source</span><br><span class="line">  - <span class="keyword">var</span> subtitleEffect = theme.subtitle.effect</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> subtitleEffect</span><br><span class="line">    script(src=url_for(theme.CDN.typed))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> source == <span class="string">'1'</span></span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">var</span> subtitleType = function () &#123;</span><br><span class="line">        <span class="keyword">var</span> subtitleEffect = !&#123; subtitleEffect &#125;</span><br><span class="line">        fetch(<span class="string">'https://api.btstu.cn/yan/api.php?charset=utf-8&amp;encode=json'</span>,)</span><br><span class="line">          .then(function (res) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">          &#125;)</span><br><span class="line">          .then(function (data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subtitleEffect) &#123;</span><br><span class="line">              <span class="keyword">var</span> sub = <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.length == <span class="number">0</span> ? <span class="keyword">new</span> Array() : <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.split(<span class="string">','</span>)</span><br><span class="line">              <span class="keyword">var</span> both = sub.unshift(data.text)</span><br><span class="line">              <span class="keyword">var</span> typed = <span class="keyword">new</span> Typed(<span class="string">'#subtitle'</span>, &#123;</span><br><span class="line">                strings: sub,</span><br><span class="line">                startDelay: <span class="number">300</span>,</span><br><span class="line">                typeSpeed: <span class="number">150</span>,</span><br><span class="line">                loop: !&#123;theme.subtitle.loop&#125;,</span><br><span class="line">                backSpeed: <span class="number">50</span>,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              document.getElementById(<span class="string">'subtitle'</span>).innerHTML = data.text</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="keyword">catch</span>(function (err) &#123;</span><br><span class="line">            console.error(err)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(<span class="string">'load'</span>, subtitleType)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> source == <span class="string">'2'</span></span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">var</span> subtitleType = function () &#123;</span><br><span class="line">        <span class="keyword">var</span> subtitleEffect = !&#123; subtitleEffect &#125;</span><br><span class="line">        fetch(<span class="string">'https://v1.hitokoto.cn'</span>)</span><br><span class="line">          .then(function (res) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">          &#125;)</span><br><span class="line">          .then(function (data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subtitleEffect) &#123;</span><br><span class="line">              <span class="keyword">var</span> <span class="keyword">from</span> = <span class="string">'出自 '</span> + data.<span class="keyword">from</span></span><br><span class="line">              <span class="keyword">var</span> sub = <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.length == <span class="number">0</span> ? <span class="keyword">new</span> Array() : <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.split(<span class="string">','</span>)</span><br><span class="line">              <span class="keyword">var</span> both = sub.unshift(data.hitokoto, <span class="keyword">from</span>)</span><br><span class="line">              <span class="keyword">var</span> typed = <span class="keyword">new</span> Typed(<span class="string">'#subtitle'</span>, &#123;</span><br><span class="line">                strings: sub,</span><br><span class="line">                startDelay: <span class="number">300</span>,</span><br><span class="line">                typeSpeed: <span class="number">150</span>,</span><br><span class="line">                loop: !&#123;theme.subtitle.loop&#125;,</span><br><span class="line">                backSpeed: <span class="number">50</span>,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              document.getElementById(<span class="string">'subtitle'</span>).innerHTML = data.hitokoto</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="keyword">catch</span>(function (err) &#123;</span><br><span class="line">            console.error(err)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(<span class="string">'load'</span>, subtitleType)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> source == <span class="string">'3'</span></span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">var</span> subtitleType = function () &#123;</span><br><span class="line">        loadScript(<span class="string">'http://yijuzhan.com/api/word.php?m=js'</span>, function () &#123;</span><br><span class="line">          <span class="keyword">var</span> subtitleEffect = !&#123; subtitleEffect &#125;</span><br><span class="line">          <span class="keyword">var</span> con = str[<span class="number">0</span>]</span><br><span class="line">          <span class="keyword">if</span> (subtitleEffect) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">from</span> = <span class="string">'出自 '</span> + str[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">var</span> sub = <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.length == <span class="number">0</span> ? <span class="keyword">new</span> Array() : <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.split(<span class="string">','</span>)</span><br><span class="line">            <span class="keyword">var</span> both = sub.unshift(con, <span class="keyword">from</span>)</span><br><span class="line">            <span class="keyword">var</span> typed = <span class="keyword">new</span> Typed(<span class="string">'#subtitle'</span>, &#123;</span><br><span class="line">              strings: sub,</span><br><span class="line">              startDelay: <span class="number">300</span>,</span><br><span class="line">              typeSpeed: <span class="number">150</span>,</span><br><span class="line">              loop: !&#123;theme.subtitle.loop&#125;,</span><br><span class="line">              backSpeed: <span class="number">50</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            document.getElementById(<span class="string">'subtitle'</span>).innerHTML = con</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(<span class="string">'load'</span>, subtitleType)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> source == <span class="string">'4'</span></span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">var</span> subtitleType = function () &#123;</span><br><span class="line">        loadScript(<span class="string">'https://sdk.jinrishici.com/v2/browser/jinrishici.js'</span>,function () &#123;</span><br><span class="line">            <span class="keyword">var</span> subtitleEffect = !&#123; subtitleEffect &#125;</span><br><span class="line">            jinrishici.load(function (result) &#123;</span><br><span class="line">              <span class="keyword">if</span> (subtitleEffect) &#123;</span><br><span class="line">                <span class="keyword">var</span> sub = <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.length == <span class="number">0</span> ? <span class="keyword">new</span> Array() : <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.split(<span class="string">','</span>)</span><br><span class="line">                <span class="keyword">var</span> content = result.data.content</span><br><span class="line">                <span class="keyword">var</span> both = sub.unshift(content)</span><br><span class="line">                <span class="keyword">var</span> typed = <span class="keyword">new</span> Typed(<span class="string">'#subtitle'</span>, &#123;</span><br><span class="line">                  strings: sub,</span><br><span class="line">                  startDelay: <span class="number">300</span>,</span><br><span class="line">                  typeSpeed: <span class="number">150</span>,</span><br><span class="line">                  loop: !&#123;theme.subtitle.loop&#125;,</span><br><span class="line">                  backSpeed: <span class="number">50</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                document.getElementById(<span class="string">'subtitle'</span>).innerHTML = result.data.content</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(<span class="string">'load'</span>, subtitleType)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">var</span> subtitleEffect = !&#123;subtitleEffect&#125;</span><br><span class="line">      <span class="keyword">if</span> (subtitleEffect) &#123; </span><br><span class="line">        <span class="keyword">var</span> typed = <span class="keyword">new</span> Typed(<span class="string">"#subtitle"</span>, &#123;</span><br><span class="line">          strings: <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.split(<span class="string">","</span>),</span><br><span class="line">          startDelay: <span class="number">300</span>,</span><br><span class="line">          typeSpeed: <span class="number">150</span>,</span><br><span class="line">          loop: !&#123;theme.subtitle.loop&#125;,</span><br><span class="line">          backSpeed: <span class="number">50</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        document.getElementById(<span class="string">"subtitle"</span>).innerHTML = <span class="string">'!&#123;theme.subtitle.sub[0]&#125;'</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>第五步，在主题文件 <code>butterfly.yml</code> 任意位置添加如下代码，启用加载动画，不启用可以设置为 <code>false</code></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 加载动画 Loading Animation</span></span><br><span class="line">preloader: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h2><p>第一步，将以下内容添加到 <code>&lt;head&gt;&lt;/head&gt;</code> 标签内：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/gh/HCLonely/images@master/others/loading.min.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>第二步，将以下内容添加到<code>&lt;body&gt;</code> 标签后面：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"loading-box"</span>&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">"loading-left-bg"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">"loading-right-bg"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">"spinner-box"</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"configure-border-1"</span>&gt;</span><br><span class="line">      &lt;div <span class="keyword">class</span>=<span class="string">"configure-core"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"configure-border-2"</span>&gt;</span><br><span class="line">      &lt;div <span class="keyword">class</span>=<span class="string">"configure-core"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"loading-word"</span>&gt;加载中...&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>第三步，将以下内容添加到 <code>&lt;/body&gt;</code>标签前面：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> endLoading = function () &#123;</span><br><span class="line">    document.body.style.overflow = <span class="string">'auto'</span>;</span><br><span class="line">    document.getElementById(<span class="string">'loading-box'</span>).classList.<span class="keyword">add</span>(<span class="string">"loaded"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(<span class="string">'load'</span>,endLoading);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>参考博客：</strong></p><p>作者: HCLonely<br>链接: <a href="https://blog.hclonely.com/" target="_blank" rel="noopener">https://blog.hclonely.com/</a><br>来源: HCLonely Blog</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码开放】Hexo+Github 博客butterfly 和 matery 主题 搭建完全教程【整理】</title>
      <link href="/posts/520520/"/>
      <url>/posts/520520/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><blockquote><p>注意，本篇博客并不是从零手把手教你去搭博客，那样会很花费时间去写一篇文档，况且从零搭建的博客一搜也是一大把，太多重复的内容就没必要继续写了。因此，对于不知道怎么搭建的伙伴，我会提供我搭建时用到的学习资料，任意选一篇按着教程搭建就好了。另外，本篇博客教程内容主要是记载本站美化DIY方面，更多后续内容将会更新在本站内 <a href="https://yangchaoyi.vip/">https://yangchaoyi.vip</a> 教程内容可复制引用，但请加一个参考链接，谢谢！</p></blockquote><h2 id="关于博客是否开源"><a href="#关于博客是否开源" class="headerlink" title="关于博客是否开源"></a>关于博客是否开源</h2><p>因为本站博客也是最近重新搭建起来的，还有一些优化和功能也在完善。当然，我也会朝着开源方向发展，但<strong>具体什么时候公开博客源码，这还不确定，还需要一段时间准备</strong>。因为选择去开源的话还需要修改很多信息内容，有些隐私以及安全部分需要进行修改，也需要进行版本发布等等。这些都需要一段时间去准备的。</p><p>但你也<strong>不用因为看到这里就觉得这篇文章没有价值了</strong>，我们搭建博客嘛，在于搭的过程，是一个不断迭代的过程，本篇会开源自己当前主题美化教程，你按着教程来，一样可以拥有自己风格的博客。</p><h2 id="博客源码开放"><a href="#博客源码开放" class="headerlink" title="博客源码开放"></a>博客源码开放</h2><p>======  更新！吼吼吼 ========</p><p>目前是已经在做开源的准备了，当然还有一些优化项和功能增加后续在慢慢更新，请小伙伴们关注<a href="https://github.com/Chocolate1999/hexo-blog-lionkk" target="_blank" rel="noopener">本仓库</a>，点个star即可，然后记得关注<code>readme</code>的动态更新，添加的特性与教程都会与代码同步更新。为了回馈开源，这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，由于本人狮子座（单身，苦笑），而且微信公众号名字也是取名：<code>小狮子前端Vue</code>，由于并不是自己开发的主题，起名就不添加<code>theme</code>了，那就叫 <code>hexo-blog-lionkk</code>。&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/Chocolate1999/hexo-blog-lionkk" target="_blank" rel="noopener">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p><strong>简单使用方法：</strong></p><p><code>star</code> 本项目仓库 ^ o ^<br>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>, 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJS</a><br>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地<br>在本地博客仓库运行<code>npm i</code>命令安装依赖包<br>修改配置信息，改成自己的信息<br>运行命令<code>hexo clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo s</code>（本地预览），<code>hexo d</code>（部署）</p><p>有什么问题可以在文章最后评论区<strong>留言和讨论</strong>，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</p><blockquote><p>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我star，谢谢您！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本科大二下学期的时候，因为参与了学校 <code>acm</code> 选拔，获得了参与蓝桥杯比赛的名额，又或者说是门票吧 <a href="https://yangchaoyi.vip/posts/24659/#%E5%BC%95%E8%A8%80">推荐阅读：关于我的大学ACM江湖</a> ，从那个时候开始，我就开始写起了博客，因为学校一位老师的成就，我就选择了 <code>CSDN</code> 这个平台，从那个时候到现在，我几乎每个月都会写博客，到现在已经是一种习惯了。我习惯性的将我所学记录并且分享开源，自己遇到的 <code>bug</code> 记录下来，让看到博客的伙伴少走点坑。<a href="https://yangchaoyi.vip/posts/37335/">必读文章：【长文总结】2020 从零到博客专家 过去的我，现在的我，将来的我</a> </p><p>一晃大学就快结束了，我也成功获得了 <code>CSDN博客专家</code> 荣誉称号。到了大三，也是到了确定自己方向时刻了，考虑之后，选择走前端，成为一个前端程序员。于是呢，我就想着自己 <code>DIY</code> 一个属于自己的博客，有一个比较漂亮的页面，或许能激发阅读兴趣呢？</p><p>本博客基于<code>Hexo</code>，所以首先要了解一下我们搭建博客所要用到的框架。<code>Hexo</code>是高效的静态网站生成框架，它基于<code>Node.js</code>，快速，简单且功能强大，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>官网进行详细查看，因为<code>Hexo</code>的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。通过<code>Hexo</code>，你可以直接使用<code>Markdown</code>语法来撰写博客。相信很多小伙伴写工程都写过<code>README.md</code>文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到<code>github</code>或者<code>coding</code>等代码管理托管平台，然后别人就可以浏览你的博客网页啦。是不是很简单？你无需关心网页源代码的具体生成细节，只需要用心写好你的博客文章内容就行了。</p><blockquote><p>简单总结：Hexo, 产品成熟，使用简单，功能强大，有丰富的各种插件资源；但，像发布后台、站内搜索，评论系统类似诉求，虽然有对应的工具，但也需要自己折腾下，后续我们一步一步介绍。</p></blockquote><p>本站目前的主题是 <code>hexo-theme-butterfly</code> ，在此之前呢，使用过 <code>hexo-theme-matery</code>主题来建站。因此本教程更多的是介绍<code>hexo-theme-butterfly</code>，至于我为什么选择更换这个主题呢？读者可以对比一下它和 <code>csdn</code> 呢，是不是有点相像，既有了原本的界面，页面又更加美观一点，简直喜欢的不要不要的~</p><p>本教程暂时分为五个部分：</p><ul><li>第一部分： <code>hexo-theme-matery</code>主题搭建介绍</li><li>第二部分： <code>hexo-theme-butterfly</code>主题搭建美化DIY教程</li><li>第三部分：分享本站所用的学习资料以及本篇文章所参考的文章</li><li>第四部分：彩蛋（暂时没想到好的标题，给点神秘感hhh）</li><li>第五部分：总结</li></ul><h2 id="第一部分-matery主题搭建介绍"><a href="#第一部分-matery主题搭建介绍" class="headerlink" title="第一部分 matery主题搭建介绍"></a>第一部分 matery主题搭建介绍</h2><h3 id="阅读须知-1"><a href="#阅读须知-1" class="headerlink" title="阅读须知"></a>阅读须知</h3><p>由于更换了主题，但是域名并没有更换，因此下文界面链接可能失效了，但是附上了相关图片介绍，尽管本文并不是详细介绍 <code>matery</code>主题搭建过程，但是在文章内容部分也是提供了一些 dalao 搭建资料，小伙伴们可以参考他们的搭建过程。当然，如果你和我一样，选择<code>butterfly</code>主题，可以跳过第一部分，直接去第二部分即可。</p><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>原本是计划刷题继续提升自己的，奈何看了一个b站up主的关于搭建个人博客的视频，其中有提到对于计算机的我们来说，有一个属于自己的博客是挺重要的，不仅能作为自己的记录，而且还能写进自己简历，丰富大学生活等等。</p><p><font color=red size=4>于是，我就折腾了大概10多天左右，从一开始搭建hexo博客</font></p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104239306" target="_blank" rel="noopener">搭建个人博客 Hexo框架 （自制）</a></p><p><font color=red size=4>到使用了yila主题，但做着做着发现原来主题上面还有升级版的主题，我看到了yilia主题的升级版yelee主题，于是花了3天左右的时间按照教程快速开发了一个个人主页如下图：</font></p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104264485" target="_blank" rel="noopener">Hexo yilia主题 搭建个人主页【整合目录】</a></p><p><a href="http://yangchaoyi1021.cn/" target="_blank" rel="noopener">可以进去瞧一瞧，传送门</a></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200218165557659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p><font color=red size=4>当然，关于yilia主题，挺适合刚入门hexo的伙伴。</font></p><p>这篇博客是我用yilia主题常用的，推荐阅读</p><p><a href="https://blog.csdn.net/lynnbest/article/details/79845944" target="_blank" rel="noopener">Hexo yilia 主题一揽子使用方案</a></p><p><font color=red size=4>然后就是我上面那个图关于yelee主题，下面就是官方文档，按照教程来的话，最多一周就能快速拥有一个自己的博客了</font></p><p><a href="http://moxfive.xyz/yelee/new-features.html" target="_blank" rel="noopener" >yelee主题使用说明（官方文档）</a></p><h3 id="我的主题"><a href="#我的主题" class="headerlink" title="我的主题"></a>我的主题</h3><p>然而，最后我搭建选择的主题呢，以上都不是,<font color=chocolate size=4>我采用的是hexo-theme-matery</font></p><p>以下就是原主题相关特性，大家可以简单看一看</p><p><font color=red size=4>主题特性:</font></p><ul><li><code>简单漂亮</code>，<code>文章内容美观易读</code></li><li>Material Design 设计</li><li><code>响应式设计</code>，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页<code>轮播文章</code>及每天动态切换 Banner 图片</li><li><code>瀑布流式</code>的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替）</li><li><code>时间轴式</code>的归档页</li><li>词云的标签页和雷达图的分类页</li><li><code>丰富的关于我</code>页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的<code>友情链接</code>页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li>TOC 目录</li><li>可设置复制文章内容时追加<code>版权信息</code></li><li>可设置阅读文章时做<code>密码验证</code></li><li>Gitalk、Gitment、Valine 和 Disqus <code>评论模块</code>（推荐使用 Gitalk）</li><li>集成了<code>不蒜子统计</code>、<code>谷歌分析</code>（Google Analytics）和<code>文章字数统计</code>等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h3 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a>简单概述</h3><p><font color=red size=4>显然，看完了特性也还不知道会是啥样，那就整点图？？？</font></p><hr><p><imgsrc="https://img-blog.csdnimg.cn/2020021621451031.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"></img></p><p><font color=chocolate size=4>什么？看完图，还想直接上手体验，好，满足你</font></p><p><a href="https://yangchaoyi.vip/">超逸の博客——传送门</a></p><p>好了，到此结束…</p><hr><h3 id="我的搭建过程"><a href="#我的搭建过程" class="headerlink" title="我的搭建过程"></a>我的搭建过程</h3><p><font color=red size=4>显然，我也是一个小白，花了一周的时间才有了现在这样个人博客，我就简述一下我的零基础搭建过程：</font></p><p>配置hexo环境——创建好了第一个hexo框架——尝试学习yilia主题</p><p>发现了yelee主题，果断重新写——三天就搭建了一个测试版，不断优化压缩（gulp,cdn等等）</p><p>成功搭建了一个个人博客（喜悦，成就感）——从大佬的友链里面发现了更大佬，界面非常美观——赶紧按着大佬教程从零再码一次（因为有了之前的基础，开发也还算挺快的）</p><p>又是三天成型，有了测试版——域名备案——解决在国内访问速度慢的原因</p><p>github+coding双部署——添加各种插件（豆瓣，天气，看板娘等）——测试访问速度</p><p>最后，开发完毕！</p><p><a href="https://yangchaoyi.vip/">嘿！ 传送门</a></p><h3 id="学习资料合集（重点在这！）"><a href="#学习资料合集（重点在这！）" class="headerlink" title="学习资料合集（重点在这！）"></a>学习资料合集（重点在这！）</h3><p><font color=red size=4>前面还是稍微扯了一点个人总结，下面我将分享，我这一周来查阅的资料。</font></p><p>当然，只分享真正能解决问题的博客，我查阅的资料很多很多，下面是一些我遇到的问题以及一些优秀的大佬整理的超详细搭建教程：</p><hr><h3 id="搭建全教程（真大佬写的，超详细）"><a href="#搭建全教程（真大佬写的，超详细）" class="headerlink" title="搭建全教程（真大佬写的，超详细）"></a>搭建全教程（真大佬写的，超详细）</h3><p><gon>洪卫大佬写的教程，我就是跟着他的教程开发的，首推！</p><p><a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020021817392216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt="洪卫大佬主页"></p><p>下面这位大佬总共写了四篇，这里我就链接了他的第一篇，剩下几篇去主页找找就好了，和上面洪卫大佬主题风格不一样，而且还专门写了一篇pwa，真是好心人！不过我更喜欢这位大佬的主题颜色，所以我结合了洪卫和sitoi大佬的博客搭建教程！</p><p><a href="https://sitoi.cn/posts/6666.html" target="_blank" rel="noopener">基于 Hexo GitHub 从零开始搭建个人博客</a></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200218173853770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt="sitoi大佬主页"><br>下面是过客~励心大佬的超详细版搭建教程，后面才发现，我很多问题是在这篇文章中解决的！关于解决github访问速度问题，部署在coding和码云上等等，总之，这位大佬干货分享满满，我看完简直要感动哭了，居然如此详细，终于解决了我的bug！！！</p><p><a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">Hexo+github搭建博客(超级详细版，精细入微)</a></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200218174037293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt="过客~励心大佬主页"></p><h3 id="关于我搭建过程问题解决"><a href="#关于我搭建过程问题解决" class="headerlink" title="关于我搭建过程问题解决"></a>关于我搭建过程问题解决</h3><p><font color=red size=4>（以下问题不分先后，能够解决你的问题那就很好了，如果不能解决你的问题，请在评论区留言，看到了立即回复您，然后更新博客）</font></p><h3 id="入门必看"><a href="#入门必看" class="headerlink" title="入门必看"></a>入门必看</h3><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104264485" target="_blank" rel="noopener">Hexo yilia主题 搭建个人主页【整合目录】</a></p><h3 id="修改主题颜色（调整自己喜欢的背景颜色）"><a href="#修改主题颜色（调整自己喜欢的背景颜色）" class="headerlink" title="修改主题颜色（调整自己喜欢的背景颜色）"></a>修改主题颜色（调整自己喜欢的背景颜色）</h3><p>在主题文件的 <code>/source/css/matery.css</code>文件中，搜索 <code>.bg-color</code>来修改背景颜色：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.bg-color &#123;</span><br><span class="line">    background-image: linear-gradient(to right, #1f4d71 0%, #71bbb6 100%);</span><br><span class="line">    opacity: <span class="number">0.9</span>;</span><br><span class="line">    <span class="comment">/* 透明度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关插件"><a href="#相关插件" class="headerlink" title="相关插件"></a>相关插件</h3><p><a href="https://www.jinrishici.com/#" target="_blank" rel="noopener">每日诗词api</a></p><p><a href="https://hitokoto.cn/" target="_blank" rel="noopener">Hitokoto（一言）api</a></p><p><a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">给hexo博客添加天气插件的网站</a></p><p><a href="https://liyangzone.com/2019/07/22/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E7%BA%A7%E5%88%86%E7%B1%BB%E7%9B%B8%E5%86%8C/" target="_blank" rel="noopener">hexo博客添加一级分类相册功能</a></p><p><a href="https://www.tidio.com/panel/bots/manage/898302" target="_blank" rel="noopener">Tidio聊天机器人插件</a></p><p><a href="https://sitoi.cn/posts/49115.html#toc-heading-1" target="_blank" rel="noopener">基于 Hexo GitHub 从零开始搭建个人博客（四）：让你的博客完美支持 PWA</a></p><p><a href="https://ciweigg2.github.io/2019/11/02/matery-zhu-ti-an-zhuang-dou-ban-cha-jian/" target="_blank" rel="noopener">Matery主题安装豆瓣插件</a></p><h3 id="优化加速"><a href="#优化加速" class="headerlink" title="优化加速"></a>优化加速</h3><p><a href="https://leaferx.online/2017/06/16/use-gulp-to-minimize/" target="_blank" rel="noopener">利用 Gulp 来压缩你的 Hexo 博客</a></p><p><a href="https://blog.sky03.cn/posts/29055.html" target="_blank" rel="noopener">国内Github访问加速</a></p><p><a href="https://blog.sky03.cn/posts/1663.html" target="_blank" rel="noopener">静态博客访问优化之终极解决方案</a></p><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-4" target="_blank" rel="noopener">Hexo进阶之各种优化</a></p><p><a href="https://blog.csdn.net/appleyuchi/article/details/92795620" target="_blank" rel="noopener">hexo使用katex引擎(markdown渲染加速)</a></p><p><a href="https://yafine-blog.cn/posts/ee35.html" target="_blank" rel="noopener">使用Jsdelivr CDN加速博客访问速度</a></p><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-18" target="_blank" rel="noopener">SEO优化</a></p><h3 id="部署相关"><a href="#部署相关" class="headerlink" title="部署相关"></a>部署相关</h3><p><a href="https://www.cnblogs.com/qiao20/p/11274726.html" target="_blank" rel="noopener">如何申请阿里云免费SSL证书（可用于https网站）并下载下来</a></p><p><a href="https://blog.csdn.net/qq_37683287/article/details/91559605" target="_blank" rel="noopener">为自定义域名的Hexo博客升级到Https网站</a></p><p><a href="http://www.isetsuna.com/hexo/deploy-qiniu/" target="_blank" rel="noopener">Hexo博客系列（六）：部署到七牛</a></p><p><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">（站长工具）ping服务器，网站测速</a></p><p><a href="https://coding.net/" target="_blank" rel="noopener">coding国内部署——传送门</a></p><p><a href="https://yafine-blog.cn/posts/51fb.html" target="_blank" rel="noopener">Hexo博客部署到码云和Coding（提高国内访问速度）</a></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><a href="https://www.logosc.cn/" target="_blank" rel="noopener">定制个人logo强大网站</a></p><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子官网（如果统计无效，多半是链接失效了，去获取最新的）</a></p><p><a href="https://yafine-blog.cn/posts/eb3a.html" target="_blank" rel="noopener">使用PicGo+Github搭建免费图床</a></p><p>最后，我们压缩完后，有些指令不能用简称了，以下是我部署时常用指令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -s</span><br><span class="line">hexo server</span><br><span class="line">gulp</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我的博客基本上算是开发完毕了，实现了代码压缩+CDN优化+国内外双部署</p><p>还未完成的部分：备份源码+SEO优化，但这些是可选项，后续再花点时间折腾一下就好了，感谢你能看到这篇文章，觉得不错的话，记得点个赞，加个关注！</p><p><font color=red size=4>（如果以上内容能够解决你的问题那就很好了，如果不能解决你的问题，请在评论区留言，看到了立即回复您，然后更新博客，欢迎您的加入！）</font></p><h2 id="第二部分-butterfly-主题搭建美化DIY教程"><a href="#第二部分-butterfly-主题搭建美化DIY教程" class="headerlink" title="第二部分 butterfly 主题搭建美化DIY教程"></a>第二部分 butterfly 主题搭建美化DIY教程</h2><h3 id="阅读须知-2"><a href="#阅读须知-2" class="headerlink" title="阅读须知"></a>阅读须知</h3><blockquote><p>在本文开头就有说明，在此再说明一下，并不是从零搭建butterfly，只提供相关美化DIY教程，主要针对新手，每一步都算比较详细，所以可能会显得比较啰嗦，所以建议基础比较好小伙伴根据目录选择自己感兴趣的部分跳着看，不要文章没看，上来先喷一下！谢谢⊙o⊙</p></blockquote><h3 id="页面底部-footer-跳动的心"><a href="#页面底部-footer-跳动的心" class="headerlink" title="页面底部 footer 跳动的心"></a>页面底部 footer 跳动的心</h3><h4 id="Butterfly-主题"><a href="#Butterfly-主题" class="headerlink" title="Butterfly 主题"></a>Butterfly 主题</h4><p>编辑博客根目录 <code>/themes/Butterfly/layout/includes/footer.pug</code>文件，</p><p>第一步，将以下内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;copy;$&#123;theme.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;copy;$&#123;theme.since&#125; - $&#123;nowYear + <span class="string">' '</span>&#125; &lt;i id=<span class="string">"heartbeat"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fas fa-heartbeat"</span>&gt;&lt;<span class="regexp">/i&gt; $&#123;config.author&#125;</span></span><br></pre></td></tr></table></figure><p>第二步，将以下内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;copy;$&#123;nowYear + <span class="string">' '</span>&#125; &lt;i id=<span class="string">"heartbeat"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fas fa-heartbeat"</span>&gt;&lt;<span class="regexp">/i&gt; $&#123;config.author&#125;</span></span><br></pre></td></tr></table></figure><p>将以下内容添加到 <code>&lt;head&gt;&lt;/head&gt;</code> 标签内：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/gh/HCLonely/images@master/others/heartbeat.min.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>具体放置位置，可以参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200420132925497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>这样，就有一颗跳动的心 <font color=red>❤</font>啦 ✿✿ヽ(°▽°)ノ✿<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200420132948247.png"  alt=""></p><h4 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h4><p>将<code>&lt;i id=&quot;heartbeat&quot; class=&quot;fa fas fa-heartbeat&quot;&gt;&lt;/i&gt;</code>添加到需要显示的位置</p><p>同上第 2 步</p><h3 id="添加访客地图"><a href="#添加访客地图" class="headerlink" title="添加访客地图"></a>添加访客地图</h3><p>前往 <a href="https://clustrmaps.com/" target="_blank" rel="noopener">clustrmaps</a> 网站注册一个帐号</p><p>找到 <code>Free Tools</code>下面的 <code>Website Widget</code>, 点击 <code>Get Map Widget</code></p><p>输入你的博客网址，点击<code>Next</code></p><p>根据你自己的喜好选择样式<code>Map widget</code>或 <code>Globe Widget</code>（本人使用后者）</p><p>找到如下代码，记住 <code>src (****** 的部分)</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> id=<span class="string">"clstr_globe"</span> src=<span class="string">"**********************"</span>&gt;</span><br></pre></td></tr></table></figure><p>在 <code>themes\Butterfly\layout\includes\widget</code>文件夹新建<code>card_map.pug</code>文件，文件内容如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">.card-widget.card-map</span><br><span class="line">  .card-content</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fa.fa-globe-asia(aria-hidden=<span class="string">"true"</span>)</span><br><span class="line">      span= _p(<span class="string">'aside.card_map'</span>)</span><br><span class="line">    script#clstr_globe(type="text/javascript" defer="defer" src="此处填入你自己的代码")</span><br></pre></td></tr></table></figure><p>编辑 <code>themes\Butterfly\layout\includes\widget\index.pug</code>文件，在你想要显示的位置插入以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.aside.card_map</span><br><span class="line">        !=partial(<span class="string">'includes/widget/card_map'</span>, &#123;&#125;, &#123;<span class="attr">cache</span>:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>具体放置位置，可以参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419190844832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>编辑 <code>butterfly.yml</code> 文件，在 <code>card_webinfo</code> 下面添加一行<code>card_map: true</code></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419191112811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>如果没有图标的话，就将 <code>fontawesome  v5</code>版本开启</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># fontawesome圖標</span><br><span class="line"># 默認使用的是 fontawesome v4版本的圖標</span><br><span class="line">fontawesome_v5:</span><br><span class="line">  enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>编辑 <code>themes\Butterfly\languages\zh-CN.yml</code>文件 (请根据你的网站语言选择)，找到 <strong>card_announcement: 公告</strong> , 在下面添加一行 <strong>card_map: 访客地图</strong> (后面的文本可自定义)</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419191159352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>如果不想显示，直接把 <code>butterfly.yml</code>文件的<code>card_map: true</code> 改为 <code>card_map: false</code> 即可</p><h3 id="添加Pixiv-日榜"><a href="#添加Pixiv-日榜" class="headerlink" title="添加Pixiv 日榜"></a>添加Pixiv 日榜</h3><p>在 <code>themes\Butterfly\layout\includes\widget</code>文件夹新建 <code>card_pixiv.pug</code>文件，文件内容如下：</p><p>注意：最后三行要保持空格间距一样（直接复制下面代码即可）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.card-widget.card-pixiv</span><br><span class="line"> .card-content</span><br><span class="line">  .item-headline</span><br><span class="line">    i.fa.fa-image(aria-hidden=<span class="string">"true"</span>)</span><br><span class="line">    span= _p(<span class="string">'aside.card_pixiv'</span>)</span><br><span class="line">    iframe(src=<span class="string">"https://cloud.mokeyjay.com/pixiv"</span> frameborder=<span class="string">"0"</span>  style=<span class="string">"width:99%;height:380px;margin:0;"</span>)</span><br></pre></td></tr></table></figure><p><a href="https://cloud.mokeyjay.com/pixiv" target="_blank" rel="noopener">https://cloud.mokeyjay.com/pixiv</a> 使用的是<a href="https://www.mokeyjay.com/" target="_blank" rel="noopener">超能小紫</a>提供的服务，也可以自行搭建，搭建方式请看<a href="https://www.mokeyjay.com/archives/1063" target="_blank" rel="noopener">这里</a></p><p>编辑 <code>themes\Butterfly\layout\includes\widget\index.pug</code> 文件，在你想要显示的位置插入以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.aside.card_pixiv</span><br><span class="line">        !=partial(<span class="string">'includes/widget/card_pixiv'</span>, &#123;&#125;, &#123;<span class="attr">cache</span>:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>具体放置位置，参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419183941492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>编辑 <code>butterfly.yml</code>文件，在 <code>card_webinfo</code> 下面添加一行 <code>card_pixiv: true</code></p><p>可以通过搜索关键词 <code>aside</code>，找到对应位置添加<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419184046471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>编辑 <code>themes\Butterfly\languages\zh-CN.yml</code>文件 (请根据你的网站语言选择)，找到 <strong>card_announcement: 公告</strong> , 在下面添加一行 <strong>card_pixiv: Pixiv日榜Top50</strong>(后面的文本可自定义)</p><p>如果不想显示，直接把 <code>butterfly.yml</code>文件的 <code>card_pixiv: true</code>改为 <code>card_pixiv: false</code>即可</p><h3 id="添加日历"><a href="#添加日历" class="headerlink" title="添加日历"></a>添加日历</h3><p>安装 <code>hexo-generator-calendar</code> 插件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save git:<span class="comment">//github.com/howiefh/hexo-generator-calendar.git</span></span><br></pre></td></tr></table></figure><p>下载 <code>calendar.js</code>和 <code>languages.js</code> 文件，保存到 <code>themes\Butterfly\source\js</code> 目录</p><ul><li><a href="https://github.com/pengloo53/Hexo-theme-light_cn/blob/master/source/js/calendar.js" target="_blank" rel="noopener">calendar.js</a> 下载地址</li><li><a href="https://github.com/pengloo53/Hexo-theme-light_cn/blob/master/source/js/languages.js" target="_blank" rel="noopener">languages.js</a> 下载地址</li></ul><p>编辑<code>calendar.js</code> 文件，在文件最后<code>}(jQuery));</code>之前添加:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#calendar'</span>).aCalendar(<span class="string">'zh-CN'</span>);<span class="comment">//'zh-CN'请根据自己博客的语言选择</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体位置参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419193746630.png"  alt=""></p><p>编辑 <code>butterfly.yml</code> 文件，以下两个你 <code>butterfly.yml</code>文件里有哪个就用那个，不要都用！选择一个即可</p><ul><li>在 <code>CDN_USE-&gt;js</code> 下面添加如下内容（本人采用这种方式）：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- <span class="regexp">/js/</span>calendar.js</span><br><span class="line">- <span class="regexp">/js/</span>languages.js</span><br></pre></td></tr></table></figure><p>具体位置参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419193929972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><ul><li>在 <code>inject-&gt;bottom</code>下面添加如下内容（如果用了上述方法就不要用了）：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/calendar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/languages.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>新建 <code>calendar.styl</code>文件，保存到 <code>themes\Butterfly\source\css\_layout</code> 目录下</p><p><a href="https://raw.githubusercontent.com/pengloo53/Hexo-theme-light_cn/master/source/css/_partial/calendar.styl" target="_blank" rel="noopener">源文件传送门</a></p><p>原下载处使用会有bug，你可以直接复制如下我改好的代码即可</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#calendar</span><br><span class="line">  a</span><br><span class="line">    text-decoration none</span><br><span class="line"></span><br><span class="line">.cal-head</span><br><span class="line">  margin-bottom: <span class="number">15</span>px</span><br><span class="line">  position relative</span><br><span class="line">  height <span class="number">20</span>px</span><br><span class="line">  padding <span class="number">8</span>px <span class="number">6</span>px <span class="number">2</span>px <span class="number">6</span>px</span><br><span class="line"></span><br><span class="line">.cal-prev,.cal-next</span><br><span class="line">  position absolute</span><br><span class="line">  top <span class="number">9</span>px</span><br><span class="line">  width <span class="number">16</span>px</span><br><span class="line">  height <span class="number">18</span>px</span><br><span class="line">  padding <span class="number">3</span>px <span class="number">4</span>px</span><br><span class="line">  border <span class="number">1</span>px solid transparent</span><br><span class="line">  color #333</span><br><span class="line">  outline <span class="number">0</span></span><br><span class="line"></span><br><span class="line">.cal-prev</span><br><span class="line">  left <span class="number">8</span>px</span><br><span class="line">  &amp;:before</span><br><span class="line">    border-right 9px solid #333</span><br><span class="line"></span><br><span class="line">.cal-next</span><br><span class="line">  right <span class="number">8</span>px</span><br><span class="line">  &amp;:before</span><br><span class="line">    border-left 9px solid #333</span><br><span class="line"></span><br><span class="line">.cal-prev:before,.cal-next:before</span><br><span class="line">  content <span class="string">''</span></span><br><span class="line">  display block</span><br><span class="line">  width <span class="number">0</span></span><br><span class="line">  height <span class="number">0</span></span><br><span class="line">  border-top <span class="number">5</span>px solid transparent</span><br><span class="line">  border-bottom <span class="number">5</span>px solid transparent</span><br><span class="line"></span><br><span class="line">.cal-title</span><br><span class="line">  width <span class="number">120</span>px</span><br><span class="line">  margin <span class="number">0</span> auto</span><br><span class="line">  color #333</span><br><span class="line">  font bold <span class="number">14</span>px/<span class="number">18</span>px Arial</span><br><span class="line">  text-align center</span><br><span class="line">  a</span><br><span class="line">    border <span class="number">1</span>px solid transparent</span><br><span class="line">    color #9f9f9f</span><br><span class="line"></span><br><span class="line">.cal,</span><br><span class="line">.cal th,</span><br><span class="line">.cal td</span><br><span class="line">  border 1px solid #d1d1d1</span><br><span class="line"></span><br><span class="line">.cal</span><br><span class="line">  display: table</span><br><span class="line">  border-collapse separate</span><br><span class="line">  border-spacing <span class="number">0</span></span><br><span class="line">  border-width <span class="number">1</span>px <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>px</span><br><span class="line">  table-layout fixed</span><br><span class="line">  width <span class="number">100</span>%</span><br><span class="line">  margin <span class="number">0</span></span><br><span class="line">  th</span><br><span class="line">    background #9f9f9f</span><br><span class="line">    color #fff</span><br><span class="line">    border-width <span class="number">0</span> <span class="number">1</span>px <span class="number">1</span>px <span class="number">0</span></span><br><span class="line">    font-weight <span class="number">700</span></span><br><span class="line">  td</span><br><span class="line">    border-width <span class="number">0</span> <span class="number">1</span>px <span class="number">1</span>px <span class="number">0</span></span><br><span class="line">  tbody</span><br><span class="line">    a</span><br><span class="line">      background-color #007acc</span><br><span class="line">      color #fff</span><br><span class="line">      display block</span><br><span class="line">      font-weight <span class="number">700</span></span><br><span class="line">    .cal-today</span><br><span class="line">      background-color #66ecfd</span><br><span class="line">      color #fff</span><br><span class="line">  .cal-gray</span><br><span class="line">    color #bbb8b8</span><br><span class="line"></span><br><span class="line">[data-theme=<span class="string">'dark'</span>] .cal .cal-gray</span><br><span class="line">  color #505050</span><br><span class="line"></span><br><span class="line">.cal th,</span><br><span class="line">.cal td</span><br><span class="line">  font-weight normal</span><br><span class="line">  line-height <span class="number">2.5625</span></span><br><span class="line">  padding <span class="number">0</span></span><br><span class="line">  text-align center</span><br><span class="line"></span><br><span class="line">[data-theme=<span class="string">'dark'</span>] .cal .cal-foot</span><br><span class="line">  color #9f9f9f</span><br><span class="line"></span><br><span class="line">.cal .cal-foot</span><br><span class="line">  color #2ca6cb</span><br><span class="line"></span><br><span class="line">.cal-title a:hover,</span><br><span class="line">.cal-prev:hover,</span><br><span class="line">.cal-next:hover,</span><br><span class="line">.cal .cal-foot:hover,</span><br><span class="line">.cal .cal-foot:focus,</span><br><span class="line">.cal tbody a:hover,</span><br><span class="line">.cal tbody a:focus</span><br><span class="line">  background-color #686868</span><br><span class="line">  color #fff</span><br><span class="line">  cursor pointer</span><br></pre></td></tr></table></figure><p>在<code>themes\Butterfly\layout\includes\widget</code> 文件夹新建<code>card_calendar.pug</code> 文件，文件内容如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">.card-widget.card-calendar</span><br><span class="line">  .card-content</span><br><span class="line">    .item-headline</span><br><span class="line">      i.far.fa-calendar-alt(aria-hidden=<span class="string">"true"</span>)</span><br><span class="line">      span= _p(<span class="string">'aside.card_calendar'</span>)</span><br><span class="line">    div.widget-wrap</span><br><span class="line">    div#calendar.widget</span><br></pre></td></tr></table></figure><p>编辑<code>themes\Butterfly\layout\includes\widget\index.pug</code> 文件，在你想要显示的位置插入以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.aside.card_calendar</span><br><span class="line">        !=partial(<span class="string">'includes/widget/card_calendar'</span>, &#123;&#125;, &#123;<span class="attr">cache</span>:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>具体位置参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419194253473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>编辑 <code>butterfly.yml</code>文件，在 <code>card_webinfo</code>下面添加一行<code>card_calendar: true</code></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020041919435677.png"  alt=""></p><p>编辑<code>themes\Butterfly\languages\zh-CN.yml</code>文件 (请根据你的网站语言选择)，找到 <strong>card_announcement: 公告</strong> , 在下面添加一行 <strong>card_calendar: 日历</strong> (后面的文本可自定义)</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200419194436425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>如果不想显示，直接把 <code>butterfly.yml</code>文件的<code>card_calendar: true</code>改为<code>card_calendar: false</code> 即可</p><h3 id="添加哔哩哔哩番剧页面插件"><a href="#添加哔哩哔哩番剧页面插件" class="headerlink" title="添加哔哩哔哩番剧页面插件"></a>添加哔哩哔哩番剧页面插件</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-bilibili-bangumi --update --save</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>将下面的配置写入站点的配置文件<code>_config.yml</code>里 (不是主题的配置文件)。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bangumi:</span><br><span class="line">  enable: <span class="literal">true</span> </span><br><span class="line">  vmid: </span><br><span class="line">  title: <span class="string">'追番列表'</span></span><br><span class="line">  quote: <span class="string">'生命不息，追番不止！'</span></span><br><span class="line">  show: <span class="number">1</span></span><br><span class="line">  loading: <span class="string">'/img/bangumi-loading.gif'</span></span><br></pre></td></tr></table></figure><p><strong>配置介绍</strong></p><ul><li>enable: 是否启用</li><li>vmid: 哔哩哔哩番剧页面的 vmid(uid), 如何获取？</li><li>title: 该页面的标题</li><li>quote: 写在页面开头的一段话，支持 html 语法</li><li>show: 初始显示页面：0: 想看 , 1: 在看 , 2: 看过，默认为 1</li><li>loading: 图片加载完成前的 loading 图片</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>前往你的 Hexo 博客的根目录</p><p>输入如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page bangumis</span><br></pre></td></tr></table></figure><p>找到<code>source/bangumis/index.md</code>这个文件</p><p>修改这个文件，添加 <code>type: &quot;bangumis&quot;</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: bangumis</span><br><span class="line">date: <span class="number">2018</span><span class="number">-01</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">type: <span class="string">"bangumis"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>防止请求次数过多插件不再自动获取番剧数据，所以请根据自己的需要在 <code>hexo generate 或 hexo deploy</code> 之前使用<code>hexo bangumi -u</code> 命令更新番剧数据！</p><p>删除数据命令:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo bangumi -d</span><br></pre></td></tr></table></figure><h4 id="获取-uid"><a href="#获取-uid" class="headerlink" title="获取 uid"></a>获取 uid</h4><p>登录哔哩哔哩后前往 <a href=" https://space.bilibili.com/">https://space.bilibili.com/</a> 页面，网址最后的一串数字就是 uid</p><p><strong>效果展示</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020042013115126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="添加卡通人物（看板娘）"><a href="#添加卡通人物（看板娘）" class="headerlink" title="添加卡通人物（看板娘）"></a>添加卡通人物（看板娘）</h3><p>输入如下命令获取 live2d：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>输入以下命令，下载相应的模型，将 <code>haruto</code> 更换成你想要的模型名称即可（本人就选haruto），更多模型选择请<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">点击此处</a>，各个模型的预览请<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">访问原作者的博客</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-haruto</span><br></pre></td></tr></table></figure><p>打开站点目录下的 <code>_config.yml</code>文件，添加如下代码：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">enable: <span class="literal">true</span></span><br><span class="line">scriptFrom: local</span><br><span class="line">model: </span><br><span class="line">use: live2d-widget-model-haruto #模型选择</span><br><span class="line">display: </span><br><span class="line">position: right  #模型位置</span><br><span class="line">width: 150       #模型宽度</span><br><span class="line">height: 300      #模型高度</span><br><span class="line">mobile: </span><br><span class="line">show: false      #是否在手机端显示</span><br></pre></td></tr></table></figure><p>执行 <code>hexo g</code> &amp; <code>hexo s</code>，查看页面，发现就会多一个卡通人物啦 ✿✿ヽ(°▽°)ノ✿</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200420075033482.png"  alt=""></p><p>参考：</p><p><a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">Hexo 博客优化之博客美化系列（持续更新）</a></p><h3 id="地址栏添加-abbrlink"><a href="#地址栏添加-abbrlink" class="headerlink" title="地址栏添加 abbrlink"></a>地址栏添加 abbrlink</h3><p><strong>背景：</strong></p><p>不想要2020/xx/xx/xxx/xx这样比较长的说明，想要简短一点的。</p><p><strong>解决：</strong></p><p>安装 <code>hexo-abbrlink</code> 插件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink</span><br></pre></td></tr></table></figure><p>编辑 站点的 <code>_config.yml</code>文件，找到 <code>permalink</code> , 改成 <strong>permalink: posts/:abbrlink/</strong></p><p>具体位置，可以参考下图：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200420073332447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>最后，在你写的文章 front部分，添加自定义 <code>abbrlink</code> 即可。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200420073353594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>地址栏变化，成功 ✿✿ヽ(°▽°)ノ✿<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200420073441986.png"  alt=""></p><h3 id="Gallery-相册图库"><a href="#Gallery-相册图库" class="headerlink" title="Gallery 相册图库"></a>Gallery 相册图库</h3><p>一个图库集合。</p><p>写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"gallery-group-main"</span>&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"gallery-group-main"</span>&gt;</span><br><span class="line">&#123;% galleryGroup <span class="string">'壁纸'</span> <span class="string">'收藏的一些壁纸'</span> <span class="string">'/Gallery/wallpaper'</span> https:<span class="comment">//i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span></span><br><span class="line">&#123;% galleryGroup <span class="string">'漫威'</span> <span class="string">'关于漫威的图片'</span> <span class="string">'/Gallery/marvel'</span> https:<span class="comment">//i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span></span><br><span class="line">&#123;% galleryGroup <span class="string">'OH MY GIRL'</span> <span class="string">'关于OH MY GIRL的图片'</span> <span class="string">'/Gallery/ohmygirl'</span> https:<span class="comment">//i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p> class="lazyload" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20191226003414.png" <img src="/"></img></p><h3 id="豆瓣插件（movie、book、game）"><a href="#豆瓣插件（movie、book、game）" class="headerlink" title="豆瓣插件（movie、book、game）"></a>豆瓣插件（movie、book、game）</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><p>在最外层站点 <code>_config.yml</code> （⚠️ 注意：不是主题的配置文件）添加如下内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 豆瓣</span><br><span class="line">douban:</span><br><span class="line">  user: <span class="number">211251422</span></span><br><span class="line">  builtin: <span class="literal">true</span></span><br><span class="line">  book:</span><br><span class="line">    title: <span class="string">'好书推荐'</span></span><br><span class="line">    quote: <span class="string">'读书好，好读书，读好书'</span></span><br><span class="line">  movie:</span><br><span class="line">    title: <span class="string">'电影'</span></span><br><span class="line">    quote: <span class="string">'那些在电影院看过的电影'</span></span><br><span class="line">  timeout: <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>user: 你的豆瓣ID。打开豆瓣，登入账户，然后在右上角点击 ”个人主页“，这时候地址栏的URL大概是这样：<a href="https://www.douban.com/people/xxxxxx/" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li>builtin: 是否将生成页面的功能嵌入 hexo s 和 hexo g 中，默认是 false ，另一可选项为 true 。</li><li>title: 该页面的标题。</li><li>quote: 写在页面开头的一段话,支持html语法。</li><li>timeout: 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。<br>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可</li></ul><h4 id="配置-config-文件"><a href="#配置-config-文件" class="headerlink" title="配置 config 文件"></a>配置 config 文件</h4><p>在你的主题的 <code>butterfly.yml</code> 文件中配置以下内容，如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 如果你有使用hexo-douban，可配置這個</span><br><span class="line">douban:</span><br><span class="line">   meta: <span class="literal">true</span></span><br><span class="line">   movies_img: https:<span class="comment">//cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/movie.jpg</span></span><br><span class="line">   books_img: https:<span class="comment">//cdn.jsdelivr.net/npm/blog-gallery@1.0.0/1/20200206161657.webp</span></span><br><span class="line">#   games_img:</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>前往你的 Hexo 博客的根目录</p><p>输入如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page books</span><br></pre></td></tr></table></figure><p>找到<code>source/books/index.md</code>这个文件</p><p>修改这个文件，添加 <code>type: &quot;books&quot;</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 书单</span><br><span class="line">date: <span class="number">2020</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">56</span></span><br><span class="line">type: <span class="string">"books"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>同理，对于电影页面</p><p>前往你的 Hexo 博客的根目录</p><p>输入如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page movies</span><br></pre></td></tr></table></figure><p>找到<code>source/movies/index.md</code>这个文件</p><p>修改这个文件，添加 <code>type: &quot;movies&quot;</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 电影</span><br><span class="line">date: <span class="number">2020</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">56</span></span><br><span class="line">type: <span class="string">"movies"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="友链界面加入自定义文字"><a href="#友链界面加入自定义文字" class="headerlink" title="友链界面加入自定义文字"></a>友链界面加入自定义文字</h3><p>具体效果如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424114754770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>第一步，在<code>themes/Butterfly/layout/flink.pug</code> 文件内加入如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p(style=<span class="string">"font-size:14px;font-weight:bold"</span>)= theme.PS</span><br><span class="line">hr</span><br><span class="line">h2= theme.require_headline</span><br><span class="line">ul</span><br><span class="line">  li= theme.requirement1</span><br><span class="line">  li= theme.requirement2</span><br><span class="line">  li= theme.requirement3</span><br><span class="line">  li= theme.requirement4</span><br><span class="line">  li= theme.requirement5</span><br><span class="line">  li= theme.requirement6</span><br><span class="line">hr</span><br><span class="line">h2= theme.myInfo</span><br><span class="line">ul</span><br><span class="line">  li= theme.info1</span><br><span class="line">  li= theme.info2</span><br><span class="line">  li= theme.info3</span><br><span class="line">  li= theme.info4</span><br></pre></td></tr></table></figure><p>具体位置请参考下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424124244315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>第二步，在<code>source/_data/butterfly.yml</code> 内加入如下代码（位置随意）：</p><blockquote><p>这里提供我的模板，当然你需要修改成为你自己的风格。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 友链界面美化</span><br><span class="line">PS: PS：欢迎交换友链，以下是相关注意事项。</span><br><span class="line">require_headline: A Few Requirements</span><br><span class="line">requirement1: 本站不参与商业性网站、下载站、视频站等</span><br><span class="line">requirement2: HTTP和HTTPS均可，不强制性要求小绿锁，但是只有一个IP或者带端口的不接受哦</span><br><span class="line">requirement3: 网站要有维护，定期或不定期均可，线下朋友请忽略这一条</span><br><span class="line">requirement4: 申请友链在评论区留言即可，但需先添加本站友链（申请格式如下文所述）</span><br><span class="line">requirement5: 有一定数量的原创文章，建站一周以上（大佬可以无视以上要求）</span><br><span class="line">requirement6: 如果你想联系我，在About页面中有我的相关联系方式</span><br><span class="line">myInfo: My Blog Info</span><br><span class="line">info1: <span class="string">'name: 超逸の技术博客'</span></span><br><span class="line">info2: <span class="string">'link: https://yangchaoyi.vip/'</span></span><br><span class="line">info3: <span class="string">'avatar: https://cdn.jsdelivr.net/gh/Chocolate1999/cdn/img/avatar.png'</span></span><br><span class="line">info4: <span class="string">'descr: 不是只会写业务代码の前端攻城狮'</span></span><br></pre></td></tr></table></figure><h3 id="友链链接区块加入一行小字"><a href="#友链链接区块加入一行小字" class="headerlink" title="友链链接区块加入一行小字"></a>友链链接区块加入一行小字</h3><p>具体效果图如下所示：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424124816463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>第一步，在<code>themes/Butterfly/layout/flink.pug</code> 文件内加入如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">h4= i.cdescr</span><br></pre></td></tr></table></figure><p>具体位置，请参考如下：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424124920612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>第二步，此后我们在<code>source/_data/link.yml</code> 中就可以多加一栏变量了，例如：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424124947577.png"  alt=""></p><h3 id="跳过-hexo-的渲染"><a href="#跳过-hexo-的渲染" class="headerlink" title="跳过 hexo 的渲染"></a>跳过 hexo 的渲染</h3><p>或许你会问这个到底有啥用呢？来两张图你就知道了：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424150921963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424151000759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><a href="https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">Xuexi’s Blog：【参考】Hexo大结局</a></p><p>参考了如上博客后，我就增加了这两个界面，因为我们部署到 <code>github pages</code> 其实就是静态页面，你明白了hexo渲染机制后，你可以做的界面就会更多了，比如有些大佬博客会加入一些游戏，例如<code>2048</code>，<code>3D魔方</code>等等，这些我后续考虑再加进去。</p><p>你所需要的就是找到开源的静态页面，添加进去，然后跳过<code>hexo</code>渲染即可。</p><h3 id="友链样式美化"><a href="#友链样式美化" class="headerlink" title="友链样式美化"></a>友链样式美化</h3><p>本次更新新增呼吸灯效果，<code>github</code>源码仓库已同步更新。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200426160609547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>实现效果步骤如下：</p><p>将<code>themes/Butterfly/layout/flink.pug</code> 原本的文件内容删去，直接负责替换如下内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#page</span><br><span class="line">  .flink#article-container</span><br><span class="line">    each i <span class="keyword">in</span> site.data.link</span><br><span class="line">      h2= i.class_name</span><br><span class="line">      .post-cards</span><br><span class="line">        .md-links</span><br><span class="line">          each item <span class="keyword">in</span> i.link_list</span><br><span class="line">            .md-links-item(style= item.color ? <span class="string">`--primary-color:<span class="subst">$&#123;item.color&#125;</span>;border-width:<span class="subst">$&#123;item.width&#125;</span>;border-style:<span class="subst">$&#123;item.style&#125;</span>;animation: <span class="subst">$&#123;item.custom&#125;</span> <span class="subst">$&#123;item.time&#125;</span> infinite alternate; background:<span class="subst">$&#123;item.background&#125;</span>`</span> : <span class="string">'border-width:0px;border-style:solid;animation: link_custom 0s infinite alternate;background:0'</span>)</span><br><span class="line">              a.customcolor(href=item.link  title=item.name target=<span class="string">"_blank"</span> rel=item.remove ? <span class="string">"external nofollow"</span> : <span class="string">""</span> style=item.namecolor ? <span class="string">`--namecolor:<span class="subst">$&#123;item.namecolor&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                  img.lazyload(data-src=item.avatar onerror=<span class="string">`this.onerror=null;this.src='`</span> + url_for(theme.lodding_bg.flink) + <span class="string">`'`</span> alt=item.name,style=item.rotate ? <span class="string">`--primary-rotate:<span class="subst">$&#123;item.rotate&#125;</span>;--autotime:<span class="subst">$&#123;item.autotime&#125;</span>;`</span> : <span class="string">'--primary-rotate:0deg'</span> <span class="class"><span class="keyword">class</span></span>=item.autorotate ? <span class="string">`<span class="subst">$&#123;item.autorotate&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                  img(src=item.avatar onerror=<span class="string">`this.onerror=null;this.src='`</span> + url_for(theme.lodding_bg.flink) + <span class="string">`'`</span> alt=item.name )</span><br><span class="line">                .md-links-title= item.name </span><br><span class="line">                .md-links-des= item.descr</span><br><span class="line">    != page.content</span><br><span class="line">  <span class="keyword">if</span> page.comments !== <span class="literal">false</span></span><br><span class="line">    include includes/comments/index.pug</span><br></pre></td></tr></table></figure><p>在主题配置文件 <code>source/_data/butterfly.yml</code> 添加如下样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/flink.min.css</span></span><br></pre></td></tr></table></figure><p>具体位置，你可以搜索用<code>ctrl+f</code>键搜索<code>css</code>，添加进去。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200426160933761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>当然，如果你是<code>clone</code> 的 <code>dev</code> 分支，最新版本的话，可以这样引入 <code>css</code>：</p><p>具体位置，你可以搜索用<code>ctrl+f</code>键搜索<code>inject</code>，可以直接覆盖你之前的代码或者添加进去都可以。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># inject</span><br><span class="line"># 插入代码到头部&lt;/head&gt;之前 和 尾部&lt;/body&gt;之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  # - &lt;link rel="stylesheet" href="xxxxx"&gt;</span><br><span class="line">    - <span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/flink.min.css"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>各种参数说明（可自行搭配）如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 边框大小 默认为0 </span><br><span class="line">width: <span class="number">0</span>px</span><br><span class="line"># 边框样式 默认 solid</span><br><span class="line">style: solid</span><br><span class="line"># 边框颜色 默认淡蓝色 #49b1f5</span><br><span class="line">color: <span class="string">"#0078e7"</span></span><br><span class="line"># 自动旋转 可选值 flash（闪现） link_custom（单色呼吸灯） link_custom1（彩色呼吸灯）</span><br><span class="line">custom: link_custom1</span><br><span class="line"># 动画时长设定，默认为0</span><br><span class="line">time: <span class="number">4</span>s</span><br><span class="line"># name的颜色</span><br><span class="line">namecolor: <span class="string">"#ff9191"</span></span><br><span class="line"># descr的颜色</span><br><span class="line">descolor: <span class="string">"#ff9191"</span></span><br><span class="line"># 背景颜色</span><br><span class="line">background: <span class="number">0</span></span><br><span class="line"># 鼠标悬停旋转角度</span><br><span class="line">rotate: <span class="number">360</span>deg</span><br><span class="line"># 自动旋转 latuo左旋转 rauto右旋转</span><br><span class="line">autorotate: <span class="string">"lauto"</span></span><br><span class="line"># 旋转的周期（时长）</span><br><span class="line">autotime: <span class="number">2</span>s</span><br><span class="line">#移除此链接的权重 0为否 非0为移除</span><br><span class="line">remove: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.antmoe.com/posts/1dc865d0/index.html" target="_blank" rel="noopener">小康博客：Hexo关于Butterfly的一些小修改</a></p><h3 id="后续内容"><a href="#后续内容" class="headerlink" title="后续内容"></a>后续内容</h3><p><strong>须知：</strong> 由于<code>CSDN</code> 对于长文章更新会有人工审核，因此不断更新迭代的话可能会有些许麻烦，有时可能文章会失效，所以目前你所看到的内容其实不是最新版本的，所有后续更新内容都会持续更新在本站内，<a href="https://yangchaoyi.vip/">https://yangchaoyi.vip</a></p><h2 id="第三部分-分享本站所用的学习资料以及本篇文章所参考的文章"><a href="#第三部分-分享本站所用的学习资料以及本篇文章所参考的文章" class="headerlink" title="第三部分 分享本站所用的学习资料以及本篇文章所参考的文章"></a>第三部分 分享本站所用的学习资料以及本篇文章所参考的文章</h2><h3 id="阅读须知-3"><a href="#阅读须知-3" class="headerlink" title="阅读须知"></a>阅读须知</h3><blockquote><p>本篇内容以及本站博客搭建都是参考了许许多多的文章，因此可能有些内容遗漏掉您的文章注明出处，您可以在本篇内容底部评论留言，收到消息，我会立即更新文章出处，为您带来打扰实在不好意思。</p></blockquote><h3 id="butterfly主题添加功能"><a href="#butterfly主题添加功能" class="headerlink" title="butterfly主题添加功能"></a>butterfly主题添加功能</h3><p><a href="https://bili33.top/2020/03/19/butterfly-customize/#%E5%8F%8B%E9%93%BE%E7%95%8C%E9%9D%A2%E5%8A%A0%E5%85%A5%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E5%AD%97" target="_blank" rel="noopener">GamerNoTitle：【参考】友链界面加入更多的自定义文字</a></p><p><a href="https://zkpeace.com/2020/02/17/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%89%B9%E6%80%A7%E8%AE%B0%E5%BD%95/#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A8%E9%80%81" target="_blank" rel="noopener">Kp Zhang：为本博客添加新特性记录</a></p><p><a href=""></a></p><h3 id="dalao文档"><a href="#dalao文档" class="headerlink" title="dalao文档"></a>dalao文档</h3><p><a href="https://jerryc.me/categories/Butterfly%E6%96%87%E6%AA%94/" target="_blank" rel="noopener">JerryC：Butterfly作者文档</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-4" target="_blank" rel="noopener">洪卫の博客：Hexo+Github博客搭建完全教程</a></p><p><a href="https://blog.hclonely.com/posts/57bd67ce/" target="_blank" rel="noopener">HCLonely Blog：Hexo博客DIY</a></p><h3 id="配置Valine-Admin-邮件回复提醒"><a href="#配置Valine-Admin-邮件回复提醒" class="headerlink" title="配置Valine Admin 邮件回复提醒"></a>配置Valine Admin 邮件回复提醒</h3><p><a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">赵俊的博客：【参考】Hexo 优化 — Valine 扩展之邮件通知</a></p><p><a href="https://xiabor.com/2019/12/28/valine-admin/#valine%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92" target="_blank" rel="noopener">Xuexi’s Blog：【参考】配置Valine Admin 邮件回复提醒</a></p><h2 id="第四部分-彩蛋"><a href="#第四部分-彩蛋" class="headerlink" title="第四部分 彩蛋"></a>第四部分 彩蛋</h2><p>biubiubiu~ 让我猜猜你是不是看了前文说是有彩蛋，直接跳到这里来看了，如果被我猜中的话，请评论如下内容：<code>我上当了！</code></p><p>哈哈哈，好了，整点正常点的，正如上文所说，一时间也想不到好的标题，就整个有吸引力的hhh</p><p><strong>关于本站</strong></p><p>本站源代码开放，同时也欢迎小伙伴们交换友链，具体说明可在 <a href="https://yangchaoyi.vip/link/">友链页</a> 查看。</p><p>上文说了很多，都是关于如何搭建博客，怎样美化，但是一点也没介绍我的<code>博客文化</code>，现在就简单介绍一下吧：</p><p>首先，我的博客建立之初心还是以学习目的的，并且是与下面 <code>笔记仓库</code> 和我的 <code>CSDN内容</code> 进行绑定的，后续我都会将优质内容码上去。</p><p><a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">传送门：小狮子前端の学习笔记</a><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200424154115206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>截止到20年4月24日，已经有了18个star（不包括自己hh），里面多是前端学习整理的笔记，也是选择开源，<strong>因为知识与技术是开源的，但是学习与消化知识是靠的自己。</strong></p><p>我相信，我的这个笔记仓库定会影响一部分人，能让一部分前端甚至普通程序员受益颇多，学习是一辈子都要坚持的事情。坚持下来的人一定很酷~</p><p>看到这里的你，应该是比较优秀的了，因为本文多多少少还是些许啰嗦了点，毕竟要写一篇搭建文档嘛，<strong>一个项目的好不好，很大部分就取决你的文档写的够不够优秀。</strong> 因为项目出了bug，好的文档能够让你事半功倍，而且一份详细的文档，对于二次开发与优化也是极有帮助的！</p><p>另外，博主建了一个关于算法的群：<font color=chocolate>ACM/LeetCode/Codeforces 群号：1044593736</font></p><p><strong>To acmer:</strong></p><p>欢迎各位acmer入群，在这里你可以讨论算法，约cf，讨论面试题，或者你也可以分享转发优质内容，但与学习无关的请勿打扰。群文件已上传部分学习资料，后续会一直补充。加油，少年！</p><p>继续补充：从一开始本群只有10人不到，到现在快突破100人了。从群里没有人冒泡，到现在开始讨论cf、leetcode、代码等，也算是看到了成长吧，我觉得是一件比较有成就感的事情！很多入群的伙伴，或许是看了我之前写的关于ACM江湖的文章，亦或是成为CSDN博客专家之路的文章。不管如何，你依旧是曾经那个追风的少年，加油！</p><p>最后，来几一句觉得不错的名言吧：</p><p><font color=chocolate>算法改变世界，算法创造未来！</font></p><h2 id="第五部分-总结"><a href="#第五部分-总结" class="headerlink" title="第五部分 总结"></a>第五部分 总结</h2><p>一口气没想到就到了总结时刻了，每次总结我都是草草的结束了，但这次来点正式一点的。（这次总结一定要超过200字！手动狗头）</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p> <strong>神奇の沟通</strong></p><ul><li>沟通是<font color=red> <strong>传递</strong></font> 沟通是<font color=red> <strong>交流</strong></font></li><li>沟通是<font color=red> <strong>分享</strong></font> 沟通是<font color=red> <strong>智慧</strong></font></li><li>沟通是<font color=red> <strong>友谊</strong></font> 沟通是<font color=red> <strong>力量</strong></font></li></ul><p>“ <strong><font color=chocolate>认识自我、超越自我</font></strong> “ 是沟通的最高境界</p><ul><li>当你在项目中感觉所要学习的人和事越来越多时，说明你在 <strong><font color=chocolate>成长</font></strong> 。</li><li>当你感觉要责怪的人和事越来越少时，说明你在 <strong><font color=chocolate>成熟</font></strong> 。</li><li>当你在项目中不断获得了友谊和朋友时，说明你将取得项目的 <strong><font color=chocolate>成功</font></strong> 。</li></ul><p>人们能够记住的东西有如下规律：</p><ul><li><strong>听到</strong>的内容的 <font color=chocolate>5%</font></li><li><strong>读过</strong>的内容的<font color=chocolate>10%</font></li><li><strong>见过</strong>的内容的 <font color=chocolate>30%</font></li><li><strong>讨论过</strong>的内容的 <font color=chocolate>50%</font></li><li><strong>亲自做</strong>的内容的 <font color=chocolate>75%</font></li><li><strong>教给别人</strong>所做过的事情的 <font color=chocolate>90%</font></li></ul><p>因此，我觉得我如果把我学过的知识开源也是一件有意义的事情，你读完本篇文章后，你学会了搭建博客，你得到了好处，我呢，因为这篇文档，也让自己受益颇多，将知识梳理的同时，也对这件事情记忆深刻了，这难道不是双赢的局面嘛。所以，赶快给本仓库点个star吧，<a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">传送门：小狮子前端の学习笔记</a>。请博主一杯冰阔乐，笑～</p><p>本篇博客介绍就到此结束了，完结，撒花✿✿ヽ(°▽°)ノ✿，后续更新内内容的话，上文也有提及过，会更新到<a href="https://yangchaoyi.vip/">https://yangchaoyi.vip</a> 里，到时候会置顶的，打开应该就能看到啦~</p><p>有什么问题可以在文章最后评论区留言和讨论，当然，你有更加优秀的文章或者新花样，都可以提出来，热烈欢迎~</p><blockquote><p>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我star，谢谢您！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 源码 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue全家桶+SSR+Koa2全栈开发】项目搭建过程  整合  学习目录（持续更新中）</title>
      <link href="/posts/35725/"/>
      <url>/posts/35725/</url>
      
        <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><blockquote><div>大家好，这里是<font color=chocolate>lionLoveVue</font>，基础知识决定了编程思维，学如逆水行舟，不进则退。金三银四，为了面试也还在慢慢积累知识，Github上面可以直接查看所有前端知识点梳理，<a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">github传送门</a>，觉得不错，点个Star★，好运连连，Offer终究鼠于你，持续更新中。另外，也可以关注微信公众号：<font color=chocolate>小狮子前端Vue</font>，源码以及资料今后都会放在里面。</div></blockquote><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><hr/><p>全局安装<code>vue/cli</code>脚手架</p><p>管理员身份运行cmd，执行如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>命令行输入<code>vue ui</code> 打开可视化界面</p><p>使用默认<code>default</code>配置</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200405213511680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>用vscode打开项目，执行如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm/cnpm run serve</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 查看是否配置成功</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">推荐阅读：官方文档-自定义指令</a></p><p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><strong>父子组件的通信方式</strong></p><p>父组件传子组件，是在子组件使用<code>props</code>，然后再父组件，通过<code>:=</code>绑定变量</p><p>子组件传父组件，是在子组件使用自定义事件，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件配置</span></span><br><span class="line">@click=<span class="string">"$emit('patch(xxx)')"</span></span><br><span class="line"><span class="comment">//父组件配置</span></span><br><span class="line">@patch=<span class="string">"func"</span></span><br></pre></td></tr></table></figure><p>如果是跨组件，不是父子组件关系，就使用 <code>Vuex</code>。</p><p><strong>slot</strong></p><p>插槽在组件抽象设计中的应用：</p><p>原本组件不能嵌入html内容，但通过父子组件传递插槽即可实现</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">slot=<span class="string">"a"</span></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;slot name=<span class="string">"a"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vuex基础"><a href="#Vuex基础" class="headerlink" title="Vuex基础"></a>Vuex基础</h2><hr/><p>Vuex简单来说就是多个组件共享数据，但是组件是不能直接操纵数据的，如下图所示，我们的数据放在紫色部分<code>state</code>里面（没有放在<code>data</code>里），操作数据源由红色部分<code>Mutations</code>完成，什么时候操控数据有黄色部分<code>Actions</code>来控制，这里就是由用户来操纵组件来触发 <code>Actions</code> ，最后，由 <code>Actons</code> 提交 <code>Commit</code> 通知改变数据源，来完成组件视图的更新渲染。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200406210920118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>安装Vuex</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm/cnpm i vuex</span><br></pre></td></tr></table></figure><h2 id="Koa2基础"><a href="#Koa2基础" class="headerlink" title="Koa2基础"></a>Koa2基础</h2><hr/><h3 id="koa-generator"><a href="#koa-generator" class="headerlink" title="koa-generator"></a>koa-generator</h3><p>管理员身份打开cmd，运行如下代码，全局安装</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g koa-generator</span><br></pre></td></tr></table></figure><p>使用<code>git bash</code>，在文件夹内创建项目</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">koa2 -e project_name</span><br></pre></td></tr></table></figure><p>-e 表示使用<code>ejs</code>，不加和 <code>node</code> 一样</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407104615983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>接下来，执行安装命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd koa2_learn</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装&amp;更新 <code>fsevents</code> 包</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --update-binary</span><br></pre></td></tr></table></figure><p>run app命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DEBUG=koa2_learn:* npm start</span><br></pre></td></tr></table></figure><p>执行后输出 <code>node bin/www</code> 说明服务端已经跑起来了</p><p>访问 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 查看页面效果</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040710530544.png"  alt=""><br>我们查看 <code>package.json</code> ，发现启动脚本是通过 <code>npm scripts</code> ，如果你想要自启动的话，执行如下命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407105417668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>对于上述执行指令，<code>dev</code> 和 <code>prd</code> 必须使用 <code>npm run xxx</code></p><p>与此同时，我们在 <code>index.js</code> 全局打印一下，加入如下代码：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407105756505.png"  alt=""></p><p>在 <code>git bash</code> 中执行如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>说明我们改变服务端脚本，服务能够自启动了<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407105837914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h2 id="Koa2中间件"><a href="#Koa2中间件" class="headerlink" title="Koa2中间件"></a>Koa2中间件</h2><hr/><p>图片来自Koa2官方，大致意思就是服务端接受客户端的 <code>Request</code>，经过服务端一些流程，然后 <code>Response</code> 返回给浏览器，其中每一个环，都是一个中间件。进来的时候会经过某个中间件，出去的时候也会经过，<strong>这样的机制就可以让中间件引用顺序和代码执行顺序不一致。</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407112345912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h2 id="mongoose基础"><a href="#mongoose基础" class="headerlink" title="mongoose基础"></a>mongoose基础</h2><hr/><h3 id="mongodb概念-amp-安装"><a href="#mongodb概念-amp-安装" class="headerlink" title="mongodb概念&amp;安装"></a>mongodb概念&amp;安装</h3><p>mongodb属于<code>非关系型</code>数据库，与<code>mysql</code>相对的（mysql是关系型数据库）</p><p>mongodb里面没有 <code>table</code>表，只有 <code>Collections</code></p><p>原本mysql一行叫做 <code>row</code>，而在mongodb中叫做 <code>document</code>，原本一列叫做 <code>cloumn</code>，而现在叫做 <code>fields</code></p><p>windows 10 安装教程：</p><p><a href="https://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">推荐阅读：Windows 平台安装 MongoDB</a></p><p><strong>注意</strong></p><p>安装<code>Install MongoDB Compass</code> 不勾选，否则可能要很长时间都一直在执行安装，MongoDB Compass是一个图形界面管理工具，后面会去下载一个图形界面管理工具<code>Robo3T</code>。</p><p>其它选项就默认选择 <code>next</code> 即可</p><p>找到下面位置下的两个 <code>.exe</code> 都点击运行一下好了…  （启动服务应该是下面那一个）<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407135608794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>检测是否安装成功</strong></p><p>访问：<a href="http://127.0.0.1:27017/" target="_blank" rel="noopener">http://127.0.0.1:27017/</a> 是否出现如下界面：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407135531155.png"  alt=""></p><h3 id="图形界面管理工具-Robo3T-安装与使用"><a href="#图形界面管理工具-Robo3T-安装与使用" class="headerlink" title="图形界面管理工具 Robo3T 安装与使用"></a>图形界面管理工具 <code>Robo3T</code> 安装与使用</h3><p><a href="https://robomongo.org/" target="_blank" rel="noopener">官网地址</a></p><p><a href="https://studio3t.com/download/" target="_blank" rel="noopener">Studio windows下载地址</a></p><p><a href="https://robomongo.org/download" target="_blank" rel="noopener">Robo 3T下载</a></p><p>进入安装页面后选择 <code>easy</code> 版本 ，然后选择你喜欢的主题风格，是明亮还是黑暗风格</p><p>进入图形化界面后，新建一个 <code>connection</code>，选择默认端口 <code>27017</code>，保存</p><h3 id="mongoose-中文文档"><a href="#mongoose-中文文档" class="headerlink" title="mongoose 中文文档"></a>mongoose 中文文档</h3><p><a href="https://xiaoxiami.gitbook.io/mongoose/" target="_blank" rel="noopener">参考：mongoose 4.5中文文档</a></p><p>在之前配置好的 Koa2 文件夹内（我的是koa2_learn文件夹） 打开 <code>bash</code> 界面，输入如下命令，安装 <code>mongoose</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p><strong>接下来就是配置相关了</strong></p><p>在项目根目录下创建 名为 <code>dbs</code> 的文件夹</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040714493081.png"  alt=""><br>新建一个 <code>config.js</code> 文件，配置如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    dbs: <span class="string">'mongodb://127.0.0.1:27017/dbs'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>dbs</code> 目录下创建 名为 <code>models</code> 的文件夹<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407145636457.png"  alt=""><br>新建一个 <code>person.js</code> 文件，配置如下代码（此时的文件名对应着之后我们的“表名”，也就是 <code>Collections</code>）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建模式 </span></span><br><span class="line"><span class="keyword">let</span> personSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建模型</span></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Person'</span>,personSchema)</span><br></pre></td></tr></table></figure><p>然后在 <code>app.js</code> 中进行导入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> dbConfig = <span class="built_in">require</span>(<span class="string">'./dbs/config'</span>)</span><br></pre></td></tr></table></figure><p>在 <code>app.js</code> 默认注释 <code>routes</code> 后面，添加第三行连接代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes</span></span><br><span class="line">app.use(index.routes(), index.allowedMethods())</span><br><span class="line">app.use(users.routes(), users.allowedMethods())</span><br><span class="line">mongoose.connect(dbConfig.dbs,&#123;</span><br><span class="line">  useNewUrlParser:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基本配置就结束了，现在最好是重启一下koa服务，<code>ctrl+c</code> 退出，然后输入如下命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>出现如下界面，说明配置是没有问题的，连接成功！<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407151732459.png"  alt=""><br>接下来就是尝试写一个api试试，在 <code>users.js</code> 文件内配置如下代码</p><p>头部导入模型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入模型</span></span><br><span class="line"><span class="keyword">const</span> Person = <span class="built_in">require</span>(<span class="string">'../dbs/models/person'</span>)</span><br></pre></td></tr></table></figure><p>自定义api接口</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/addPerson'</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//新建一个模型的实例</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">    name: ctx.request.body.name,</span><br><span class="line">    age: ctx.request.body.age</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> code</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> person.save()</span><br><span class="line">    code=<span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    code=<span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  ctx.body=&#123;</span><br><span class="line">    code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>调用接口。 <code>curl</code> 是一个shell 命令，  <code>-d</code>命令表示是 <code>post</code> 请求 ，接下来是数据项，最后是api接口地址</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">'name=chocolate&amp;age=20'</span> http:<span class="comment">//localhost:3000/users/addPerson</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407162123495.png"  alt=""><br>此时，打开Robo 3T，刷新一下我们的数据库，就能发现多了一个 <code>dbs</code><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407162222285.png"  alt=""><br>查看一下，是否有对应写入数据：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040716231684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>上述过程，基本上把我们的后端服务和数据库进行了打通，后续我们只需要套着之前的例子来就好了，接下来再展示写一个api，因为上文是增加操作，也就是写操作，下文我们再来个读操作吧。</p><p>依旧是在 <code>users.js</code> 中加入如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据库读取api</span></span><br><span class="line">router.post(<span class="string">'/getPerson'</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> Person.findOne(&#123;<span class="attr">name</span>:ctx.request.body.name&#125;)</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> Person.find(&#123;<span class="attr">name</span>:ctx.request.body.name&#125;)</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    result,</span><br><span class="line">    results</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开 <code>bash</code> ，执行如下命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">'name=chocolate'</span> http:<span class="comment">//localhost:3000/users/getPerson</span></span><br></pre></td></tr></table></figure><p>发现，会返回给我们json数据包，证明api接口实现<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407171844176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>最后，附上更新和删除api，亲测有效嗷</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新api</span></span><br><span class="line">router.post(<span class="string">'/updatePerson'</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> Person.where(&#123;</span><br><span class="line">    name:ctx.request.body.name</span><br><span class="line">  &#125;).update(&#123;</span><br><span class="line">    age: ctx.request.body.age</span><br><span class="line">  &#125;)</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//删除api</span></span><br><span class="line">router.post(<span class="string">'/removePerson'</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> Person.where(&#123;</span><br><span class="line">    name:ctx.request.body.name</span><br><span class="line">  &#125;).remove()</span><br><span class="line"></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://xiaoxiami.gitbook.io/mongoose/" target="_blank" rel="noopener">更多知识点请参考：mongoose 4.5中文文档</a></p><h2 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h2><hr/><h3 id="cookie-和-session-引入"><a href="#cookie-和-session-引入" class="headerlink" title="cookie 和 session 引入"></a>cookie 和 session 引入</h3><p>这里就要扯到 <code>cookie</code> 和 <code>session</code>的相关知识点了，划重点啦！ </p><p>服务端的程序如何去识别客户端的状态，大家知道，http是无状态的，<a href="https://blog.csdn.net/weixin_42429718/article/details/105264747" target="_blank" rel="noopener">推荐阅读：如何学好前端，白嫖知识</a> </p><p>比如现在有个用户A，它访问了服务器程序，那服务器程序如何知道下一次再访问的时候还是A呢？</p><p>因此，对于这一块就要用到非常重要的概念，<code>session</code>，当然，这个<code>session</code>可不是浏览器的，<strong>而是服务器的</strong>，它是用来存储用户的信息的。</p><p>那么，服务器的 <code>session</code>是如何保持在客户端呢？</p><p>这个时候呢，又要引出另一个非常重要的概念，浏览器中的 <code>cookie</code> 。</p><p>综上所述，<code>cookie</code> 和 <code>session</code> 的关系是：服务端用 <code>session</code> 来保存用户的状态，然后客户端用 <code>cookie</code> 来保存 <code>session</code> ，服务器端把 <code>session</code> 种植到 <code>cookie</code> 中，然后下次访问时，<code>cookie</code> 会携带着 <code>session</code> ，进而<strong>达到一个身份认证的效果</strong>。</p><h3 id="redis概念-amp-安装"><a href="#redis概念-amp-安装" class="headerlink" title="redis概念&amp;安装"></a>redis概念&amp;安装</h3><p>上文我们知道了cookie 和 session 在浏览器和服务器端的作用，那么与我们<code>redis</code> 有什么关系呢？</p><p>想一想，既然是认证的功能，那我们服务端的<code>session</code> 应该存在哪呢，也许你会想着放入服务器端存储，放入内存当中，这确实是一种方式，没有问题，但当应用程序很大的时候，<code>session</code> 容量特别大的时候呢？例如某宝这样的呢？此时内存肯定不够用了，这个时候就需要一个容器来存储大容量的 <code>session</code> 了，此时存储数据库 <code>redis</code>就发挥了它的作用了！</p><p>关于数据库的话，上文也提到了<code>mongodb</code>，我们是不是也可以用这个呢？</p><p>这个的话，虽然也是一种方式，但我们要考虑<strong>读写性能问题</strong>，因为 <code>redis</code>是<strong>快速读写类型的数据库</strong>，使用灵活方便，是 <code>key-value</code> 型的</p><hr/><p>为了更加了解<code>redis</code>，这里我就引用官方介绍了：</p><ul><li><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p></li><li><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p></li><li><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p></li></ul><p><strong>安装教程</strong></p><p><a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">参考：redis安装教程</a></p><p><a href="https://blog.csdn.net/u012343297/article/details/78839063?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3" target="_blank" rel="noopener">参考：windows下Redis的安装和配置–图文教程</a></p><p>在 <code>koa</code> 的 <code>bash</code>界面，执行如下命令，完成 <code>koa</code> 与 <code>redis</code> 的连接</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i koa-generic-session koa-redis</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><h3 id="启动-redis-服务"><a href="#启动-redis-服务" class="headerlink" title="启动 redis 服务"></a>启动 redis 服务</h3><p>一、[9980] 21 Apr 02:57:05.611 # Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</p><p>解决方法：在命令行中运行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">redis-cli.exe</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;shutdown</span><br></pre></td></tr></table></figure><p>二、Redis (error) NOAUTH Authentication required.解决方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;auth <span class="string">"123456"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;shutdown</span><br><span class="line">not connected&gt;exit</span><br></pre></td></tr></table></figure><p>然后重新运行 <code>redis-server.exe redis.windows.conf</code> ，启动成功！</p><p><a href="https://blog.csdn.net/sweetgirl520/article/details/79001056#commentBox" target="_blank" rel="noopener">参考：Redis启动报错：Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</a></p><h2 id="Nuxt-js基础"><a href="#Nuxt-js基础" class="headerlink" title="Nuxt.js基础"></a>Nuxt.js基础</h2><hr/><p>Nuxt.js 是一个基于Vue.js的通用应用框架，预设了利用Vue.js开发服务端渲染的应用所需要的各种配置。</p><p>基于Vue 2做的，包括Vue-Router，支持Vuex、Vue Server Render、vue-meta</p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82NTUwMDk2LTc4NDVmMjgxYzg1NjVlNTAucG5n?x-oss-process=image/format,png#pic_center"  alt=""></p><h3 id="Nuxt-js工作流"><a href="#Nuxt-js工作流" class="headerlink" title="Nuxt.js工作流"></a>Nuxt.js工作流</h3><p>下图源自Nuxt官网，简单介绍一下它的工作流程</p><p><a href="https://nuxtjs.org/api" target="_blank" rel="noopener">更多内容，请参考：nuxtjs 英文官方文档</a></p><p><a href="https://zh.nuxtjs.org/guide" target="_blank" rel="noopener">参考：nuxtjs 中文文档</a><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407200805943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>从浏览器发出一个请求，到最终服务端渲染完成，关于Nuxt的生命周期如下：</p><ul><li><code>Incoming Request</code> 浏览器发送一个请求</li><li>服务端检查是否有 <code>nuxtServerInit</code> 配置项，有的话就会执行这个函数，其中包含一个标注： <code>Store action</code> 用来操作 <code>vuex</code></li><li>下一个环节就是中间件 <code>middleware</code> ，与路由相关，做任何你想要的功能</li><li>预验证 <code>validate()</code> 可以配合高级动态路由，做一些验证，比如是否允许跳转某个页面</li><li><code>asyncData() &amp; fetch()</code> 获取数据，前一个是用来渲染<code>vue component</code>，即 vue组件的，后一个通常用来修改 <code>vuex</code>，即 <code>Store</code>的</li><li>有了数据，模板后，最后一步就是 <code>Render</code> 渲染了，方式是 <code>SSR</code></li></ul><h3 id="Nuxt-js-安装"><a href="#Nuxt-js-安装" class="headerlink" title="Nuxt.js 安装"></a>Nuxt.js 安装</h3><p>如果没有安装vue cli的话，先全局安装一下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm/cnpm install -g @vue/cli-init</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue init nuxt-community/koa-template nuxt_learn（这里填入你自己的文件名）</span><br></pre></td></tr></table></figure><p>安装完成后，依次执行如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd nuxt_learn</span><br><span class="line">npm install # Or yarn</span><br><span class="line">npm install --update-binary</span><br><span class="line">npm install ajv@^<span class="number">6</span>（可选项，如果有报warn，就装一下）</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>如果安装过程网络有问题，报错了，可以试试用 <code>cnpm</code>或者</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nrm use cnpm</span><br></pre></td></tr></table></figure><p><strong>eslint版本问题：</strong> 需要更新eslint版本<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407212332515.png"  alt=""><br>解决：执行如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install eslint-plugin-html@^<span class="number">3</span></span><br></pre></td></tr></table></figure><p>执行完如下步骤后，最后一步，打开服务：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><strong>babel编译版本有问题：</strong> 解决办法是升级<code>backpack-core@0.3.0</code>到<code>backpack-core@0.7.0</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install backpack-core@<span class="number">0.7</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure><p>解决上述问题后，编译能成功，但是客户端依旧运行报错</p><p>解决办法是：在<code>nuxt.config.js</code>里找到<code>eslint-loader</code>将<code>ctx.isClient</code>改成<code>ctx.Client</code>就可以运行了</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408075951708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><a href="https://www.cnblogs.com/ITtt/p/10515456.html" target="_blank" rel="noopener">参考：解决vue init nuxt-community/koa-template项目，安装报错问题</a></p><p>解决完上述问题后，执行如下指令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408082532970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408082553312.png"  alt=""><br>访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a>  出现如下界面，代表配置成功 ✿✿ヽ(°▽°)ノ✿</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408082558408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>附：微信公众号：【小狮子前端】 回复【nuxt-learn】即可获取本节源码</p><h3 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h3><p>当使用 <code>SSR</code> 时， <code>mounted</code> 只在浏览器端渲染，而<strong>在服务器端不会渲染</strong> ：浏览器通过axios请求的数据，只有 <code>created</code> 在开启SSR时会执行。</p><p>SSR原理：① 服务器端将编译好的内容（模板）下发（包括样式、内容、数据）  ② 把异步获取的数据响应给浏览器端（把交互交给浏览器来完成）</p><p><strong>SSR原理深入</strong></p><p>我们打开页面源代码，查看一下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408105343967.png"  alt=""><br>服务器端渲染完页面后给浏览器端的html分了几个部分，第一个是样式 <code>style</code> ，第二个是模板内容，例如上图中圈中的<font color=blue>蓝色</font>部分，第三个是服务端拿到的数据结果，例如上图中圈中的<font color=red>红色</font>部分，为什么服务端拿到的数据给到浏览器端呢？<br>这里我们得思考一个<font color=red><strong>SSR的工作原理</strong></font> 了</p><p>如果不给数据的话，就是一个静态html模板，一个<strong>静态的内容</strong>，没有任何交互，那交互是在哪完成的呢？</p><p>交互是在浏览器端完成的，也就是说浏览器端会有一个入口，进行预编译，但不会再渲染页面了，因为服务器端已经在页面渲染过一次了。<strong>它要做的是创建一个虚拟的编译结果（可以理解为虚拟dom），</strong> 和服务器端传过来的结果进行对比，如果有区别，它会重新请求数据。在nuxt项目中都是一套文件，没有特别指定是在浏览器端运行还是服务端运行，也就是SSR常说的<strong>同构</strong>，浏览器端编译虚拟dom，也依赖于 <code>vue</code> 文件，因此模板是有的，而编译这个dom，需要的是额外的数据，此数据是服务器端渲染之前请求而来的数据，如果数据不同步在浏览器端，<strong>编译出来的结果必然和服务器端编译结果不一致</strong>。 </p><p>综上，<strong>服务器端异步获取的数据会同步在浏览器端</strong>，作对比，如果对比一致的话，浏览器端就会对对应的dom结点注册事件，达到交互作用。</p><p><a href="https://nuxtjs.org/api" target="_blank" rel="noopener">更多内容，请参考：nuxtjs 英文官方文档</a></p><p><a href="https://zh.nuxtjs.org/guide" target="_blank" rel="noopener">参考：nuxtjs 中文文档</a></p><p><font color=chocolate>以上，就是我们项目搭建所需的基础知识啦，已经整理完结啦，当然还有许多地方没有提及，读者可以去查阅一些官方文档来补充更多知识，下文我们将逐步深入全栈开发过程记录，制作不易，点赞收藏评论，一键三连一波~</font></p><h2 id="项目搭建开始"><a href="#项目搭建开始" class="headerlink" title="项目搭建开始"></a>项目搭建开始</h2><hr/><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>node</li><li>vue</li><li>npm</li><li>webpack</li><li>nuxt</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app loveVueApp</span><br></pre></td></tr></table></figure><p>使用 <code>npx</code> 可以帮助我们更快速的搭建项目环境，在你需要创建项目文件夹的地方 <code>shift+鼠标右键</code> 打开 <code>powershell</code> 窗口，执行上述命令，然后按照下列图片选择对应的模块：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131621565.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131631954.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131650677.png"  alt=""></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131703632.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040813172024.png"  alt=""></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131730286.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131810561.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131823305.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408131845331.png"  alt=""><br>安装完成后，会提示你执行如下命令：</p><p>这里我们就执行开发环境的指令就好了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd loveVueApp</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>另附上，生产环境的指令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd loveVueApp</span><br><span class="line">npm run build</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 会有一个nuxtjs的图标出现，代表环境搭配成功 ✿✿ヽ(°▽°)ノ✿</p><p>此时，再 <code>ctrl+c</code> 退出当前服务</p><p>执行如下命令，重新安装一下，防止版本问题等</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install  --update-binary</span><br></pre></td></tr></table></figure><p>重装之后，再跑一次服务，看能不能打开界面</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="增加-babel-node-处理（使用ES6的import指令问题）"><a href="#增加-babel-node-处理（使用ES6的import指令问题）" class="headerlink" title="增加 babel-node 处理（使用ES6的import指令问题）"></a>增加 babel-node 处理（使用ES6的import指令问题）</h3><p>创建好我们的基本项目后，我们还需要对我们所需要的模块进行更改。</p><p>例如，对应目标文件的第一行代码：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408154705542.png"  alt=""><br>改为如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Koa  <span class="keyword">from</span> <span class="string">'koa'</span></span><br></pre></td></tr></table></figure><p>于是，就会出现报错，无法识别<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408154830122.png"  alt=""></p><p>在上文讲解 <code>nuxtjs</code>基础 我们是可以直接用 <code>import</code> 操作的，但当我们使用官方脚手架时，是没有处理这个 <code>bug</code> 的。下面来解释一下为什么会出现这个问题：</p><p>当我们使用命令 <code>npm run dev</code> 的时候，其实是用了 <code>npm</code> 的 <code>script</code> 的方法，如下图所示：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408155247326.png"  alt=""></p><p>可见使用了 <code>node</code>，并且不支持 <code>import</code> 操作，上文是因为使用了 <code>babel</code> 进行了处理，在这里官方脚手架时使用 <code>node</code> 来启动服务，没有经过 <code>babel</code> 处理，因此就不会识别 <code>import</code> 指令了。</p><p><strong>解决上述问题</strong></p><p>上文提到了是因为没有 <code>babel</code>处理，执行服务程序，那就自己加上去咯，具体如下：</p><p>在 <code>dev</code> 和 <code>start</code> 后面添加 <code>--exec babel-node</code></p><p>或者直接使用下面代码覆盖你的 <code>scripts</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development nodemon server/index.js --watch server --exec babel-node"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"nuxt build"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"cross-env NODE_ENV=production node server/index.js --exec babel-node"</span>,</span><br><span class="line">    <span class="string">"generate"</span>: <span class="string">"nuxt generate"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后，在根目录下创建一个 <code>.babelrc</code> 的配置文件，然后给它指定一个指令集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了代码还不行，还要再安装插件，执行如下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install babel-preset-es2015</span><br><span class="line">npm install babel-cli -S</span><br></pre></td></tr></table></figure><p>好了，有了 <code>babel-node</code> 后我们就能启动服务程序了，改成了我们常用的 <code>ES6</code>语法了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 会有一个nuxtjs的图标出现，代表环境搭配成功 ✿✿ヽ(°▽°)ノ✿</p><h3 id="解决-sass-导致编译出错问题"><a href="#解决-sass-导致编译出错问题" class="headerlink" title="解决 sass 导致编译出错问题"></a>解决 sass 导致编译出错问题</h3><p>这个问题也依旧是脚手架带来的问题，解决方式就是安装几个插件，执行命令如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass</span><br></pre></td></tr></table></figure><p>PS：可能会有下述 <code>warn</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install eslint@^(版本号)  <span class="comment">//（注意，这里是当你出现对应warn才执行）</span></span><br></pre></td></tr></table></figure><p>我的是这种警告，因此依葫芦画瓢，执行下述命令<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408162852228.png"  alt=""></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install sass@^<span class="number">1.3</span><span class="number">.0</span> fibers@&gt;= <span class="number">3.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="辅助工具安装"><a href="#辅助工具安装" class="headerlink" title="辅助工具安装"></a>辅助工具安装</h3><ul><li>MongoDB</li><li>redis</li><li>Robo 3T</li></ul><p>（上文基础部分有介绍安装教程，可以往回看一看对应模块 ↑）</p><h2 id="远程仓库常用指令（整理）"><a href="#远程仓库常用指令（整理）" class="headerlink" title="远程仓库常用指令（整理）"></a>远程仓库常用指令（整理）</h2><ul><li><p>查看分支：<code>git branch</code></p></li><li><p>查看项目的分支们(包括本地和远程) <code>git branch -a</code></p></li><li><p>创建分支：<code>git branch &lt;name&gt;</code></p></li><li><p>切换分支：<code>git checkout &lt;name&gt;</code></p></li><li><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p></li><li><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p></li><li><p>提交 git commit -m ‘简介’</p></li><li><p>git push -u origin master</p></li></ul><h2 id="首页开发"><a href="#首页开发" class="headerlink" title="首页开发"></a>首页开发</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>模板设计（解决复用问题）</li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040817250239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><ul><li>组件设计（如何拆分组件）</li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408174830905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>如何节省网络请求？</strong></p><p>上述流程图共进行了两次请求，另外，异步获取数据时，还会有<code>闪一下</code>，影响用户体验，同时浪费一次网络请求。解决办法就是当浏览器去请求服务器的时候，当浏览器去请求文档的时候，服务端 <code>ip</code>已经知道了，那个时候就可以拿到对应的城市，立即返回数据给浏览器。做法就是通过 <code>vuex</code> 来同步状态，然后通过 <code>SSR</code> 异步请求就能得到数据。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040818365254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>类似于上文流程图，也是可以通过 <code>vuex</code> 来做<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408183829795.png"  alt=""><br>属于静态模块，不需要我们异步获取数据，直接用 <code>SSR</code> 下发一下就ok。</p><ul><li>数据结构设计（依赖于数据和组件）</li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200409171816616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><code>pois表</code>  <strong>城市推荐数据库</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200409171908774.png"  alt=""></p><ul><li>接口设计（与数据结构相对应）</li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200409172047435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="首页开发Header-城市定位服务设计"><a href="#首页开发Header-城市定位服务设计" class="headerlink" title="首页开发Header-城市定位服务设计"></a>首页开发Header-城市定位服务设计</h3><p>根据 <code>Header</code> 布局情况来看的话，我们在<code>components</code>文件夹下创建如下几个文件夹和文件（水印遮住的是 <code>README</code>）</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408192534453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>导入css，然后打开 <code>nuxt.config.js</code> 进行配置<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408191205311.png"  alt=""></p><h2 id="项目开发可能遇到问题"><a href="#项目开发可能遇到问题" class="headerlink" title="项目开发可能遇到问题"></a>项目开发可能遇到问题</h2><hr/><p><strong><font color=red>重要提醒！</font></strong></p><p>本篇文章能详细概述的地方有限，所以下文将会以讲重点部分为主，其余部分请参考本参考源码，已经开放，开发过程中按照分支进行开发，然后合并到 <code>master</code> 分支</p><p><a href="https://github.com/Chocolate1999/Vue-family-bucket-SSR-Koa2-full-stack-development-from-Meituan" target="_blank" rel="noopener">仓库の传送门（戳一戳）</a></p><p>收藏 <code>star</code> 一波，✿✿ヽ(°▽°)ノ✿</p><h3 id="关于项目中SMTP服务功能配置问题"><a href="#关于项目中SMTP服务功能配置问题" class="headerlink" title="关于项目中SMTP服务功能配置问题"></a>关于项目中SMTP服务功能配置问题</h3><p>如下图，所示，我们首先登陆自己的QQ，打开邮箱，然后去打开下面两项服务<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200409181256509.png"  alt=""><br>在  <code>server/dbs/config.js</code> 文件内更改为你自己的授权密钥和邮箱即可<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200409182212470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>引入 mongoose</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure><p>配置 <code>users</code> 接口</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install koa-router koa-redis nodemailer</span><br></pre></td></tr></table></figure><p>配置 <code>axios</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>配置 <code>passport</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install koa-passport passport-local</span><br></pre></td></tr></table></figure><h3 id="关于项目中登录注册接口问题"><a href="#关于项目中登录注册接口问题" class="headerlink" title="关于项目中登录注册接口问题"></a>关于项目中登录注册接口问题</h3><p><code>passport</code> 包内有 <code>isAuthenticated()</code>方法，因此在文档源码中没有定义过。</p><p><code>passport</code>会把用户的信息对象放到 <code>session</code> 对象里面去，也就是 <code>passport</code> 会存储在 <code>session</code> 中，例如如下，如果是登录状态的话，那么session会有 <code>passport</code>，而 <code>passport</code> 会有 <code>user</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//判断是否是登录状态</span></span><br><span class="line"><span class="keyword">if</span> (ctx.isAuthenticated()) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;username, email&#125; = ctx.session.passport.user</span><br><span class="line">  ctx.body=&#123;</span><br><span class="line">    user:username,</span><br><span class="line">    email</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>users.js</li></ul><h3 id="server文件夹-index-js文件中-加载相关包"><a href="#server文件夹-index-js文件中-加载相关包" class="headerlink" title="server文件夹 index.js文件中 加载相关包"></a>server文件夹 index.js文件中 加载相关包</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span></span><br><span class="line"><span class="keyword">import</span> session <span class="keyword">from</span> <span class="string">'koa-generic-session'</span></span><br><span class="line"><span class="keyword">import</span> Redis <span class="keyword">from</span> <span class="string">'koa-redis'</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'koa-json'</span></span><br><span class="line"><span class="keyword">import</span> dbConfig <span class="keyword">from</span> <span class="string">'./dbs/config'</span></span><br><span class="line"><span class="keyword">import</span> passport <span class="keyword">from</span> <span class="string">'./interface/utils/passport'</span></span><br><span class="line"><span class="keyword">import</span> users <span class="keyword">from</span> <span class="string">'./interface/users'</span></span><br><span class="line"><span class="keyword">import</span> geo <span class="keyword">from</span> <span class="string">'./interface/geo'</span></span><br><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">'./interface/search'</span></span><br><span class="line"><span class="keyword">import</span> categroy <span class="keyword">from</span> <span class="string">'./interface/categroy'</span></span><br><span class="line"><span class="keyword">import</span> cart <span class="keyword">from</span> <span class="string">'./interface/cart'</span></span><br></pre></td></tr></table></figure><p>加载指令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install mongoose koa-bodyparser koa-generic-session koa-redis koa-json</span><br></pre></td></tr></table></figure><h3 id="Cannot-read-property-‘post’-of-undefined-问题解决"><a href="#Cannot-read-property-‘post’-of-undefined-问题解决" class="headerlink" title="Cannot read property ‘post’ of undefined 问题解决"></a>Cannot read property ‘post’ of undefined 问题解决</h3><p>注册那一个模块那里，我一点发送验证码，然后就报了这个错误，一开始以为接口写错了，还测试了一下，原来是因为 <code>axios</code> 没有在 <code>nuxt</code> 脚手架中配置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Cannot read property <span class="string">'name'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p><code>nuxt.config.js</code> 文件中配置如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  modules: [</span><br><span class="line">    <span class="string">'@nuxtjs/axios'</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  axios: &#123;</span><br><span class="line">    <span class="comment">// proxyHeaders: false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决之后，发送验证码，如下结果，有邮件发送过来 ✿✿ヽ(°▽°)ノ✿<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410101314585.png"  alt=""></p><h3 id="关于-win10-redis-报错-Permission-denied"><a href="#关于-win10-redis-报错-Permission-denied" class="headerlink" title="关于 win10 redis 报错 Permission denied"></a>关于 win10 redis 报错 Permission denied</h3><p>同样也是注册页面，当我们注册后，点击同意协议并注册，发现无法跳转到登录界面，而提示 <code>已注册</code> ，看了半天，提示服务错误，于是一开打redis命令窗，报了这个错误，原来是默认设置了<strong>只可读不可写</strong>，按如下方式增加权限，解决了问题 ✿✿ヽ(°▽°)ノ✿</p><p>解决：去Redis的rdb文件查看文件属性，增加写入权限<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410111551414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><a href="https://blog.csdn.net/u010049198/article/details/89715009" target="_blank" rel="noopener">参考：Redis在Windows下的坑</a></p><h3 id="关于win10-mongodb-导入-bat文件问题"><a href="#关于win10-mongodb-导入-bat文件问题" class="headerlink" title="关于win10 mongodb 导入.bat文件问题"></a>关于win10 mongodb 导入.bat文件问题</h3><p>网上说用如下指令，但是我还是没有导入成功，说是不存在这指令，但之前数据库都导入了 <code>users</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoimport -d student -c areas areas.dat</span><br></pre></td></tr></table></figure><p>于是，我就打开了 <code>Studio 3T</code> 来试着导入，还算是成功了吧</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410115105370.png"  alt=""><br>我的做法是直接在左边那个 <code>Collections</code> 文件夹直接右键 选择 <code>Add</code> 操作，然后导入 <code>.dat</code>文件，不过导完之后会有后缀出现，于是我就重命名了一下。虽然看起来有点傻傻的做法，但也算是解决了吧 ✿✿ヽ(°▽°)ノ✿<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410115134385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="关于-geo服务-接口签名"><a href="#关于-geo服务-接口签名" class="headerlink" title="关于 geo服务 接口签名"></a>关于 geo服务 接口签名</h3><p><a href="http://cp-tools.cn/sign" target="_blank" rel="noopener">http://cp-tools.cn/sign</a></p><h3 id="关于定位服务及切换城市-geo-bug解决"><a href="#关于定位服务及切换城市-geo-bug解决" class="headerlink" title="关于定位服务及切换城市 geo bug解决"></a>关于定位服务及切换城市 geo bug解决</h3><p>在城市定位  <code>geo</code> 分支那里，报了如下两个错误，可让我焦头烂额啊，终于，找到了解决办法，特来写此模块，记录一下 ✿✿ヽ(°▽°)ノ✿</p><p><font color=red>① 报错Classic mode for store/ is deprecated and will be removed in Nuxt 3.</font></p><p><font color=red>② Error occurred when calling nuxtServerInit:  socket hang up</font></p><p>对<strong>第一个问题</strong>出现这种错误的原因是：nuxt3版本中已经移除了对原始vuex这种编程，出现这种错误的代码如下：</p><p>解决的办法如下： store 目录下的每个 .js 文件会被转换成为状态树指定命名的子模块 （当然，index 是根模块）。</p><p>（以下代码亲测有效，直接覆盖你的代码即可）</p><p>首先是目录结构修改，最新版的已经不需要另外加一个 <code>models</code> 文件夹了。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410192219410.png"  alt=""></p><p><code>index.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="keyword">async</span> nuxtServerInit(&#123;</span><br><span class="line">    commit</span><br><span class="line">  &#125;,&#123;req,app&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;status,<span class="attr">data</span>: &#123;province,city&#125;&#125; = <span class="keyword">await</span> app.$axios.get(<span class="string">'/geo/getPosition'</span>)</span><br><span class="line">    commit(<span class="string">'geo/setPosition'</span>,status===<span class="number">200</span>?&#123;city,province&#125;:&#123;<span class="attr">city</span>:<span class="string">''</span>,<span class="attr">province</span>:<span class="string">''</span>&#125;)      </span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">status</span>:status2, <span class="attr">data</span>: &#123;menu&#125;&#125; = <span class="keyword">await</span> app.$axios.get(<span class="string">'/geo/menu'</span>)</span><br><span class="line">    commit(<span class="string">'home/setMenu'</span>,status2===<span class="number">200</span>?menu:[])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>geo.js</code> 文件无需修改</p><p>对<strong>第二个问题</strong>，多半是因为你写好的 <code>geo</code> 相关接口没有在<code>serve/index.js</code>中进行导入和配置使用（我就是因为这个）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> geo <span class="keyword">from</span> <span class="string">'./utils/geo'</span></span><br><span class="line">app.use(geo.routes()).use(geo.allowedMethods())</span><br></pre></td></tr></table></figure><p>具体导入位置如下：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410192529985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410192546969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><a href="https://blog.csdn.net/Umbrella_Um/article/details/99711310" target="_blank" rel="noopener">参考：美团项目 — 定位服务及切换城市5</a></p><p><a href="https://blog.csdn.net/weixin_44638823/article/details/103546428?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2" target="_blank" rel="noopener">参考：nuxtjs中使用SSR开发关于前端vuex请求后台的问题</a></p><h3 id="关于搜索框请求次数问题"><a href="#关于搜索框请求次数问题" class="headerlink" title="关于搜索框请求次数问题"></a>关于搜索框请求次数问题</h3><p>我们当然不能没输入一个字符，就请求一次接口，因此我们需要弄一个延时函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install lodash</span><br></pre></td></tr></table></figure><p>引入库</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br></pre></td></tr></table></figure><h3 id="关于切换城市模块优化与实现"><a href="#关于切换城市模块优化与实现" class="headerlink" title="关于切换城市模块优化与实现"></a>关于切换城市模块优化与实现</h3><p>首先明确一载入切换城市界面，哪个是要进行请求的，那就是省份（第一级），此时可以使用ssr进行服务端渲染，页面载入后也跟着进行载入，但这里就直接使用vue中的Mouted生命函数完成这里的axios请求 ↓</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">      status,</span><br><span class="line">      data: &#123; province &#125;</span><br><span class="line">    &#125; = <span class="keyword">await</span> self.$axios.get(<span class="string">"/geo/province"</span>);</span><br><span class="line">    <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">      self.province = province.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: item.id,</span><br><span class="line">          label: item.name</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>联动逻辑，使用watch监听用户选择了什么省份</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听pvalue值，当省份发生改变的时候，可选城市也要跟着改变（联动）</span></span><br><span class="line">watch:&#123;</span><br><span class="line">  pvalue:<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">newPvalue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> &#123;status,<span class="attr">data</span>:&#123;city&#125;&#125;=<span class="keyword">await</span> self.$axios.get(<span class="string">`/geo/province/<span class="subst">$&#123;newPvalue&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span>(status===<span class="number">200</span>)&#123;</span><br><span class="line">      self.city=city.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value:item.id,</span><br><span class="line">          label:item.name</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.cvalue=<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意select下拉框的设计，如果你不设置 <code>label</code> 显示的还是 <code>value</code> 的值，但是如果你设置了 <code>label</code> 那输入框显示的就是 <code>label</code> 的值，但是你 <code>v-model</code> 拿的还是你 <code>value</code> 的值，所以在省份中复制也是将 <code>id</code> 赋值给 <code>value</code> 的，所以参数正确！<br>会二级联动，三级联动还会难吗？毕竟现在你只需要重点思考逻辑上的代码，而 <code>DOM</code> 结构E-UI已经随随便便完成了，只剩下你关联他们的代码而已</p><p><a href="https://blog.csdn.net/Umbrella_Um/article/details/100191306" target="_blank" rel="noopener">参考：美团项目 — 切换城市 7</a></p><h2 id="通过项目挖掘知识点（整理）"><a href="#通过项目挖掘知识点（整理）" class="headerlink" title="通过项目挖掘知识点（整理）"></a>通过项目挖掘知识点（整理）</h2><h3 id="koa2中的ctx是什么？"><a href="#koa2中的ctx是什么？" class="headerlink" title="koa2中的ctx是什么？"></a>koa2中的ctx是什么？</h3><p>为了试图搞明白，用console.log将它输出</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">&#123; request:</span><br><span class="line">   &#123; method: <span class="string">'GET'</span>,</span><br><span class="line">     url: <span class="string">'/'</span>,</span><br><span class="line">     header:</span><br><span class="line">      &#123; host: <span class="string">'localhost:3000'</span>,</span><br><span class="line">        connection: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'cache-control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">        <span class="string">'upgrade-insecure-requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</span><br><span class="line">        accept: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, sdch, br'</span>,</span><br><span class="line">        <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span> &#125; &#125;,</span><br><span class="line">  response:</span><br><span class="line">   &#123; status: <span class="number">200</span>,</span><br><span class="line">     message: <span class="string">'OK'</span>,</span><br><span class="line">     header:</span><br><span class="line">      &#123; <span class="string">'content-type'</span>: <span class="string">'text/plain; charset=utf-8'</span>,</span><br><span class="line">        <span class="string">'content-length'</span>: <span class="string">'25'</span> &#125; &#125;,</span><br><span class="line">  app: &#123; subdomainOffset: <span class="number">2</span>, proxy: <span class="literal">false</span>, env: <span class="string">'development'</span> &#125;,</span><br><span class="line">  originalUrl: <span class="string">'/'</span>,</span><br><span class="line">  req: <span class="string">'&lt;original node req&gt;'</span>,</span><br><span class="line">  res: <span class="string">'&lt;original node res&gt;'</span>,</span><br><span class="line">  socket: <span class="string">'&lt;original node socket&gt;'</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见它主要包括 <code>request</code> 和  <code>response</code> 两部分。</p><blockquote><div>ctx是context的缩写中文一般叫成上下文，这个在所有语言里都有的名词，可以理解为上(request)下(response)沟通的环境，所以koa中把他们两都封装进了ctx对象，koa官方文档里的解释是为了调用方便，ctx.req=ctx.request,ctx.res=ctx.response，类似linux系统中的软连接？最终执行还是request和response对象</blockquote><blockquote><div>body是http协议中的响应体，header是指响应头ctx.body = ctx.res.body = ctx.response.body</div></blockquote><p>Koa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。</p><p><code>Context.response.body</code> 属性就是发送给用户的内容。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = require(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = new Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = ctx =&gt; &#123;</span><br><span class="line">  ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，main函数用来设置 <code>ctx.response.body</code> 。然后，使用 <code>app.use</code> 方法加载main函数。</p><p>你可能已经猜到了，ctx.response代表 HTTP Response。同样地，ctx.request代表 HTTP Request。</p><p>运行这个 demo，访问 <a href=" http://127.0.0.1:3000">http://127.0.0.1:3000 </a>，现在就可以看到”Hello World”了。</p><p><a href="https://www.cnblogs.com/lfri/p/11936231.html" target="_blank" rel="noopener">参考：koa2中的ctx是什么？</a></p><h3 id="koa2中-query-和-querystring"><a href="#koa2中-query-和-querystring" class="headerlink" title="koa2中 query 和 querystring"></a>koa2中 query 和 querystring</h3><p>在 koa 中，GET请求获取请求数据request对象中的 query 方法和 querystring 方法， query方法返回的是格式化好的参数，querystring 方法返回的是请求字符串。</p><p><strong>koa2如何获取get方式的路由参数，比如xxx？name=123 获取name值</strong></p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">ctx.request.query</span><br><span class="line"><span class="comment">// =&gt; &#123;name: '123'&#125;</span></span><br><span class="line">ctx.query</span><br><span class="line"><span class="comment">// =&gt; &#123;name: '123'&#125;</span></span><br></pre></td></tr></table></figure><p><code>ctx.request</code>  是 <code>Koa</code> 请求对象。可以通过 <code>querystring</code>  获取请求路径中的 <code>query</code> 字符串，通过 <code>query</code> 获取格式化好的参数。<br><code>ctx.query</code> 是 <code>route.query</code> 的别名。</p><p><a href="https://www.jianshu.com/p/a37fd499f0c1" target="_blank" rel="noopener">阅读过：nuxt - nuxtServerInit &amp; 页面渲染前的store处理 &amp; context</a></p><h3 id="koa2-使用passport权限认证中间件"><a href="#koa2-使用passport权限认证中间件" class="headerlink" title="koa2 使用passport权限认证中间件"></a>koa2 使用passport权限认证中间件</h3><p><a href="https://segmentfault.com/a/1190000011557953" target="_blank" rel="noopener">参考：koa2 使用passport权限认证中间件</a></p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p><a href="http://www.imooc.com/wenda/detail/591712" target="_blank" rel="noopener">更多内容参考：了解护照序列化反序列化</a></p><p>故名思议就是将结构化的对象转换为字节序列，反之就叫做反序列化。</p><p><strong>为什么要序列化和反序列化？</strong></p><p>内存当中的对象是结构化的，当你需要将这个对象在网络当中传输的时候，或者要保存到文件或者数据库当中的时候，你就需要将它序列化成字节流，便于处理。</p><p>而反过来，传输过去之后，或者从文件和数据库里读取出来的时候，又要重新构建恢复出原来的对象。</p><p>类比就是，比如我们打电话，电线不能直接传声音，需要把声音转换为电流，过去再把电流转换为声音。</p><h3 id="为什么utils-axios-js-要创建一个实例"><a href="#为什么utils-axios-js-要创建一个实例" class="headerlink" title="为什么utils/axios.js 要创建一个实例"></a>为什么utils/axios.js 要创建一个实例</h3><p>以下内容参考： <a href="https://zh.nuxtjs.org/guide/async-data" target="_blank" rel="noopener">nuxt.js 官方中文文档</a></p><p>如果您的项目中直接使用了 <code>node_modules</code> 中的 <code>axios</code> ，并且使用 <code>axios.interceptors</code> 添加拦截器对请求或响应数据进行了处理，确保使用 <code>axios.create</code> 创建实例后再使用。否则多次刷新页面请求服务器，服务端渲染会重复添加拦截器，导致数据处理错误。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">import axios from 'axios'</span><br><span class="line"><span class="keyword">const</span> myaxios = axios.create(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line">myaxios.interceptors.response.use(function (response) &#123;</span><br><span class="line">  <span class="keyword">return</span> response.data</span><br><span class="line">&#125;, function (error) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><hr/><p><font color="Tomato"><strong>如若本文有瑕疵需修改的地方，请提出来，谢谢您的贡献！</strong></font></p><p><font color=chocolate>欢迎关注微信公众号：小狮子前端Vue</font></p><p>谢谢您的支持！✿✿ヽ(°▽°)ノ✿</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 美团 </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【再也不怕面试官要你手写排序算法】一文详细解读前后端之各种排序算法</title>
      <link href="/posts/61237/"/>
      <url>/posts/61237/</url>
      
        <content type="html"><![CDATA[<h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><div>1.依次比较相邻的两个数，如果第一个比第二个小，不变。如果第一个比第二个大，调换顺序。一轮下来，最后一个是最大的数</div><div>2.对除了最后一个之外的数重复第一步，直到只剩一个数</div></blockquote><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331111904150.png#pic_center"  alt=""></p><h3 id="算法实现（JS代码）"><a href="#算法实现（JS代码）" class="headerlink" title="算法实现（JS代码）"></a>算法实现（JS代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len=arr.length;</span><br><span class="line">            <span class="keyword">var</span> i,j;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) <span class="comment">//两两之间进行比较</span></span><br><span class="line">                        swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> tmp=arr[i];</span><br><span class="line">            arr[i]=arr[j];</span><br><span class="line">            arr[j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果1"><a href="#执行结果1" class="headerlink" title="执行结果1"></a>执行结果1</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331112633479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="算法实现（C-代码）"><a href="#算法实现（C-代码）" class="headerlink" title="算法实现（C++代码）"></a>算法实现（C++代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int a[maxn],n;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">                swap(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果2"><a href="#执行结果2" class="headerlink" title="执行结果2"></a>执行结果2</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331202505962.png"  alt=""></p><h2 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h2><h3 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><div>1.找出最小的数，和第一个交换位置</div><div>2.在剩下的数中，找出最二小的数，放在第二个</div><div>3.依次类推，排出顺序</div></blockquote><h3 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331113054561.png#pic_center"  alt=""></p><h3 id="算法实现（JS代码）-1"><a href="#算法实现（JS代码）-1" class="headerlink" title="算法实现（JS代码）"></a>算法实现（JS代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len=arr.length;</span><br><span class="line">            <span class="keyword">var</span> i,j,xmin;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                xmin=i;   <span class="comment">//将当前值设为最小值</span></span><br><span class="line">                <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]&lt;arr[xmin])</span><br><span class="line">                        xmin=j;  <span class="comment">//在后面找到更小的值</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i!=xmin)</span><br><span class="line">                    swap(arr,i,xmin) <span class="comment">//将找到的更小值进行交换</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> tmp=arr[i];</span><br><span class="line">            arr[i]=arr[j];</span><br><span class="line">            arr[j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">        selectionSort(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果1-1"><a href="#执行结果1-1" class="headerlink" title="执行结果1"></a>执行结果1</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331114113439.png"  alt=""></p><h3 id="算法实现（C-代码）-1"><a href="#算法实现（C-代码）-1" class="headerlink" title="算法实现（C++代码）"></a>算法实现（C++代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int a[maxn],n;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        int xmin=i;</span><br><span class="line">        <span class="keyword">for</span>(int j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[xmin]) xmin=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(xmin!=i) swap(a[xmin],a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果2-1"><a href="#执行结果2-1" class="headerlink" title="执行结果2"></a>执行结果2</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331202505962.png"  alt=""></p><h2 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h2><h3 id="基本思路-2"><a href="#基本思路-2" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><div>1.把数组分为[已排序]和[未排序]两部分,第一个数为[已排序]，其余为[未排序]</div><div>2.从[未排序]抽出第一个数，和[已排序]部分比较，插入到合适的位置</div></blockquote><h3 id="图示-2"><a href="#图示-2" class="headerlink" title="图示"></a>图示</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331115752579.png#pic_center"  alt=""></p><h3 id="算法实现（Js代码）"><a href="#算法实现（Js代码）" class="headerlink" title="算法实现（Js代码）"></a>算法实现（Js代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len=arr.length;</span><br><span class="line">            <span class="keyword">var</span> i,j,val;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                val=arr[i];</span><br><span class="line">                <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]&lt;val) <span class="keyword">break</span>; <span class="comment">//找到可以放的位置即跳出</span></span><br><span class="line">                    arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j+<span class="number">1</span>]=val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">        insertSort(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果1-2"><a href="#执行结果1-2" class="headerlink" title="执行结果1"></a>执行结果1</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331114113439.png"  alt=""></p><h3 id="算法实现（C-代码）-2"><a href="#算法实现（C-代码）-2" class="headerlink" title="算法实现（C++代码）"></a>算法实现（C++代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int a[maxn],n;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        int val=a[i],j;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;val) <span class="keyword">break</span>;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>]=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果2-2"><a href="#执行结果2-2" class="headerlink" title="执行结果2"></a>执行结果2</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331202505962.png"  alt=""></p><h2 id="4、归并排序-分而治之"><a href="#4、归并排序-分而治之" class="headerlink" title="4、归并排序(分而治之)"></a>4、归并排序(分而治之)</h2><h3 id="基本思路-3"><a href="#基本思路-3" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><div>1.不断将数组对半分，直到每个数组只有一个</div><div>2.将分出来的部分重新合并</div><div>3.合并的时候按顺序排列</div></blockquote><h3 id="图示-3"><a href="#图示-3" class="headerlink" title="图示"></a>图示</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331131808651.png#pic_center"  alt=""></p><h3 id="算法实现（JS代码）-2"><a href="#算法实现（JS代码）-2" class="headerlink" title="算法实现（JS代码）"></a>算法实现（JS代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> res=[],</span><br><span class="line">                i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//合并两个数组（按照从小到大的顺序）</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;left.length&amp;&amp;j&lt;right.length)&#123;</span><br><span class="line">                <span class="keyword">if</span>(left[i]&lt;right[j])&#123;</span><br><span class="line">                    res.push(left[i++]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res.push(right[j++]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//数组拼接</span></span><br><span class="line">            <span class="keyword">return</span> res.concat(left.slice(i)).concat(right.slice(j));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len=arr.length;</span><br><span class="line">            <span class="keyword">var</span> i,j;</span><br><span class="line">            <span class="comment">//不断拆分至只有一个数</span></span><br><span class="line">            <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">            <span class="keyword">var</span> mid=<span class="built_in">Math</span>.floor(len/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">var</span> left=arr.slice(<span class="number">0</span>,mid),</span><br><span class="line">                right=arr.slice(mid);</span><br><span class="line">            <span class="keyword">return</span> merge(mergeSort(left),mergeSort(right));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">        arr=mergeSort(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果1-3"><a href="#执行结果1-3" class="headerlink" title="执行结果1"></a>执行结果1</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331114113439.png"  alt=""></p><h3 id="算法实现（C-代码）-3"><a href="#算法实现（C-代码）-3" class="headerlink" title="算法实现（C++代码）"></a>算法实现（C++代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int a[maxn],n;</span><br><span class="line"><span class="keyword">void</span> mergeArray(int le,int mid,int re)&#123;</span><br><span class="line">    int len=re-le+<span class="number">1</span>;</span><br><span class="line">    int * tmp=<span class="keyword">new</span> int[len];</span><br><span class="line">    int cnt=<span class="number">0</span>;</span><br><span class="line">    int i=le,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=re)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j]) tmp[cnt++]=a[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[cnt++]=a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) tmp[cnt++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=re) tmp[cnt++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;len;j++) a[le+j]=tmp[j];</span><br><span class="line">    <span class="keyword">delete</span> [] tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> mergeSort(int le,int re)&#123;</span><br><span class="line">    <span class="keyword">if</span>(le&lt;re)&#123;</span><br><span class="line">        int mid=(le+re)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(le,mid);</span><br><span class="line">        mergeSort(mid+<span class="number">1</span>,re);</span><br><span class="line">        mergeArray(le,mid,re);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    mergeSort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果2-3"><a href="#执行结果2-3" class="headerlink" title="执行结果2"></a>执行结果2</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331202505962.png"  alt=""></p><h2 id="5、快速排序"><a href="#5、快速排序" class="headerlink" title="5、快速排序"></a>5、快速排序</h2><h3 id="基本思路-4"><a href="#基本思路-4" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><div>1.以一个数为基准(中间的数)，比基准小的放到左边，比基准大的放到右边</div><div>2.再按此方法对这两部分数据分别进行快速排序（递归进行）</div><div>3.不能再分后退出递归，并重新将数组合并</div></blockquote><h3 id="图示-4"><a href="#图示-4" class="headerlink" title="图示"></a>图示</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331140023958.png#pic_center"  alt=""></p><h3 id="算法实现（JS代码）-3"><a href="#算法实现（JS代码）-3" class="headerlink" title="算法实现（JS代码）"></a>算法实现（JS代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr,p,q</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = p;</span><br><span class="line">            <span class="keyword">var</span> x= arr[p];</span><br><span class="line">            <span class="keyword">var</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=p+<span class="number">1</span>;j&lt;=q;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&lt;=x)&#123;</span><br><span class="line">                    ++i;</span><br><span class="line">                    swap(arr,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr,i,p);</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">//返回划分中间位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr,p,q</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p&lt;q)&#123;</span><br><span class="line">                <span class="keyword">var</span> k = partition(arr,p,q);  <span class="comment">//确定划分中间位置</span></span><br><span class="line">                quickSort(arr,p,k<span class="number">-1</span>);   <span class="comment">//对左边部分进行递归</span></span><br><span class="line">                quickSort(arr,k+<span class="number">1</span>,q);   <span class="comment">//对右边部分进行递归</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> tmp=arr[i];</span><br><span class="line">            arr[i]=arr[j];</span><br><span class="line">            arr[j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果1-4"><a href="#执行结果1-4" class="headerlink" title="执行结果1"></a>执行结果1</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331114113439.png"  alt=""></p><h3 id="算法实现（C-代码）-4"><a href="#算法实现（C-代码）-4" class="headerlink" title="算法实现（C++代码）"></a>算法实现（C++代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int a[maxn],n;</span><br><span class="line">int quick_partition(int p,int q)&#123;</span><br><span class="line">    int i=p;</span><br><span class="line">    int x=a[p];</span><br><span class="line">    <span class="keyword">for</span>(int j=p+<span class="number">1</span>;j&lt;=q;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j]&lt;=x)&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            swap(a[i],a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[i],a[p]);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> quick_sort(int p,int q)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;q)&#123;</span><br><span class="line">        int k=quick_partition(p,q);</span><br><span class="line">        quick_sort(p,k<span class="number">-1</span>);</span><br><span class="line">        quick_sort(k+<span class="number">1</span>,q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    quick_sort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果2-4"><a href="#执行结果2-4" class="headerlink" title="执行结果2"></a>执行结果2</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331202505962.png"  alt=""></p><h2 id="6、随机化快速排序"><a href="#6、随机化快速排序" class="headerlink" title="6、随机化快速排序"></a>6、随机化快速排序</h2><h3 id="基本思路-5"><a href="#基本思路-5" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><div>随机化快速排序只是在快排基础上将主元通过随机函数选取一下了。</div></blockquote><p><strong>关于js中随机产生【n , m】随机数实例：</strong></p><p>在本例中，我们将取得介于 1 到 10 之间的一个随机数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random()*<span class="number">10</span>)+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p>5</p><h3 id="算法实现（Js代码）-1"><a href="#算法实现（Js代码）-1" class="headerlink" title="算法实现（Js代码）"></a>算法实现（Js代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//随机选取主元</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">randk</span>(<span class="params">arr,p,q</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> k = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*q+p);</span><br><span class="line">            swap(arr,p,k);</span><br><span class="line">            <span class="keyword">return</span> partition(arr,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr,p,q</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = p;</span><br><span class="line">            <span class="keyword">var</span> x= arr[p];</span><br><span class="line">            <span class="keyword">var</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=p+<span class="number">1</span>;j&lt;=q;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&lt;=x)&#123;</span><br><span class="line">                    ++i;</span><br><span class="line">                    swap(arr,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr,i,p);</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">//返回划分中间位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr,p,q</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p&lt;q)&#123;</span><br><span class="line">                <span class="keyword">var</span> k = randk(arr,p,q);  <span class="comment">//确定划分中间位置</span></span><br><span class="line">                quickSort(arr,p,k<span class="number">-1</span>);   <span class="comment">//对左边部分进行递归</span></span><br><span class="line">                quickSort(arr,k+<span class="number">1</span>,q);   <span class="comment">//对右边部分进行递归</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> tmp=arr[i];</span><br><span class="line">            arr[i]=arr[j];</span><br><span class="line">            arr[j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果1-5"><a href="#执行结果1-5" class="headerlink" title="执行结果1"></a>执行结果1</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331114113439.png"  alt=""></p><h3 id="算法实现（C-代码）-5"><a href="#算法实现（C-代码）-5" class="headerlink" title="算法实现（C++代码）"></a>算法实现（C++代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int a[maxn],n;</span><br><span class="line">int quick_partition(int p,int q)&#123;</span><br><span class="line">    int i=p;</span><br><span class="line">    int x=a[p];</span><br><span class="line">    <span class="keyword">for</span>(int j=p+<span class="number">1</span>;j&lt;=q;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j]&lt;=x)&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            swap(a[i],a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[i],a[p]);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">int rand(int p,int q)&#123;</span><br><span class="line">    int k=rand()%(q-p+<span class="number">1</span>)+p;</span><br><span class="line">    swap(a[k],a[p]);</span><br><span class="line">    <span class="keyword">return</span> quick_partition(p,q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> qsort(int p,int q)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;q)&#123;</span><br><span class="line">        int k=rand(p,q);</span><br><span class="line">        qsort(p,k<span class="number">-1</span>);</span><br><span class="line">        qsort(k+<span class="number">1</span>,q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    qsort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果2-5"><a href="#执行结果2-5" class="headerlink" title="执行结果2"></a>执行结果2</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200331202505962.png"  alt=""></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><font color="Tomato"><strong>如若本文有瑕疵需修改的地方，请提出来，谢谢您的贡献！</strong></font></p><p><font color=chocolate>欢迎关注微信公众号：小狮子前端Vue</font></p><p>谢谢您的支持！✿✿ヽ(°▽°)ノ✿</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我的大学ACM江湖</title>
      <link href="/posts/24659/"/>
      <url>/posts/24659/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>大二下学期正式入ACM，大家一看这时间就知道算是挺晚的了，因为我大一比较迷茫，没有在大学加过任何部门，学习也提不上什么劲，大二上开始有了自己的想法，在班上成功竞选上了学习委员，然后我越发积极，在大二上的寒假假期独自在家刷题，目的就是为了蓝桥杯，初赛挺适合新手锻炼的，刷题目的就是为了学校的选拔赛，争取名额，后面当然得到了名额，最后在比赛也取得了省二的成绩，这让我无比激动，原来付出真的有回报，从此我的ACM生涯就开始了！</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/100115006" target="_blank" rel="noopener">推荐阅读这篇文章——2019年（第15届）湖南省大学生计算机程序设计竞赛之【赛前动员暨暑假集训总结】</a></p><h2 id="心得与体会"><a href="#心得与体会" class="headerlink" title="心得与体会"></a>心得与体会</h2><p>==2020年2月27日更新==</p><p>我把原来的分享模板标题给改了，改成了“关于我的大学ACM江湖”，想着我的这篇文章应该是以分享心得与体会为主，而不是为了因模板来骗访问量的，疫情目前算是有待控制了，开学应该不远了，2月24日决定了还是退役了，大三下要准备实习方面的事情了，感叹大学时间过得很快，不过也过得挺充实的，我的实习方向是前端开发工程师，acm之路结束了，后续的大多数文章会与前端方面有关的，主要还是Vuejs。</p><p>最近呢，也还在准备深信服前端面试工作，今天整理了一部分面试题。</p><p>放心，当我整理完毕后会分享出来的，会放在下面这个专栏里，不妨关注一下这个专栏，里面也还是有一些个人觉得还不错的文章！</p><p><a href="https://blog.csdn.net/weixin_42429718/category_9656024.html" target="_blank" rel="noopener">Vue专栏❤</a></p><p>说在最后，<strong><font color=red>愿在努力的你能拿到offer</font></strong>！</p><hr/><p>有的时候，感觉自己刷题刷不动的时候，我就会看一看大神关于退役的总结，没想到今天自己也会来总结了，我就简单和大家聊一聊ACM把<br>走上ACM，就像一个表情包所说，本就是逆天而行，<strong><font color=red>很多人走着走着就放弃了，打不动了，学习到了瓶颈期，其实并不是ACM他们会放弃，做其他的也依旧会放弃。</font></strong> 我曾经问过打过ACM然后放弃的一位学长，因为当时我也在考虑自己是继续打下去还是放弃乖乖增加项目经验，他说<strong>打ACM对找工作其实没有很多帮助，因为对于普通学校来说，或者对于普通人来说，想要拿到那种区域赛的奖是有一定难度的，真正有帮助的还是去实践增加项目经验，后面补了一句当初有点后悔自己去打acm，花费了很多时间在这上面，把这些时间利用起来做项目的话可能现在更好。</strong> 后面又和学长聊了聊工作方面的事情，我原本有点消极的感受立马消散了，后感谢了学长和我交谈。</p><hr><p>请读者海纳百川有容乃大，或许这就是广大acm同胞放弃的观念把，这里，我先表明我自己的观点。<strong><font color=red>打ACM绝对不是一件让我后悔的事情，如果自己喜欢的事情都会做的后悔，那做其他事还有什么意义！</font></strong> 正是因为接触了ACM，我的学习状态一直保持了下去，养成了一个积极好学的习惯，尽管每一周都会因为一个题目弄的自闭，但是成长的过程本身就是这样，不吃点苦哪能感受甜的味道；正是因为接触了ACM，我才坚持去写CSDN博客，才有了现在这样的成就；正是因为接触了ACM，算综测的时候我不再是拿不出东西，我能拿出一点比赛的证书为自己加分；正是因为接触了ACM,我才会为了拿到学校奖学金而拼搏，而奋斗！</p><p>对于计算机专业来说，我想ACM是必经之路，走上ACM道路不代表你就一定能拿奖，也不代表你就一定要去比赛，我们去公司笔试很多都是与这方面有关，而且有些公司还会强调要有一定ACM基础，可看重要程度！<br>当然，能够拿奖是走上ACM道路的一个目标，也是一份荣誉！</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/103052899" target="_blank" rel="noopener">推荐阅读这篇博客——第四届全国中医药院校大学生程序设计竞赛【河南-郑州之旅】暨FPX夺冠&amp;湖南中医药大学夺冠！（上篇）——记录美好的时光！</a></p><p>谈了ACM，也谈了大众观念，也谈了自己的态度，那段时光只有经历的人会有共同的感受，<strong><font color=red> 希望看到这篇文章的你有着“科比”精神，对于自己喜欢、热爱的事情坚持下去，如果连自己喜欢的事情都做不好，坚持不下去，还谈什么增加项目经验，人生不就是为了自己热爱喜欢的东西而拼搏么？跌倒了一次又一次爬起来，继续走下去… </font></strong></p><h2 id="分享模板"><a href="#分享模板" class="headerlink" title="分享模板"></a>分享模板</h2><p>下面就是我整理的ACM模板了，总共429页，但是大小也就1MB多点，想来想去，还是分享出去吧，自己退役了，想着模板还能继续发挥它的作用，也是件不错的事情，那么我就将我的“武器”授予给你们了，好好使用~<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020012710292183.png"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020012710273520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>链接：<a href="https://pan.baidu.com/s/15SonnPLAqKIr96ZwxRi1AQ" target="_blank" rel="noopener">https://pan.baidu.com/s/15SonnPLAqKIr96ZwxRi1AQ</a><br>提取码：klw3 </p><p><font color=chocolate>PS：如果你觉得本模板不错的话，欢迎打赏一下，原则上免费自取，但是也仅需1元打赏就好了，我想知道我的模版是否够好，如果不够好的话，我再更新一下~</p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200127113159877.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  width=55%><hr><p><font size=4>  ==2020年2月7日更新== ，想不到还真有打赏给我的啦，点赞数也挺多的，谢谢各位的支持！</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【长文总结】2020 从零到博客专家  过去的我，现在的我，将来的我</title>
      <link href="/posts/37335/"/>
      <url>/posts/37335/</url>
      
        <content type="html"><![CDATA[<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><hr/><p>其实对于2020年我一直想写一篇长文总结的，从2020年开始到现在已经过去了3个月了，这3个月期间我看了许多篇别人对于2019的总结以及对2020年自己的新打算。我的灵感一直都挺多的，如果写一篇对于2019的总结的话，我自己觉得好像说来说去只能说点心灵鸡汤来激励自己2020年继续加油努力，想着也没有一件可以用时间线的形式来说的事情，2019年或许感受颇多的就是对于ACM方面，我已经写了一篇总结了，继续写也没有什么新的思绪在这里面了。</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104091170" target="_blank" rel="noopener">推荐阅读：关于我的大学ACM江湖</a></p><p>我在这里整理了一份目录，读者可以选择性去阅读，也方便自己将来进行查阅，回忆过去大学里的点点滴滴。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313140803866.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>@[toc]</p><h3 id="我开始写博客的原因"><a href="#我开始写博客的原因" class="headerlink" title="我开始写博客的原因"></a>我开始写博客的原因</h3><hr/><ul><li>受老师的影响</li></ul><p>这里主要是大一期间，入大学的开学典礼，给我们宣传acm的学长学姐，多次提到了一位老师——伟帅（貌似名字在这里属于关键字，无法引用，就用学长学姐们常说的伟帅好了）。那时候老师提到了有一个自己的博客，坚持写博客受益终身，我就好奇搜了搜他的博客，看到内容后，我当时就惊呆了，老师都出了好多书了…</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031312325513.png"  alt=""><br><a href="https://blog.csdn.net/LoveLion" target="_blank" rel="noopener">访问伟帅の博客</a></p><p>另外就是大学里班主任的影响，在一次班会提及过的，大概意思就是一位学长，原本迷茫不止，后来终于醒悟，去网上自学，不懂的就去找博客，然后不断写博客，最后成功的例子。虽然不记得原话了，但是当时听完后我自己的总结依旧还记得：写博客，坚持写，走向成功！ 于是我就注册了一个csdn博客，从下面归档可以看到，我当初应该就是2018年10月份开始使用csdn，当初写了了一篇博客后，就断更了。当初就是觉得自己挺迷茫的，没啥方向，听了班会课后，打了一次鸡血，就兴奋地写了一篇自己的博客，但是激情还是抵挡不住自己的懒惰，于是断更了几个月。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313123904523.png"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313124031751.png"  alt=""></p><ul><li>见证自己成长的记录</li></ul><p>从上文归档那里，可以看到，2019年2月份我的博客开始写的挺多的了，那时候绝大多数文章都是关于算法的文章，因为当初报名参加了蓝桥杯大学生程序设计竞赛（省赛），当初校内选拔拿到了去正式比赛的名额，于是那个寒假我就专注于刷题。但是题可能会遗忘，于是我又想到了csdn，将题目和题解思路全部记录上去，这样我以后也可以翻阅，总结自己的知识点以及存题。<font color=red>就在这时，我就养成了坚持写博客的好习惯！</font><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313124704387.png"  alt=""><br>从归档即可知道，从2019年2月份开始，我每个月都会写博客，写博客已经是我的习惯了。</p><ul><li>积累知识点</li></ul><p>从一开始我只是把博客当做自己刷题的记录，到现在，我将它作为知识的记录，俗话说：“好记性不如烂笔头”！作为程序员来说，学习的知识多的同时也挺杂，如果没有一个记录，很容易遗忘，所以写在博客里，可以用来及时复习查阅，我想这应该是大部分程序员都会想到的事情。</p><ul><li>学会分享</li></ul><p>我这么坚持去写博客，也是来源于当初看到了一些优秀的博客。当初一个bug找不到，或者说一个题不会写，去网上搜，我才知道别人讲的是如此之好，讲的特别清楚，真正站在编程小白角度上去写的博客。真的从这些优秀的人上学习到了爱分享精神，自此，我也将我平常遇到的bug和一些难题都写的挺详细的，然后更加注意自己的排版与格式，端正好的态度去写好每一篇博客。</p><ul><li>增加影响力</li></ul><p>或许有些人会问，你这么坚持写博客，你图什么？我从网上一搜遍地都是相关文章，一样可以解决自己的问题，反而会花大量的时间去书写一篇博客。但是，你却忽视了写博客带来的好处，花时间是必须承认的事情，但你可以增加你在行业里的影响力，比如你在csdn写博客，能有排名，能有活跃度，能有粉丝数量，甚至你的博客足够优秀，你能获得“<code>博客专家</code>”的荣誉称号！这也是为什么我今天才开始写这篇总结博客的原因。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313130750400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>另外，你去找工作，找实习，拥有一个个人博客也是加分项，我曾经阅读过关于找工作的一篇博文，内容就是面试笔试不是特别理想，就因为看到了他的优秀博客，公司认为他只是遗忘了许多只是，要捡起来也是挺容易的，最终还是选择给了他offer！真是受益颇多。</p><ul><li>积累名气</li></ul><p>名气高了，自然会有一些出版社看到你，找你写书，这是真的！我曾经遇到了两次出版社和我联系，还有一个就是慕课想找我写专栏，询问我研究领域与方向，但是因为学生阶段，时间还是不够，还是要加强学习，也很明白现在能力还是不够。</p><ul><li>个人追求</li></ul><p>在学校里，有打acm特别强的学长学姐，有拿到特别高薪水offer的学长学姐，有本科毕业即进腾讯的优秀学长学姐，有获得保研资格的，有拿过无数证书，奖金的等，他们都很优秀，以致于在学校里声望挺高的，可算是耳濡目染吧，我在大学就想过，我也想提升自己的影响力。我发现好像有一个博客方面的名额，我想通过写博客成为一定影响力的人，不仅是在学校，更是在行业内。现在发现，我算是成功了一点，越来越多的人访问我的博客，我的粉丝也逐渐增多，说明我还在进步！</p><h3 id="我成为博客专家的路程"><a href="#我成为博客专家的路程" class="headerlink" title="我成为博客专家的路程"></a>我成为博客专家的路程</h3><hr/><p>如下图，我在2019年9月27日第一次提交了对于博客专家的申请，那时候才知道有这种称号获取，显然，当时博客没什么影响力，内容都是比较基础的，第一次申请未能通过。狮子座的我当然不会放弃自己的追求，我将成为博客专家定为在csdn的一个目标，立志要获得这份荣誉。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031311380142.png"  alt=""><br>原本以为自己是中奖绝缘体，但是在2020年好像运气来了，我在csdn中了第一份奖品：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313113915501.png"  alt=""></p><p>然后在1月份去申请了博客之星，也是很幸运地晋级到了前200名，获得了“博客之星入围”的荣誉称号。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313113930548.png"  alt=""><br>其次，在今年春节，也是挺幸运中了唯一一个的一等奖<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313132407848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>在2020年2月14日，我又再次去申请，因为缺乏有深度的技术文章而没有通过，可我依旧没有放弃对这份荣誉的追求，我选择沉静下来，好好去学习，研究一些深度一点的问题。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031311401073.png"  alt=""><br>终究是<font color=red>越努力，越幸运！</font>我的文章，开始被看重，被推荐。随着我写的文章越来越多，我的访问量也是飙升，粉丝数每天都有在涨，从原本1月份刚突破100个，但现在快突破600了，而且我的总排名从最初20多万+到现在3000名左右了。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031311405155.png"  alt="">)<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313122232402.png"  alt=""></p><h3 id="大学里的感情经历"><a href="#大学里的感情经历" class="headerlink" title="大学里的感情经历"></a>大学里的感情经历</h3><hr/><p>常说，大学里不拿一次奖学金，不挂一次科，不谈一次恋爱是不完美的。有些同学还为此改过网名，比如四级不过不改名，六级不过不改名，不拿一次奖学金不改名，我也想要甜甜的恋爱等等等等。这里我就不谈两面的观点了，我就简单提一提吧，常说拿奖学金我拿到了，挂科我也挂过一次，59分你体会过嘛？感情经历如果算拥有过的话有三次，不算的话那就是四次，当然，现在也没有拥有了，或许是缘分未到吧，正如一句话说：<font color=chocolate>“你的生命中有没有过这样一个人，或许已经从你的生活圈淡去，但却在你的点点滴滴留下余味…”</font> 错过了或许不会再来，但是能让你成长，后续我就不多细说了，欢迎读者交流</p><h3 id="将来的我"><a href="#将来的我" class="headerlink" title="将来的我"></a>将来的我</h3><hr/><p>关于这个，其实是说不好的，人生路漫漫，谁也想不到会有啥变化，我大学老师也和我们讲过，现在的一些想法其实也并不是特别成熟，并不会决定你的一生。老师当初也没有想到自己会去教一门原本不喜欢的课程，更没想过自己会当上一名老师，一名园丁。</p><p>但是，我就提及一下自己的想法把，写给未来的自己的。我主攻前端开发嘛，我喜欢探索知识，每做一门成绩出来，我就特别有成就感。而且通过写了这么两年博客，我对教育方面也是感受颇深，犹记得今年的职业规划班会上，关于兴趣岛那个小游戏，我选择了S岛，因为看重了教育方面，素质应该是比较高的，我喜欢<code>活在当下</code>的感觉。另外，对于我们程序员来说，其实干到30多岁就已经算是老程序员了，现在互联网发展迅速，知识也是变化特别快，可能今天学的，明天就过时了，到了不得不服老的年龄时，也许就是离开职场的时候了吧。</p><p>我也看了许多关于裁员的文章，其中提及到的就是关于程序员的副业，我想着会宣传教育，比如去b站当一个up主，分享自己的技术，去教育一批人，也算是有一定的影响力。</p><p>差不多就是往自媒体方面，又或者说去当讲师，去培训机构等等，反正是与教育相关。因为我觉得当程序员，尤其是往研发这一条不归路走的人，在语言方面会有一定弱化，每天都是与代码沟通，与人打交道机会可能没那么多，老师说过真正能干大事的还是学会与人打交道。所以呢，我尽管喜欢探索计算机领域，但是我更想让自己综合一点能力。</p><p>其实说白了，就是每天开心就好，做着自己想做的事情，乐此不疲，不再因为一些事情给自己压力，让自己过多的焦虑。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><hr><p>还是整一个心灵鸡汤：</p><p>与其热闹的引人夺目，<br>步步紧逼，<br>不如逐步做一个人群之中真实沉静的人，<br>不张扬，不虚饰，<br>随时保持后退的位，<br>心有所定，<br>淡泊安静，<br>专注做事</p><p>最后，这篇总结到此就结束啦，可能会有写的不是很好的地方，欢迎指正，这里是超逸の博客，不是只会写业务代码的前端开发工程师！</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313140728784.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15个前端攻城狮必备的学习网站 | 你知道几个？（附视频介绍）</title>
      <link href="/posts/50975/"/>
      <url>/posts/50975/</url>
      
        <content type="html"><![CDATA[<h2 id="前端开发所需掌握知识点概要"><a href="#前端开发所需掌握知识点概要" class="headerlink" title="前端开发所需掌握知识点概要"></a>前端开发所需掌握知识点概要</h2><ul><li><p>HTML&amp;CSS：</p><p>  对Web标准的理解（结构、表现、行为）、浏览器内核、渲染原理、依赖管理、兼容性、CSS语法、层次关系，常用属性、布局、选择器、权重、盒模型、Hack、CSS预处理器、<br>  CSS3、Flexbox、CSS Modules、Document flow、BFC、HTML5（离线 &amp; 存储、Histoy,多媒体、WebGL\SVG\Canvas）；        </p></li><li><p>JavaScript：</p><p>  数据类型、运算、对象、Function、继承、闭包、作用域、事件、Prototype、RegExp、JSON、Ajax、DOM、BOM、<br>  内存泄漏、跨域、异步请求、模板引擎、模块化、Flux、同构、算法、ECMAScript6、Nodejs、HTTP、</p></li><li><p>其他：</p><p>  主流MVVM框架(React\Vue\Angular)、Hybrid App\React Native\Weex、TypeScript、RESTFul、WEB安全、前端工程化、依赖管理、性能优化、<br>  重构、团队协作、可维护、易用性、SEO、UED、前端技术选型、快速学习能力等；</p></li></ul><h2 id="视频介绍"><a href="#视频介绍" class="headerlink" title="视频介绍"></a>视频介绍</h2><p><a href="https://www.bilibili.com/video/BV1mk4y1d7Vm" target="_blank" rel="noopener">视频传送门~</a></p><h2 id="前端学习网站推荐"><a href="#前端学习网站推荐" class="headerlink" title="前端学习网站推荐"></a>前端学习网站推荐</h2><p>以下排名不分先后</p><ul><li><p>OSCHINA：     <a href=" https://www.oschina.net/">https://www.oschina.net/</a>（中文开源技术交流社区）</p></li><li><p>九章算法：    <a href="https://www.jiuzhang.com/" target="_blank" rel="noopener"> https://www.jiuzhang.com/</a>（硅谷顶尖IT人员教授面试技巧）</p></li><li><p>LintCode：    <a href=" https://www.lintcode.com/"> https://www.lintcode.com/</a>（空前强大的在线刷题系统）</p></li></ul><ul><li><p>CSDN ：   <a href=" https://chocolate.blog.csdn.net/"> https://chocolate.blog.csdn.net/</a>（优秀的博客）</p></li><li><p>掘金： <a href="https://juejin.im/" target="_blank" rel="noopener">https://juejin.im/</a>（帮助开发者成长的社区）</p></li><li><p>开源社区_深度开源：<a href="https://www.open-open.com/" target="_blank" rel="noopener">https://www.open-open.com/</a>（一切开源）</p></li><li><p>慕课网：       <a href=" http://www.imooc.com/">http://www.imooc.com/</a>（程序员的梦工厂）</p></li><li><p>div.io：         <a href=" http://div.io">http://div.io</a>（高质量前端资源汇聚）</p></li><li><p>推酷： <a href="https://www.tuicool.com/" target="_blank" rel="noopener">https://www.tuicool.com/ </a> （IT人专属个性阅读社区）</p></li><li><p>Hacker News： <a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">https://news.ycombinator.com/news</a>（新闻）</p></li><li><p>InfoQ：       <a href=" https://www.infoq.cn/">https://www.infoq.cn/</a>（软件开发及领域知识传播-中文版）</p></li><li><p>w3cplus：    <a href=" http://www.w3cplus.com/"> http://www.w3cplus.com/</a>（国内前端行业的技术博客）</p></li><li><p>Stack Overflow： <a href=" http://stackoverflow.com/">http://stackoverflow.com/</a>（为开发人员提供支持）</p></li><li><p>w3school：    <a href=" http://www.w3school.com.cn/">http://www.w3school.com.cn/</a>（领先的 Web 技术教程 - 全部免费）</p></li><li><p>MDN：     <a href=" https://developer.mozilla.org/zh-CN/docs/Web/">https://developer.mozilla.org/zh-CN/docs/Web/</a>（Web 开发技术分享）</p></li></ul><h2 id="官方文档推荐"><a href="#官方文档推荐" class="headerlink" title="官方文档推荐"></a>官方文档推荐</h2><ul><li><a href="https://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html" target="_blank" rel="noopener">jQuery 基本原理</a></li><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门 作者：阮一峰</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="noopener">web前端开发参考手册系列之CSS参考手册</a></li><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">JavaScript 教程</a></li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>笔记分享：<a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">传送门</a></p><p>或者关注微信公众号：【小狮子前端Vue】 回复【笔记】即可获取礼包</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 网站推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 零基础到快速开发  Vue全家桶开发电商管理系统（Element-UI）【目录】</title>
      <link href="/posts/34924/"/>
      <url>/posts/34924/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>又是一个寒假，曾经一个学霸说过：<code>寒假是用来反超的！</code>，所以这个寒假来和我一起学习Vue把，我会把我做的全部整合在这一个目录当中，算是给自己一个学习记录，也方便读者进行查阅。我的项目其实在1月24日正好过除夕的那天完成了，大约是10天左右的时间，边记录边做项目，后面发现我这个专栏访问量达到了5w，还是有一点人气的，休息三天后，今晚打算来一个总结吧，见证一个从一个不认识Vue是什么的小白到如何快速开发的成长吧~</p><p><font color=red>项目源码我放在码云上保管了,具体地址如下，可进行二次开发:</font><br><a href="https://gitee.com/Chocolate666/vue_shop/tree/master" target="_blank" rel="noopener">https://gitee.com/Chocolate666/vue_shop/tree/master</a></p><h2 id="电商后台管理系统的技术选型"><a href="#电商后台管理系统的技术选型" class="headerlink" title="电商后台管理系统的技术选型"></a>电商后台管理系统的技术选型</h2><p>① 前端项目技术栈：</p><ul><li>Vue</li><li>Vue-router</li><li>Element-UI</li><li>Axios</li><li>Echarts</li></ul><p>② 后端项目</p><ul><li>Node.js</li><li>Express</li><li>Jwt</li><li>Mysql</li><li>Sequelize</li></ul><h2 id="快速入门篇"><a href="#快速入门篇" class="headerlink" title="快速入门篇"></a>快速入门篇</h2><blockquote><p>本篇主要是给刚入门Vue的来学习的，里面有一些简单实例，比如记事本，所处城市天气查询，音乐播放配mv等，同时还解决了学习时遇到的问题，学会下面的内容可以算是入门了</p></blockquote><ol><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103952917" target="_blank" rel="noopener">2020 零基础 Vue快速入门 Vue基础篇 【详细】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103957276" target="_blank" rel="noopener">2020 零基础 Vue快速入门 Vue指令 本地应用篇【整理】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103964103" target="_blank" rel="noopener">2020 零基础 Vue快速入门 教开发一个记事本（激发编程乐趣）【整理+源码】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103969483" target="_blank" rel="noopener">2020 零基础 Vue快速入门 Vue2.0使用ES6语法的箭头函数=&gt; 对this作用域的理解 【整理】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103969923" target="_blank" rel="noopener">2020 零基础 Vue快速入门 Vue项目中引入外部css以及js文件的方法 【整理】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103967761" target="_blank" rel="noopener">2020 零基础 Vue快速入门 网络应用 axios+Vue【整理】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103972240" target="_blank" rel="noopener">2020 零基础 Vue快速入门 教开发天气查询网页—天知道（激发编程乐趣）【整理+源码】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103974082" target="_blank" rel="noopener">2020 零基础 Vue综合应用 教开发音乐播放器—悦听（激发编程乐趣）【整理+源码】</a></li></ol><h2 id="电商管理系统开发（百科全书）"><a href="#电商管理系统开发（百科全书）" class="headerlink" title="电商管理系统开发（百科全书）"></a>电商管理系统开发（百科全书）</h2><ol><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103983409" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）项目概述篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103983723" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）项目初始化篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103990497" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）使用码云托管项目篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103995613" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）配置MySQL</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/103996682" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）登录退出功能实现</a></li><li><a  href="https://blog.csdn.net/weixin_42429718/article/details/104012018" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）主页布局开发</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104018448" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）用户列表开发</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104023786" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【添加用户】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104024379" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【修改用户】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104031033" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【删除用户】</a> </li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104031835" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【权限列表】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104033075" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【角色列表】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104044038" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【分配权限】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104044630" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）【分配角色】</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104045709" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）商品分类篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104056728" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）分类参数篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104063899" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）商品列表篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104077321" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）订单管理篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104078211" target="_blank" rel="noopener">2020 零基础到快速开发 Vue全家桶开发电商管理系统（Element-UI）数据统计篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104079409" target="_blank" rel="noopener">2020 Vue零基础 基于Element-UI开发 （全）项目优化与部署上线（npm，基于vue ui） 上篇</a></li><li><a href="https://blog.csdn.net/weixin_42429718/article/details/104079909" target="_blank" rel="noopener">2020 Vue零基础 基于Element-UI开发 （全）项目优化与部署上线（npm，基于vue ui） 下篇</a></li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><hr><p><strong><font color=DeepPink>最后，看完本篇博客后，觉得挺有帮助的话，可以继续查看专栏其它内容嗷，一起来学习Vue吧~</font></strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020011511203890.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h4 id="点击进入Vue❤学习专栏"><a href="#点击进入Vue❤学习专栏" class="headerlink" title=" 点击进入Vue❤学习专栏~"></a><a href="https://blog.csdn.net/weixin_42429718/category_9656024.html" target="_blank" rel="noopener"> 点击进入Vue❤学习专栏~</a></h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Element-UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNUCM Contest1088 - 2020年春季ACM集训队热身赛-第2场</title>
      <link href="/posts/48363/"/>
      <url>/posts/48363/</url>
      
        <content type="html"><![CDATA[<h2 id="Contest1088-2020年春季ACM集训队热身赛-第2场"><a href="#Contest1088-2020年春季ACM集训队热身赛-第2场" class="headerlink" title="Contest1088 - 2020年春季ACM集训队热身赛-第2场"></a>Contest1088 - 2020年春季ACM集训队热身赛-第2场</h2><p><strong><font color=chocolate>比赛原地址：</font></strong> <a href="http://acm.hnucm.edu.cn/JudgeOnline/contest.php?cid=1088" target="_blank" rel="noopener">传送门</a></p><h2 id="问题-A-河畔军训"><a href="#问题-A-河畔军训" class="headerlink" title="问题 A: 河畔军训"></a>问题 A: 河畔军训</h2><p><strong>题目描述</strong></p><p>河畔镇是一个景色秀丽，气候宜人的度假胜地，每天都会有很多的游客来这里游玩。但奇怪的是这里总会出现一些潜伏者。果不其然，通过保卫者的跟踪，发现在河畔镇的地下隐藏着Blitz的秘密武器实验室。最危险的地方也是最安全的地方，这里人多，所以只能采用狙击作战，一场“无声无息“的战斗即刻打响。<br>每到周末小z，小y便开始在河畔军训小h(当然有时也会被反军训)。<br>不过他们军训采用刀战(即相遇时才可军训)<br>每当小z，小y，小h三人在河畔整相遇时，小z和小y便可军训小h<br>由于小h有兔耳朵buff加成，小h每秒最多可以移动3步，且可以选择上/下/左/右/左上/左下/右上/右下8个方向移动<br>小z，小y每秒均只能移动1步，只能上/下/左/右4个方向移动。<br>当然，三人均可选择保持原地不动。<br>三人移动始终在地图范围内。<br>下面，给你河畔的地图以及小z，小y，小h的初始坐标。<br>请你求出最快军训小h的时间(即3人相遇的最短时间)，如果无法军训小h则输出“lack of junxun”</p><p><strong>输入</strong></p><p>多组数据<br>每组数据第一行两个整数N,M(1&lt;=N,M&lt;=1000)代表河畔地图的行和列<br>接下来是N*M大小的地图<br>其中“z”，“y”，“h”分别代表小z，小y，小h的初始坐标<br>“#”代表障碍物，“.”表示可以正常通过的位置</p><p><strong>输出</strong></p><p>对于每组数据<br>如果能军训小h，则输出最快军训小h所需的时间<br>否则，输出“lack of junxun”</p><p><strong>样例输入</strong> </p><p>2 4<br>z..h<br>#y#.<br>2 3<br>z#y<br>#h.</p><p><strong>样例输出</strong><br>1<br>lack of junxun</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>分别从三个起点开始用BFS，考虑题目的特殊性：</p><ul><li>z和y不能走斜线，只有小h能走</li><li>小h每秒最多可以移动3步</li><li>输出最快军训小h所需的时间，那么就贪心一下，让小h每次都走最多步数：3步</li></ul><p>参考博文：<a href="https://blog.csdn.net/qq_43984169/article/details/105184977" target="_blank" rel="noopener">传送门</a></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int n,m;</span><br><span class="line">int vis[<span class="number">3</span>][maxn][maxn];</span><br><span class="line">char mp[maxn][maxn];</span><br><span class="line">int dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">struct node&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">&#125;;</span><br><span class="line">bool check(int x,int y,int id)&#123; <span class="comment">//check函数判断该点是否能走</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=m&amp;&amp;mp[x][y]!=<span class="string">'#'</span>&amp;&amp;!vis[id][x][y]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;node&gt; Q[<span class="number">3</span>];</span><br><span class="line">bool bfs(int u)&#123;</span><br><span class="line">    int cnt=Q[u].size();</span><br><span class="line">    node now,nex;</span><br><span class="line">    <span class="keyword">while</span>(cnt--)&#123;</span><br><span class="line">        now=Q[u].front(),Q[u].pop();</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">4</span>&amp;&amp;(u==<span class="number">0</span>||u==<span class="number">1</span>)) <span class="keyword">break</span>;    <span class="comment">//z和y不能走斜线,只有h能走斜线</span></span><br><span class="line">            nex.x=now.x+dir[i][<span class="number">0</span>];</span><br><span class="line">            nex.y=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(check(nex.x,nex.y,u))&#123;</span><br><span class="line">                vis[u][nex.x][nex.y]=<span class="number">1</span>;</span><br><span class="line">                Q[u].push(nex);</span><br><span class="line">                <span class="keyword">if</span>(vis[<span class="number">0</span>][nex.x][nex.y]&amp;&amp;vis[<span class="number">1</span>][nex.x][nex.y]&amp;&amp;vis[<span class="number">2</span>][nex.x][nex.y])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">int solve()&#123;</span><br><span class="line">    int step=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">0</span>].empty()||!Q[<span class="number">1</span>].empty()||!Q[<span class="number">2</span>].empty())&#123;</span><br><span class="line">        ++step;</span><br><span class="line">        <span class="keyword">if</span>(bfs(<span class="number">0</span>)) <span class="keyword">return</span> step;</span><br><span class="line">        <span class="keyword">if</span>(bfs(<span class="number">1</span>)) <span class="keyword">return</span> step;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(bfs(<span class="number">2</span>)) <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        mst(vis,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!Q[<span class="number">0</span>].empty()) Q[<span class="number">0</span>].pop();</span><br><span class="line">        <span class="keyword">while</span>(!Q[<span class="number">1</span>].empty()) Q[<span class="number">1</span>].pop();</span><br><span class="line">        <span class="keyword">while</span>(!Q[<span class="number">2</span>].empty()) Q[<span class="number">2</span>].pop();</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;mp[i]+<span class="number">1</span>;</span><br><span class="line">        node now;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j]==<span class="string">'z'</span>)&#123;</span><br><span class="line">                    now.x=i,now.y=j;</span><br><span class="line">                    vis[<span class="number">0</span>][i][j]=<span class="number">1</span>;</span><br><span class="line">                    Q[<span class="number">0</span>].push(now);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j]==<span class="string">'y'</span>)&#123;</span><br><span class="line">                    now.x=i,now.y=j;</span><br><span class="line">                    vis[<span class="number">1</span>][i][j]=<span class="number">1</span>;</span><br><span class="line">                    Q[<span class="number">1</span>].push(now);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j]==<span class="string">'h'</span>)&#123;</span><br><span class="line">                    now.x=i,now.y=j;</span><br><span class="line">                    vis[<span class="number">2</span>][i][j]=<span class="number">1</span>;</span><br><span class="line">                    Q[<span class="number">2</span>].push(now);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=solve();</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">-1</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">"lack of junxun"</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-B-不高兴的津津"><a href="#问题-B-不高兴的津津" class="headerlink" title="问题 B: 不高兴的津津"></a>问题 B: 不高兴的津津</h2><p><strong>题目描述</strong></p><p>津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。</p><p><strong>输入</strong></p><p>输入包括七行数据，分别表示周一到周日的日程安排。每行包括两个小于10的非负整数，分别表示津津在学校上课的时间和妈妈安排她上课的时间。</p><p><strong>输出</strong></p><p>输出包括一行，这一行只包含一个数字。如果不会不高兴那么输出0，如果会那么输出最不高兴的是周几〔用1,2,3,4,5,6,7分别表示周一，周二，周三，周四，周五，周六，周日〕。如果有两天或两天以上不高兴的程度相当，那么输出时间最靠前的一天。</p><p><strong>样例输入</strong><br>53<br>62<br>72<br>53<br>54<br>04<br>06</p><p><strong>样例输出</strong> </p><p>3</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>输出最不高兴的天数，注意输入的特殊性，中间没有空格，因此需要进行字符串处理，判断最大值时取大于号&gt;即可</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    int idx=<span class="number">0</span>,tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=<span class="number">7</span>;i++)&#123;</span><br><span class="line">        char s[<span class="number">5</span>];</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        n=s[<span class="number">0</span>]-<span class="string">'0'</span>;</span><br><span class="line">        m=s[<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line">        int sum=n+m;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;<span class="number">8</span>&amp;&amp;sum&gt;tmp)&#123;</span><br><span class="line">            idx=i;</span><br><span class="line">            tmp=sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;idx&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-C-花生采摘"><a href="#问题-C-花生采摘" class="headerlink" title="问题 C: 花生采摘"></a>问题 C: 花生采摘</h2><p><strong>题目描述</strong></p><p>鲁宾逊先生有一只宠物猴，名叫多多。这天，他们两个正沿着乡间小路散步，突然发现路边的告示牌上贴着一张小小的纸条：“欢迎免费品尝我种的花生！——熊字”。<br>鲁宾逊先生和多多都很开心，因为花生正是他们的最爱。在告示牌背后，路边真的有一块花生田，花生植株整齐地排列成矩形网格〔如图1〕。有经验的多多一眼就能看出，每棵花生植株下的花生有多少。为了训练多多的算术，鲁宾逊先生说：“你先找出花生最多的植株，去采摘它的花生；然后再找出剩下的植株里花生最多的，去采摘它的花生；依此类推，不过你一定要在我限定的时间内回到路边。”<br>我们假定多多在每个单位时间内，可以做以下四件事情中的一件：<br>1)从路边跳到最靠近路边〔即第一行〕的某棵花生植株；<br>2)从一棵植株跳到前后左右与之相邻的另一棵植株；<br>3)采摘一棵植株下的花生；<br>4)从最靠近路边〔即第一行〕的某棵花生植株跳回路边。<br>现在给定一块花生田的大小和花生的分布，请问在限定时间内，多多最多可以采到多少个花生？注意可能只有部分植株下面长有花生，假设这些植株下的花生个数各不相同。<br>例如在样例所示的花生田里，只有位于(2,5),(3,7),(4,2),(5,4)的植株下长有花生，个数分别为13,7,15,9。多多在21个单位时间内，最多可以采到37个花生。 </p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200329213020656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>输入</strong></p><p>输入的第一行包括三个整数，M,N和K，用空格隔开；表示花生田的大小为M*N〔1&lt;=M,N&lt;=20〕，多多采花生的限定时间为K〔0&lt;=K&lt;=1000〕个单位时间。接下来的M行，每行包括N个非负整数，也用空格隔开；第i+1行的第j个整数Pij〔0&lt;=Pij&lt;=500〕表示花生田里植株(i,j)下花生的数目，0表示该植株下没有花生。<br>输出<br>输出包括一行，这一行只包含一个整数，即在限定时间内，多多最多可以采到花生的个数。</p><p><strong>样例输入</strong> </p><p>6 7 21<br>0 0 0 0 0 0 0<br>0 0 0 0 13 0 0<br>0 0 0 0 0 0 7<br>0 15 0 0 0 0 0<br>0 0 0 9 0 0 0<br>0 0 0 0 0 0 0</p><p><strong>样例输出</strong> </p><p>37</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>贪心，在有限时间内获得最多的花生，注意点：</p><ul><li>起初和结束会花费1单位时间</li><li>猴子位移也会花费距离时间</li><li>采花生会花费1单位时间</li><li>当前花生能不能拿的条件是，判断一下能不能回到路边，不能回到路边当前就不能采了</li></ul><p>不过数据不是很强，勉强过了。严格一点的话可能会有数据会卡住。</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m,k,x;</span><br><span class="line">vector&lt;int&gt; G[maxn];</span><br><span class="line"><span class="keyword">set</span>&lt;int&gt; st;</span><br><span class="line">bool vis[maxn];</span><br><span class="line">struct node&#123;</span><br><span class="line">    int x,y,cc;</span><br><span class="line">&#125;stu[maxn];</span><br><span class="line">bool cmp(node x,node y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.cc&gt;y.cc;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    int cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="keyword">if</span>(x) stu[cnt].x=i,stu[cnt].y=j,stu[cnt++].cc=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu,stu+cnt,cmp);</span><br><span class="line">    int res=<span class="number">0</span>,ans=<span class="number">0</span>,tmp=<span class="number">0</span>;</span><br><span class="line">    ans+=stu[<span class="number">0</span>].x;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;k)&#123;</span><br><span class="line">        ans+=<span class="number">2</span>;   <span class="comment">//起初到路边+采当前花生花费的时间</span></span><br><span class="line">        res+=stu[<span class="number">0</span>].cc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        ans+=(abs(stu[i].x-stu[i<span class="number">-1</span>].x)+abs(stu[i].y-stu[i<span class="number">-1</span>].y));</span><br><span class="line">        <span class="keyword">if</span>(ans+stu[i].x&lt;k)&#123;</span><br><span class="line">            ans+=<span class="number">1</span>;</span><br><span class="line">            res+=stu[i].cc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-D-FBI树"><a href="#问题-D-FBI树" class="headerlink" title="问题 D: FBI树"></a>问题 D: FBI树</h2><p><strong>题目描述</strong></p><p>我们可以把由“0”和“1”组成的字符串分为三类：全“0”串称为B串，全“1”串称为I串，既含“0”又含“1”的串那么称为F串。<br>FBI树是一种二叉树[1]，它的结点类型也包括F结点，B结点和I结点三种。由一个长度为2N的“01”串S可以构造出一棵FBI树T，递归的构造方法如下：<br>1)T的根结点为R，其类型与串S的类型相同；<br>2)假设串S的长度大于1，将串S从中间分开，分为等长的左右子串S1和S2；由左子串S1构造R的左子树T1，由右子串S2构造R的右子树T2。<br>现在给定一个长度为2N的“01”串，请用上述构造方法构造出一棵FBI树，并输出它的后序遍历序列[2]。</p><p><strong>输入</strong></p><p>第一行是一个整数N〔1&lt;=N&lt;=128〕，数据保证n为2的幂次方。<br>第二行是一个长度为2N的“01”串。</p><p><strong>输出</strong></p><p>输出包括一行，这一行只包含一个字符串，即FBI树的后序遍历序列。</p><p><strong>样例输入</strong> </p><p>4<br>10001011</p><p><strong>样例输出</strong> </p><p>IBFBBBFIBFIIIFF</p><p><strong>提示</strong></p><p>[1]二叉树：二叉树是结点的有限集合，这个集合或为空集，或由一个根结点和两棵不相交的二叉树组成。这两棵不相交的二叉树分别称为这个根结点的左子树和右子树。<br>[2]后序遍历：后序遍历是深度优先遍历二叉树的一种方法，它的递归定义是：先后序遍历左子树，再后序遍历右子树，最后访问根。 </p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200329213540368.png"  alt=""><br>非常经典的一道二叉树题。根据题意建树，会发现这就是先序遍历。而题目的输出是后序遍历，那么我们就可以考虑，递归先序遍历建树，回溯的过程输出，因为先序遍历回溯就是后序遍历。</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m,cc;</span><br><span class="line">char str[maxn];</span><br><span class="line">int ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> output(int le,int re)&#123;</span><br><span class="line">    int k0=<span class="number">0</span>,k1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=le;i&lt;=re;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'0'</span>) k0++;</span><br><span class="line">        <span class="keyword">else</span> k1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k0&amp;&amp;k1) cout&lt;&lt;<span class="string">'F'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!k0&amp;&amp;k1) cout&lt;&lt;<span class="string">'I'</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">'B'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> fun(int l,int r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l!=r)&#123;</span><br><span class="line">        fun(l,(l+r)/<span class="number">2</span>);</span><br><span class="line">        fun((l+r)/<span class="number">2</span>+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    output(l,r);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    int len=strlen(str)<span class="number">-1</span>;</span><br><span class="line">    fun(<span class="number">0</span>,len);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-E-火星人"><a href="#问题-E-火星人" class="headerlink" title="问题 E: 火星人"></a>问题 E: 火星人</h2><p><strong>题目描述</strong></p><p>人类终于登上了火星的土地并且见到了神秘的火星人。人类和火星人都无法理解对方的语言，但是我们的科学家发明了一种用数字交流的方法。这种交流方法是这样的，首先，火星人把一个非常大的数字告诉人类科学家，科学家破解这个数字的含义后，再把一个很小的数字加到这个大数上面，把结果告诉火星人，作为人类的回答。<br>火星人用一种非常简单的方式来表示数字——掰手指。火星人只有一只手，但这只手上有成千上万的手指，这些手指排成一列，分别编号为1，2，3……。火星人的任意两根手指都能随意交换位置，他们就是通过这方法计数的。<br>一个火星人用一个人类的手演示了如何用手指计数。如果把五根手指——拇指、食指、中指、无名指和小指分别编号为1，2，3，4和5，当它们按正常顺序排列时，形成了5位数12345，当你交换无名指和小指的位置时，会形成5位数12354，当你把五个手指的顺序完全颠倒时，会形成54321，在所有能够形成的120个5位数中，12345最小，它表示1；12354第二小，它表示2；54321最大，它表示120。下表展示了只有3根手指时能够形成的6个3位数和它们代表的数字：<br>三进制数<br>123<br>132<br>213<br>231<br>312<br>321<br>代表的数字<br>1<br>2<br>3<br>4<br>5<br>6<br>现在你有幸成为了第一个和火星人交流的地球人。一个火星人会让你看他的手指，科学家会告诉你要加上去的很小的数。你的任务是，把火星人用手指表示的数与科学家告诉你的数相加，并根据相加的结果改变火星人手指的排列顺序。输入数据保证这个结果不会超出火星人手指能表示的范围。<br>输入<br>输入包括三行，第一行有一个正整数N，表示火星人手指的数目〔1&lt;=N&lt;=10000〕。第二行是一个正整数M，表示要加上去的小整数〔1&lt;=M&lt;=100〕。下一行是1到N这N个整数的一个排列，用空格隔开，表示火星人手指的排列顺序。<br>输出<br>输出只有一行，这一行含有N个整数，表示改变后的火星人手指的排列顺序。每两个相邻的数中间用一个空格分开，不能有多余的空格。</p><p><strong>样例输入</strong> </p><p>5<br>3<br>1 2 3 4 5</p><p><strong>样例输出</strong> </p><p>1 2 4 5 3</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>文章挺长，但是讲来讲去，就是全排列问题，直接调用<code>next_permutation</code>即可</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m;</span><br><span class="line">stack&lt;p&gt; sk;</span><br><span class="line">char str[maxn];</span><br><span class="line">int a[maxn];</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">while</span>(m--) next_permutation(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;a[n<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-F-小B旅游"><a href="#问题-F-小B旅游" class="headerlink" title="问题 F: 小B旅游"></a>问题 F: 小B旅游</h2><p><strong>题目描述</strong></p><p>小B在一个有N个城市M条道路的国家，每条道路连接的城市可以互相到达且每条道路小B都要花1步去走过它。现在他在1号城市，问他走P步最多能走多少个不同的城市？ </p><p><strong>输入</strong></p><p>输入格式：第1行，三个正整数N、M、P，意义如题：接下来M行，每行两个整数U、V，表示存在一条连接U、V的无向边。<br>输出<br>输出格式：1行，一个整数，表示从1号城市出发走P步的所有情况，共能经过多少个不同的城市。 </p><p><strong>样例输入</strong><br>4 4 2<br>1 2<br>1 3<br>2 3<br>3 4</p><p><strong>样例输出</strong><br>4</p><p><strong>提示</strong><br>数据规模：<br> 1&lt;=N&lt;=100000，1&lt;=M&lt;=5000000，1&lt;=P&lt;=10000</p><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>搜索题，直接搜就是，但是开始做的时候是从1开始搜，总是</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200329214154462.png"  alt=""></p><p>不造被卡在哪了，后面换了一种方式，直接先加一步，从孩子结点开始搜，然后过了</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m,cc;</span><br><span class="line">vector&lt;int&gt; G[maxn];</span><br><span class="line">int vis[maxn];</span><br><span class="line">int ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> dfs(int u,int cnt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;cc) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(!vis[u])&#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(auto v:G[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]) dfs(v,cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;cc;</span><br><span class="line">    int u,v;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(auto u:G[<span class="number">1</span>])</span><br><span class="line">        dfs(u,<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-G-括号匹配"><a href="#问题-G-括号匹配" class="headerlink" title="问题 G: 括号匹配"></a>问题 G: 括号匹配</h2><p><strong>题目描述</strong></p><p>括号主要有：大括号“{ }”、中括号“[ ]”、小括号“( )”。给定一个只包含左右括号的合法括号序列(序列长度2&lt;=n&lt;=10000)，按右括号从左到右的顺序输出每一对配对的括号出现的位置（括号序列以0开始编号） </p><p><strong>输入</strong><br>输入格式：仅1行，表一个合法的括号序列 </p><p><strong>输出</strong><br>输出格式：设括号序列有n个右括号，每行两个整数l、r，表示配对的括号左括号出现在第l位，右括号出现在第r位。 </p><p><strong>样例输入</strong></p><p>{()[()()]}()</p><p><strong>样例输出</strong><br>1 2<br>4 5<br>6 7<br>3 8<br>0 9<br>10 11</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>括号匹配问题，经常性扯到使用栈的问题，根据题意，需要搞一个对子<code>pair</code>存一下下标，每次取出栈顶元素和当前准备放入的元素进行比较，如果括号匹配成功即弹出栈，输出下标即可</p><h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m;</span><br><span class="line">stack&lt;p&gt; sk;</span><br><span class="line">char str[maxn];</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;strlen(str);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sk.empty())&#123;</span><br><span class="line">            p p1=make_pair(str[i],i);</span><br><span class="line">            sk.push(p1);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">'&#125;'</span>)&#123;</span><br><span class="line">            p now=sk.top();</span><br><span class="line">            <span class="keyword">if</span>(now.first==<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                cout&lt;&lt;now.second&lt;&lt;<span class="string">" "</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                sk.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">']'</span>)&#123;</span><br><span class="line">            p now=sk.top();</span><br><span class="line">            <span class="keyword">if</span>(now.first==<span class="string">'['</span>)&#123;</span><br><span class="line">                cout&lt;&lt;now.second&lt;&lt;<span class="string">" "</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                sk.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">            p now=sk.top();</span><br><span class="line">            <span class="keyword">if</span>(now.first==<span class="string">'('</span>)&#123;</span><br><span class="line">                cout&lt;&lt;now.second&lt;&lt;<span class="string">" "</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                sk.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p p2=make_pair(str[i],i);</span><br><span class="line">            sk.push(p2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-H-报数游戏"><a href="#问题-H-报数游戏" class="headerlink" title="问题 H: 报数游戏"></a>问题 H: 报数游戏</h2><p><strong>题目描述</strong></p><p>有n个小朋友，按顺时针方向围成一圈（编号从1—n），从第1号开始报数，一直数到m，数到m的小朋友退出圈外，剩下的小朋友再接着从1开始报数。</p><p><strong>输入</strong><br>T组数据，第一行为T(1&lt;=T&lt;=10)<br>接下来T行，每行用空格分开两个整数n、m（1&lt;=m，n&lt;=10000）</p><p><strong>输出</strong><br>输出T行<br>每行一个答案表示第1号小朋友退出前，报数为m的次数</p><p><strong>样例输入</strong><br>1<br>6 2</p><p><strong>样例输出</strong><br>4</p><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>报数游戏，与约瑟夫环问题有关，可以用递归求解，但是不太会做了，于是用了如下模拟，数据不强没卡住…</p><h3 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">int n,m,cc,t;</span><br><span class="line">char str[maxn];</span><br><span class="line">int ans=<span class="number">0</span>;</span><br><span class="line">int a[maxn];</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">vector&lt;int&gt;::iterator it;</span><br><span class="line">int vis[maxn];</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        mst(vis,<span class="number">0</span>);</span><br><span class="line">        int cnt=<span class="number">0</span>,ans=<span class="number">-1</span>;</span><br><span class="line">        v.clear();</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=n;i++) v.push_back(i);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            int len=v.size();</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v[i]])</span><br><span class="line">                    ++cnt;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v[i]]&amp;&amp;cnt==m)&#123;</span><br><span class="line">                    vis[v[i]]=<span class="number">1</span>;</span><br><span class="line">                    ++ans,cnt=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(vis[<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-I-小A的烦恼"><a href="#问题-I-小A的烦恼" class="headerlink" title="问题 I: 小A的烦恼"></a>问题 I: 小A的烦恼</h2><p><strong>题目描述</strong></p><p>小A生活在一个神奇的国家，这个国家有N（N&lt;=100000）个城市，还有M（M&lt;=5000000）条道路连接两城市。道路连接的两个城市可以直接免费到达。小A比较烦恼，因为他想知道每个城市能直接到达哪些城市，你能帮帮他吗？保证每个城市都有道路与其连接。（注：按照输入的道路顺序输出每个城市直接连接的城市,若有城市出现多次，则按最小出现次序输出） </p><p><strong>输入</strong><br>第1行包含两个整数N和M；接下来M行，每行两个整数描述一条道路连接的两个城市的编号。</p><p><strong>输出</strong><br>输出N行，每行若干个用一个空格隔开的整数；第I行输出的是与城市I直接相连城市编号，保证城市的出现按照道路输入的先后顺序出现。 </p><p><strong>样例输入</strong><br>4 5<br>2 3<br>3 1<br>1 4<br>2 4<br>1 2</p><p><strong>样例输出</strong><br>3 4 2<br>3 4 1<br>2 1<br>1 2</p><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>由题意，直接建图输出每个城市的子结点即可，不过总感觉没这么简单吧，这个题还是卡了挺多人的…   可能还是数据不强吧…</p><h3 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">int n,m;</span><br><span class="line">vector&lt;int&gt; G[maxn];</span><br><span class="line"><span class="keyword">set</span>&lt;int&gt; st;</span><br><span class="line">bool vis[maxn];</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        int u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(auto v:G[i])&#123;</span><br><span class="line">            cout&lt;&lt;v&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-J-一步之遥"><a href="#问题-J-一步之遥" class="headerlink" title="问题 J: 一步之遥"></a>问题 J: 一步之遥</h2><p><strong>题目描述</strong></p><p>小B在一个有N个城市M条道路的国家，每条道路连接的城市可以互相到达且每条道路都要花1步去走过它。现在他在P号城市，问有多少城市走1步能到达该城市？ </p><p><strong>输入</strong></p><p>多组输入<br>第1行，三个正整数N、M、P，意义如题。<br>接下来M行，每行两个整数U、V，表示存在一条连接U、V的无向边。（0&lt;=N&lt;=1000000,0&lt;=M&lt;=500000）</p><p><strong>输出</strong><br>1行，走1步能到P城市的城市数量。</p><p><strong>样例输入</strong><br>4 4 1<br>1 2<br>1 3<br>2 3<br>3 4</p><p><strong>样例输出</strong><br>2</p><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>问从p号城市，通过一步就能到达的城市数量。开始想着直接建图，然后输出p城市的子结点即可，然后用set直接去重一下，应该能过，不过一直卡在了33%</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020032921544874.png"  alt=""></p><p>后面也尝试了用vis数组判断一下，也wa了。</p><p>最后，考虑只用看p城市相连边的城市数目即可。直接用set不就好了嘛，下面代码不是最简代码，最简放后面</p><h3 id="AC代码-9"><a href="#AC代码-9" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define mst(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define p pair&lt;char,int&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">int n,m;</span><br><span class="line">vector&lt;int&gt; G[maxn];</span><br><span class="line"><span class="keyword">set</span>&lt;int&gt; st;</span><br><span class="line">bool vis[maxn];</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    int dd;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&gt;&gt;dd)&#123;</span><br><span class="line">        st.clear();</span><br><span class="line">        int cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            int u,v;</span><br><span class="line">            cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            <span class="keyword">if</span>(u==dd)&#123;</span><br><span class="line">                vis[v]=<span class="number">1</span>;</span><br><span class="line">                ++cnt;</span><br><span class="line">                st.insert(v);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(v==dd)&#123;</span><br><span class="line">                vis[u]=<span class="number">1</span>;</span><br><span class="line">                ++cnt;</span><br><span class="line">                st.insert(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*for(auto x:G[dd])</span></span><br><span class="line"><span class="comment">            st.insert(x);</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;st.size()&lt;&lt;endl;*/</span></span><br><span class="line">        <span class="comment">//cnt=st.size();</span></span><br><span class="line">        cout&lt;&lt;st.size()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m;</span><br><span class="line"><span class="keyword">set</span>&lt;int&gt; st;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    int dd;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&gt;&gt;dd)&#123;</span><br><span class="line">        st.clear();</span><br><span class="line">        int cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            int u,v;</span><br><span class="line">            cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            <span class="keyword">if</span>(u==dd)</span><br><span class="line">                st.insert(v);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(v==dd)</span><br><span class="line">                st.insert(u);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;st.size()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNUCM Contest1088 - 2020年春季ACM集训队热身赛-第3场</title>
      <link href="/posts/19766/"/>
      <url>/posts/19766/</url>
      
        <content type="html"><![CDATA[<h2 id="Contest1092-2020年春季ACM集训队热身赛-第3场"><a href="#Contest1092-2020年春季ACM集训队热身赛-第3场" class="headerlink" title="Contest1092 - 2020年春季ACM集训队热身赛-第3场"></a>Contest1092 - 2020年春季ACM集训队热身赛-第3场</h2><p><strong><font color=chocolate>比赛原地址：</font></strong> <a href="http://acm.hnucm.edu.cn/JudgeOnline/contest.php?cid=1092" target="_blank" rel="noopener">传送门</a></p><hr/><p><strong><font color=red>推荐阅读：</font></strong> <a href="https://chocolate.blog.csdn.net/article/details/105264747" target="_blank" rel="noopener">【白嫖党】如何把前端学好？看完这篇，直呼：太强了！（历经半个月之作）</a></p><h2 id="问题-A-数字分类"><a href="#问题-A-数字分类" class="headerlink" title="问题 A: 数字分类"></a>问题 A: 数字分类</h2><p><strong>题目描述</strong></p><p>给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：<br>A1 = 能被5整除的数字中所有偶数的和；<br>A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…；<br>A3 = 被5除后余2的数字的个数；<br>A4 = 被5除后余3的数字的平均数，精确到小数点后1位；<br>A5 = 被5除后余4的数字中最大数字。</p><p><strong>输入</strong></p><p>每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过10000的待分类的正整数。数字间以空格分隔。</p><p><strong>输出</strong></p><p>对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。<br>若其中某一类数字不存在，则在相应位置输出“N”。</p><p><strong>样例输入</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">13</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">20</span> <span class="number">16</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">11</span> <span class="number">2</span> <span class="number">9.7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>没用到什么特殊的方法，注意一些细节就好了，具体看如下代码好了</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,v,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int n,x;</span><br><span class="line">int a[<span class="number">10</span>];</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    int k=<span class="number">1</span>,cc=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">5</span>==<span class="number">0</span>&amp;&amp;x%<span class="number">2</span>==<span class="number">0</span>) a[<span class="number">1</span>]+=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x%<span class="number">5</span>==<span class="number">1</span>)  a[<span class="number">2</span>]+=k*x,k=-k;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x%<span class="number">5</span>==<span class="number">2</span>) a[<span class="number">3</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x%<span class="number">5</span>==<span class="number">3</span>) a[<span class="number">4</span>]+=x,++cc;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x%<span class="number">5</span>==<span class="number">4</span>) a[<span class="number">5</span>]=max(a[<span class="number">5</span>],x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[i]) cout&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!a[<span class="number">4</span>]) cout&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">        <span class="keyword">else</span> printf(<span class="string">"%.1f "</span>,a[<span class="number">4</span>]*<span class="number">1.0</span>/cc);</span><br><span class="line">    <span class="keyword">if</span>(!a[<span class="number">5</span>]) cout&lt;&lt;<span class="string">"N"</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;a[<span class="number">5</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-B-福尔摩斯的约会"><a href="#问题-B-福尔摩斯的约会" class="headerlink" title="问题 B: 福尔摩斯的约会"></a>问题 B: 福尔摩斯的约会</h2><p><strong>题目描述</strong></p><p>大侦探福尔摩斯接到一张奇怪的字条：“我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm”。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间“星期四 14:04”，因为前面两字符串中第1对位置相同的大写英文字母是第4个字母’D’，代表星期四（大写字符A到G表示星期一到星期日）；第2对位置相同的大写字母(A-N)或数字(0-9)表示HH，这里相同的字母是’E’，是第5个英文字母，代表一天里的第14个钟头（于是一天的0点到23点由数字0到9、以及大写字母A到N表示）；后面两字符串第1对相同的英文字母’s’(区分大小写)同时出现在第4个位置（从0开始计数）上，代表第4分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。<br>输入<br>输入在4行中分别给出4个非空、不包含空格、且长度不超过60的字符串。<br>输出<br>在一行中输出约会的时间，格式为“DAY HH:MM”，其中“DAY”是某星期的3字符缩写，即MON表示星期一，TUE表示星期二，WED表示星期三，THU表示星期<br>四，FRI表示星期五，SAT表示星期六，SUN表示星期日。题目输入保证每个测试存在唯一解。</p><p><strong>样例输入</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">3485</span>djDkxh4hhGE</span><br><span class="line"><span class="number">2984</span>akDfkkkkggEdsb</span><br><span class="line">s&amp;hgsfdk</span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">THU <span class="number">14</span>:<span class="number">04</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>总共有4个字符串，前两个用来判断是星期几和小时，后两个是用来判断分钟</p><p>每次都只取第一个相等，即如果达到了符合条件的相等，就不用判断后面是否相等了</p><p>然后需要注意题目条件，我一开始条件搞错了，就…</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200405172409432.png"  alt=""></p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,v,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line">char s1[maxn],s2[maxn];</span><br><span class="line">char day[<span class="number">7</span>][maxn]=&#123;<span class="string">"MON"</span>,<span class="string">"TUE"</span>,<span class="string">"WED"</span>,<span class="string">"THU"</span>,<span class="string">"FRI"</span>,<span class="string">"SAT"</span>,<span class="string">"SUN"</span>&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    int dd=<span class="number">0</span>,idx=<span class="number">0</span>,hh=<span class="number">0</span>,mm=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;s1[i]&amp;&amp;s2[i];i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s2[i]&amp;&amp;s1[i]&gt;=<span class="string">'A'</span>&amp;&amp;s1[i]&lt;=<span class="string">'G'</span>)&#123;</span><br><span class="line">            dd=s1[i]-<span class="string">'A'</span>;</span><br><span class="line">            idx=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=idx+<span class="number">1</span>;s1[i]&amp;&amp;s2[i];i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s2[i]&amp;&amp;s1[i]&gt;=<span class="string">'0'</span>&amp;&amp;s1[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            hh=s1[i]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1[i]==s2[i]&amp;&amp;s1[i]&gt;=<span class="string">'A'</span>&amp;&amp;s1[i]&lt;=<span class="string">'N'</span>)&#123;</span><br><span class="line">            hh=s1[i]-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;s1[i]&amp;&amp;s2[i];i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s2[i]&amp;&amp;((s1[i]&gt;=<span class="string">'a'</span>&amp;&amp;s1[i]&lt;=<span class="string">'z'</span>)||(s1[i]&gt;=<span class="string">'A'</span>&amp;&amp;s1[i]&lt;=<span class="string">'Z'</span>)))&#123;</span><br><span class="line">           mm=i;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;day[dd]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    printf(<span class="string">"%02d:"</span>,hh);</span><br><span class="line">    printf(<span class="string">"%02d\n"</span>,mm);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-C-德才论"><a href="#问题-C-德才论" class="headerlink" title="问题 C: 德才论"></a>问题 C: 德才论</h2><p><strong>题目描述</strong></p><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之<br>小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><p><strong>输入</strong></p><p>输入第1行给出3个正整数，分别为：N（&lt;=10^5），即考生总数；L（&gt;=60），为录取最低分数线，即德分和才分均不低于L的考生才有资格<br>被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到<br>但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于H，但是德分不低于才分的考生属于“才德兼<br>亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线L的考生也按总分排序，但排在第三类考生之后。</p><p>随后N行，每行给出一位考生的信息，包括：准考证号、德分、才分，其中准考证号为8位整数，德才分为区间[0, 100]内的整数。数字间以空格分隔。</p><p><strong>输出</strong></p><p>输出第1行首先给出达到最低分数线的考生人数M，随后M行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p><p><strong>样例输入</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">14</span> <span class="number">60</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000001</span> <span class="number">64</span> <span class="number">90</span></span><br><span class="line"><span class="number">10000002</span> <span class="number">90</span> <span class="number">60</span></span><br><span class="line"><span class="number">10000011</span> <span class="number">85</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000003</span> <span class="number">85</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000004</span> <span class="number">80</span> <span class="number">85</span></span><br><span class="line"><span class="number">10000005</span> <span class="number">82</span> <span class="number">77</span></span><br><span class="line"><span class="number">10000006</span> <span class="number">83</span> <span class="number">76</span></span><br><span class="line"><span class="number">10000007</span> <span class="number">90</span> <span class="number">78</span></span><br><span class="line"><span class="number">10000008</span> <span class="number">75</span> <span class="number">79</span></span><br><span class="line"><span class="number">10000009</span> <span class="number">59</span> <span class="number">90</span></span><br><span class="line"><span class="number">10000010</span> <span class="number">88</span> <span class="number">45</span></span><br><span class="line"><span class="number">10000012</span> <span class="number">80</span> <span class="number">100</span></span><br><span class="line"><span class="number">10000013</span> <span class="number">90</span> <span class="number">99</span></span><br><span class="line"><span class="number">10000014</span> <span class="number">66</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">10000013</span> <span class="number">90</span> <span class="number">99</span></span><br><span class="line"><span class="number">10000012</span> <span class="number">80</span> <span class="number">100</span></span><br><span class="line"><span class="number">10000003</span> <span class="number">85</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000011</span> <span class="number">85</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000004</span> <span class="number">80</span> <span class="number">85</span></span><br><span class="line"><span class="number">10000007</span> <span class="number">90</span> <span class="number">78</span></span><br><span class="line"><span class="number">10000006</span> <span class="number">83</span> <span class="number">76</span></span><br><span class="line"><span class="number">10000005</span> <span class="number">82</span> <span class="number">77</span></span><br><span class="line"><span class="number">10000002</span> <span class="number">90</span> <span class="number">60</span></span><br><span class="line"><span class="number">10000014</span> <span class="number">66</span> <span class="number">60</span></span><br><span class="line"><span class="number">10000008</span> <span class="number">75</span> <span class="number">79</span></span><br><span class="line"><span class="number">10000001</span> <span class="number">64</span> <span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题，比赛时没时间做了…</p><p>交了几发，wa了，但样例没问题，于是就找问题，结果出乎意料吧<br>改了两个地方就过了…</p><p><strong>原来版本：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">stu[cnt].str=s,stu[cnt].dd=d,stu[cnt].cc=c,stu[cnt].sum=d+c;</span><br></pre></td></tr></table></figure><p><strong>现在版本：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">strcpy(stu[cnt].str,s),stu[cnt].dd=d,stu[cnt].cc=c,stu[cnt].sum=d+c;</span><br></pre></td></tr></table></figure><p><strong>原来版本：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bool cmp(node x,node y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.w!=y.w) <span class="keyword">return</span> x.w&gt;y.w;</span><br><span class="line">    <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line">    <span class="keyword">if</span>(x.dd!=y.dd) <span class="keyword">return</span> x.dd&gt;y.dd;</span><br><span class="line">    <span class="keyword">return</span> x.str&lt;y.str&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现在版本：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bool cmp(node x,node y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.w!=y.w) <span class="keyword">return</span> x.w&gt;y.w;</span><br><span class="line">    <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line">    <span class="keyword">if</span>(x.dd!=y.dd) <span class="keyword">return</span> x.dd&gt;y.dd;</span><br><span class="line">    <span class="keyword">return</span> strcmp(x.str,y.str)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完之后，我：？？？下次记得调用函数吧。。。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200405172923131.jpg#pic_center"  alt=""><br>好了，说一下解题思路：</p><p>下面这段代码，肯定不是一下子就写出这么整齐的，结构体里面原本就三个变量的，后续根据所需才慢慢加的。</p><p>此题很关键的就在于如何把结构体按照已知条件进行排序，而且题目还分了批次。</p><p>这里不妨将几类人根据权值排序，即下面代码中的<code>w</code> 。</p><ul><li>第一类考生——圣人（德才兼备） 定义权值 100</li><li>第二类考生——德达到优先录取，而才没达到，君子（德胜才） 定义权值  90</li><li>第三类考生——德才分均低于H，但是德分不低于才分  定义权值 80</li><li>第四类考生——达到最低线L 定义权值 70</li></ul><p><strong>如何排序？</strong></p><ul><li>首先，根据权值排序</li><li>然后，根据总分排序</li><li>总分相同，根据德分降序排序</li><li>德分相同，按准考证号的升序</li></ul><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,v,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">struct node&#123;</span><br><span class="line">    char str[<span class="number">20</span>];</span><br><span class="line">    int dd,cc;</span><br><span class="line">    int w;</span><br><span class="line">    int sum;</span><br><span class="line">&#125;stu[maxn];</span><br><span class="line">int n,ls,hs,d,c;</span><br><span class="line">char s[<span class="number">20</span>];</span><br><span class="line">bool cmp(node x,node y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.w!=y.w) <span class="keyword">return</span> x.w&gt;y.w;</span><br><span class="line">    <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line">    <span class="keyword">if</span>(x.dd!=y.dd) <span class="keyword">return</span> x.dd&gt;y.dd;</span><br><span class="line">    <span class="keyword">return</span> strcmp(x.str,y.str)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;ls&gt;&gt;hs;</span><br><span class="line">    int cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s&gt;&gt;d&gt;&gt;c;</span><br><span class="line">        <span class="keyword">if</span>(d&gt;=ls&amp;&amp;c&gt;=ls)&#123;</span><br><span class="line">            strcpy(stu[cnt].str,s),stu[cnt].dd=d,stu[cnt].cc=c,stu[cnt].sum=d+c;</span><br><span class="line">            <span class="keyword">if</span>(d&gt;=hs&amp;&amp;c&gt;=hs) stu[cnt].w=<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(d&gt;=hs&amp;&amp;c&lt;hs) stu[cnt].w=<span class="number">90</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(d&lt;hs&amp;&amp;c&lt;hs&amp;&amp;d&gt;=c) stu[cnt].w=<span class="number">80</span>;</span><br><span class="line">            <span class="keyword">else</span> stu[cnt].w=<span class="number">70</span>;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu,stu+cnt,cmp);</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">        cout&lt;&lt;stu[i].str&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[i].dd&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[i].cc&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-D-锤子剪刀布"><a href="#问题-D-锤子剪刀布" class="headerlink" title="问题 D: 锤子剪刀布"></a>问题 D: 锤子剪刀布</h2><p><strong>题目描述</strong></p><p>大家应该都会玩“锤子剪刀布”的游戏：<br>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><p><strong>输入</strong></p><p>输入第1行给出正整数N（&lt;=10^5），即双方交锋的次数。随后N行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C代表“锤子”、J代表“剪刀”、B代表“布”，第1个字母代表甲方，第2个代表乙方，中间有1个空格。</p><p><strong>输出</strong></p><p>输出第1、2行分别给出甲、乙的胜、平、负次数，数字间以1个空格分隔。第3行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有1个空格。如果解不唯一，则输出按字母序最小的解。</p><p><strong>样例输入</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line">B B</span><br></pre></td></tr></table></figure><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>如下述代码所示，这道题写的有点糊了，一开始各种 if 暴力判断，写着写着输出不太对劲，b一直没有赢过？</p><p>卡了一段时间后，想着整合起来，然后输出处理了一下。</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,v,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int n,x;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int s=<span class="number">0</span>,f=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">    int ac=<span class="number">0</span>,aj=<span class="number">0</span>,ab=<span class="number">0</span>,bc=<span class="number">0</span>,bj=<span class="number">0</span>,bb=<span class="number">0</span>;</span><br><span class="line">    char a[<span class="number">2</span>],b[<span class="number">2</span>];</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>((a[<span class="number">0</span>]==<span class="string">'C'</span>&amp;&amp;b[<span class="number">0</span>]==<span class="string">'J'</span>)||(a[<span class="number">0</span>]==<span class="string">'J'</span>&amp;&amp;b[<span class="number">0</span>]==<span class="string">'B'</span>)||(a[<span class="number">0</span>]==<span class="string">'B'</span>&amp;&amp;b[<span class="number">0</span>]==<span class="string">'C'</span>))&#123;</span><br><span class="line">            s++;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'C'</span>)ac++;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'B'</span>)ab++;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'J'</span>)aj++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>]==<span class="string">'C'</span>&amp;&amp;b[<span class="number">0</span>]==<span class="string">'C'</span>)||(a[<span class="number">0</span>]==<span class="string">'J'</span>&amp;&amp;b[<span class="number">0</span>]==<span class="string">'J'</span>)||(a[<span class="number">0</span>]==<span class="string">'B'</span>&amp;&amp;b[<span class="number">0</span>]==<span class="string">'B'</span>))&#123;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            f++;</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="string">'C'</span>)bc++;</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="string">'B'</span>)bb++;</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="string">'J'</span>)bj++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;<span class="string">" "</span>&lt;&lt;p&lt;&lt;<span class="string">" "</span>&lt;&lt;f&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;f&lt;&lt;<span class="string">" "</span>&lt;&lt;p&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="comment">/*if(aj&gt;ac&amp;&amp;aj&gt;ab) cout&lt;&lt;"J ";</span></span><br><span class="line"><span class="comment">    else if(ab&gt;ac&amp;&amp;ab&gt;aj) cout&lt;&lt;"B ";</span></span><br><span class="line"><span class="comment">    else cout&lt;&lt;"C ";</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(bj&gt;bc&amp;&amp;bj&gt;bb) cout&lt;&lt;"J ";</span></span><br><span class="line"><span class="comment">    else if(bb&gt;bc&amp;&amp;bb&gt;bj) cout&lt;&lt;"B ";</span></span><br><span class="line"><span class="comment">    else cout&lt;&lt;"C ";*/</span></span><br><span class="line">    cout&lt;&lt;((ac&gt;ab&amp;&amp;ac&gt;=aj)?<span class="string">'C'</span>:(ab&gt;=aj?<span class="string">'B'</span>:<span class="string">'J'</span>))&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    cout&lt;&lt;((bc&gt;bb&amp;&amp;bc&gt;=bj)?<span class="string">'C'</span>:(bb&gt;=bj?<span class="string">'B'</span>:<span class="string">'J'</span>))&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-E-月饼"><a href="#问题-E-月饼" class="headerlink" title="问题 E: 月饼"></a>问题 E: 月饼</h2><p><strong>题目描述</strong></p><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p><p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有3种月饼，其库存量分别为18、15、10万吨，总售价分别为75、72、45亿元。如果市场的最大需求量只有20万吨，那么我们最大收益策略应该是卖出全部15万吨第2种月饼、以及5万吨第3种月饼，获得 72 + 45/2 = 94.5（亿元）。</p><p><strong>输入</strong></p><p>每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N表示月饼的种类数、以及不超过500（以万吨为单位）的正整数D表示市场最大需求量。随后一行给出N个正实数表示每种月饼的库存量（以万吨为单位）；最后一行给出N个正实数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p><p><strong>输出</strong></p><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后2位。</p><p><strong>样例输入</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">20</span></span><br><span class="line"><span class="number">18</span> <span class="number">15</span> <span class="number">10</span></span><br><span class="line"><span class="number">75</span> <span class="number">72</span> <span class="number">45</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">94.50</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题再熟悉不过了，当年PAT正式比赛前的一场全国模拟赛就是出的这一道，没啥说的，裸裸の贪心</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">struct node&#123;</span><br><span class="line">    double w,v,bt;</span><br><span class="line">&#125;stu[maxn];</span><br><span class="line">int n;</span><br><span class="line">double sum;</span><br><span class="line">bool cmp(node x,node y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.bt&gt;y.bt;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    <span class="keyword">while</span>(~scanf(<span class="string">"%d %lf"</span>,&amp;n,&amp;sum))&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) scanf(<span class="string">"%lf"</span>,&amp;stu[i].w);</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            scanf(<span class="string">"%lf"</span>,&amp;stu[i].v);</span><br><span class="line">            stu[i].bt=(double)stu[i].v/stu[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(stu,stu+n,cmp);</span><br><span class="line">        double ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[i].w&gt;=sum)&#123;</span><br><span class="line">                ans+=(double)stu[i].bt*sum;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=stu[i].v;</span><br><span class="line">                sum-=stu[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"%.2f\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-F-打印沙漏"><a href="#问题-F-打印沙漏" class="headerlink" title="问题 F: 打印沙漏"></a>问题 F: 打印沙漏</h2><p><strong>题目描述</strong></p><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p> 所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递<br> 增；首尾符号数相等。</p><p> 给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><p><strong>输入</strong></p><p>输入在一行给出1个正整数N（N&lt;=1e5）和一个符号，中间以空格分隔。</p><p><strong>输出</strong></p><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><p><strong>样例输入</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">19</span> *</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>打印沙漏问题，PAT原题。</p><p>注意一个公式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">需要字符总数=<span class="number">2</span>*h*h<span class="number">-1</span>（其中h表示沙漏“一半”的形状）</span><br></pre></td></tr></table></figure><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,v,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int n,h;</span><br><span class="line">char s[<span class="number">5</span>];</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    h=sqrt((n+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i=h;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=h-i;j++) cout&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i<span class="number">-1</span>;j++) cout&lt;&lt;s[<span class="number">0</span>];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">2</span>;i&lt;=h;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=h-i;j++) cout&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i<span class="number">-1</span>;j++) cout&lt;&lt;s[<span class="number">0</span>];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">     &#125;</span><br><span class="line">     ll ans=n-(<span class="number">2</span>*h*h<span class="number">-1</span>);</span><br><span class="line">     cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-G-组个最小数"><a href="#问题-G-组个最小数" class="headerlink" title="问题 G: 组个最小数"></a>问题 G: 组个最小数</h2><p><strong>题目描述</strong></p><p>给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意0不能做首位）。例如：<br>给定两个0，两个1，三个5，一个8，我们得到的最小的数就是10015558。<br>现给定数字，请编写程序输出能够组成的最小的数。</p><p><strong>输入</strong></p><p>每个输入包含1个测试用例。每个测试用例在一行中给出10个非负整数，顺序表示我们拥有数字0、数字1、……数字9的个数。整数间用一个空格分隔。<br>10个数字的总个数不超过200，且至少拥有1个非0的数字。</p><p><strong>输出</strong></p><p>在一行中输出能够组成的最小的数。</p><p><strong>样例输入</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10015558</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>按照题意来说，只要0不打头，其它按顺序输出即可</p><h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">#define mst(a,b) memset(a,v,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">map&lt;int,int&gt; mp;</span><br><span class="line">int main()&#123;</span><br><span class="line">    mp.clear();</span><br><span class="line">    int x;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        mp[i]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i])&#123;</span><br><span class="line">                cout&lt;&lt;i;</span><br><span class="line">                mp[i]--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(mp[i])&#123;</span><br><span class="line">            cout&lt;&lt;i;</span><br><span class="line">            mp[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-H-跟奥巴马一起编程"><a href="#问题-H-跟奥巴马一起编程" class="headerlink" title="问题 H: 跟奥巴马一起编程"></a>问题 H: 跟奥巴马一起编程</h2><p><strong>题目描述</strong></p><p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。<br>2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><p><strong>输入</strong></p><p>多组输入，每组数据一行，每行给出正方形边长N（3&lt;=N&lt;=20）和组成正方形边的某种字符C，间隔一个空格。</p><p><strong>输出</strong></p><p>输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。<br>每组数据后空一行</p><p><strong>样例输入</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> a</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>模拟即可</p><h3 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl '\n'</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">int n;</span><br><span class="line">char s[<span class="number">10</span>];</span><br><span class="line">int main()&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;s)&#123;</span><br><span class="line">    int m=(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>||i==m<span class="number">-1</span>||j==<span class="number">0</span>||j==n<span class="number">-1</span>) cout&lt;&lt;s[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><div>Github上面可以直接查看所有前端知识点梳理，<a href="https://github.com/Chocolate1999/Front-end-learning-to-organize-notes" target="_blank" rel="noopener">github传送门</a>，觉得不错，点个Star★，好运连连，Offer终究鼠于你，持续更新中。另外，也可以关注微信公众号：<font color=chocolate>小狮子前端Vue</font>，源码以及资料今后都会放在里面。</div></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录腾讯一面（IMWeb团队）</title>
      <link href="/posts/tencentOne/"/>
      <url>/posts/tencentOne/</url>
      
        <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>面试总时长大约100分钟，下午3点面试，结束接近5点样子。总体感觉就是体会到了差距，但也算是一次历练吧，大场面我都经历过了，也无惧小场面了。下面就将面经分享一下，主要是分享一下题目把，答案网上应该都能找到。</p><p>PS：<code>题目肯定是不唯一的，写这篇博客的原因：</code></p><ul><li>记录总结这次面试</li><li>分享一下面经</li><li>体会差距，努力学习</li></ul><p>注：不代表这套题就是你会被问到的，可以学习一下面试模式</p><p>此次面试官：<font color=chocolate>IMWeb团队 前端架构师</font></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>（关注下面题目，如果有dalao在，可以评论区答复，欢迎交流，我会以数字序号标注题目）</p><h3 id="1、自我介绍"><a href="#1、自我介绍" class="headerlink" title="1、自我介绍"></a>1、自我介绍</h3><p>开场多半都是这样</p><h3 id="2、询问你在大学学了哪些课程，你觉得你学得最好的是哪一门？"><a href="#2、询问你在大学学了哪些课程，你觉得你学得最好的是哪一门？" class="headerlink" title="2、询问你在大学学了哪些课程，你觉得你学得最好的是哪一门？"></a>2、询问你在大学学了哪些课程，你觉得你学得最好的是哪一门？</h3><p>这里的话，接下来的话题就会围绕你觉得学的最好的课程来展开</p><h3 id="3、先用js手写一个冒泡排序"><a href="#3、先用js手写一个冒泡排序" class="headerlink" title="3、先用js手写一个冒泡排序"></a>3、先用js手写一个冒泡排序</h3><p>这期间还问了时间复杂度和空间复杂度，空间复杂度与什么因素有关</p><h3 id="4、你知道打开https-www-qq-com经历了什么吗？"><a href="#4、你知道打开https-www-qq-com经历了什么吗？" class="headerlink" title="4、你知道打开https:www.qq.com经历了什么吗？"></a>4、你知道打开https:<a href="http://www.qq.com经历了什么吗？">www.qq.com经历了什么吗？</a></h3><p>这个就是关于输入网址到显示页面的步骤</p><h3 id="5、js基本数据类型"><a href="#5、js基本数据类型" class="headerlink" title="5、js基本数据类型"></a>5、js基本数据类型</h3><p>之前答的不是很好，面试官就回到了简单一点的题</p><h3 id="6、Vue生命周期你有了解过吗？你用到过哪些？"><a href="#6、Vue生命周期你有了解过吗？你用到过哪些？" class="headerlink" title="6、Vue生命周期你有了解过吗？你用到过哪些？"></a>6、Vue生命周期你有了解过吗？你用到过哪些？</h3><p>beforeCreate 、created 等等</p><h3 id="7、你知道cookie吗？请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#7、你知道cookie吗？请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="7、你知道cookie吗？请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>7、你知道cookie吗？请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h3><p>这里也问了cookies里面重要属性有哪些，有什么用</p><h3 id="8、你了解SEO吗？知道怎么做吗？"><a href="#8、你了解SEO吗？知道怎么做吗？" class="headerlink" title="8、你了解SEO吗？知道怎么做吗？"></a>8、你了解SEO吗？知道怎么做吗？</h3><p>这里我就答了html5一些，以及搭建hexo博客用的优化，还提及到了SEO有什么用</p><h3 id="9、谈谈你对this的理解"><a href="#9、谈谈你对this的理解" class="headerlink" title="9、谈谈你对this的理解"></a>9、谈谈你对this的理解</h3><p>因为提及到了apply和call，面试官就反问了apply和call的知识</p><h3 id="10、你了解跨域吗？"><a href="#10、你了解跨域吗？" class="headerlink" title="10、你了解跨域吗？"></a>10、你了解跨域吗？</h3><p>我在谈及的时候，提及到了前后端分离模式，于是下一题…</p><h3 id="11、说说你对前后端分离的理解"><a href="#11、说说你对前后端分离的理解" class="headerlink" title="11、说说你对前后端分离的理解"></a>11、说说你对前后端分离的理解</h3><p>我就从JSONP时代讲到了nginx反向代理，也从原本不需要考虑跨域问题谈到现在比较主流的前后端分离模式</p><h3 id="12、你对浏览器的理解，本地打开浏览器经历了什么？"><a href="#12、你对浏览器的理解，本地打开浏览器经历了什么？" class="headerlink" title="12、你对浏览器的理解，本地打开浏览器经历了什么？"></a>12、你对浏览器的理解，本地打开浏览器经历了什么？</h3><p>这个当时有点懵…</p><h3 id="13、谈谈你所了解的前端性能优化？"><a href="#13、谈谈你所了解的前端性能优化？" class="headerlink" title="13、谈谈你所了解的前端性能优化？"></a>13、谈谈你所了解的前端性能优化？</h3><p>代码压缩，SEO、缓存等等</p><h3 id="14、你知道gulp吗？"><a href="#14、你知道gulp吗？" class="headerlink" title="14、你知道gulp吗？"></a>14、你知道gulp吗？</h3><p>流…</p><h3 id="15、你用过git吗？常见哪些指令？你知道回退是什么指令吗？"><a href="#15、你用过git吗？常见哪些指令？你知道回退是什么指令吗？" class="headerlink" title="15、你用过git吗？常见哪些指令？你知道回退是什么指令吗？"></a>15、你用过git吗？常见哪些指令？你知道回退是什么指令吗？</h3><h3 id="16、你了解React吗？"><a href="#16、你了解React吗？" class="headerlink" title="16、你了解React吗？"></a>16、你了解React吗？</h3><p>因为不是很了解，这里我就谈及了mvvm和mvc的区别，也说明了为啥选择学习Vue，作为学生目前了解不是很深入</p><h3 id="17、你知道怎么不传cookied吗？你了解过http-only吗？"><a href="#17、你知道怎么不传cookied吗？你了解过http-only吗？" class="headerlink" title="17、你知道怎么不传cookied吗？你了解过http:only吗？"></a>17、你知道怎么不传cookied吗？你了解过http:only吗？</h3><p>这个我就有点熟悉，但不记得了</p><h3 id="18、你了解Webpack吗？"><a href="#18、你了解Webpack吗？" class="headerlink" title="18、你了解Webpack吗？"></a>18、你了解Webpack吗？</h3><p>打包方面</p><h3 id="19、对于之前打开本地浏览器那一块，你了解过dom树吗？"><a href="#19、对于之前打开本地浏览器那一块，你了解过dom树吗？" class="headerlink" title="19、对于之前打开本地浏览器那一块，你了解过dom树吗？"></a>19、对于之前打开本地浏览器那一块，你了解过dom树吗？</h3><p>好像他也想问AST语法树方面，但我也不记得了</p><h3 id="20、你了解CDN吗？在哪里你用过"><a href="#20、你了解CDN吗？在哪里你用过" class="headerlink" title="20、你了解CDN吗？在哪里你用过"></a>20、你了解CDN吗？在哪里你用过</h3><h3 id="21、说说你对原型链的理解？"><a href="#21、说说你对原型链的理解？" class="headerlink" title="21、说说你对原型链的理解？"></a>21、说说你对原型链的理解？</h3><h3 id="22、谈谈你对响应式原理的理解"><a href="#22、谈谈你对响应式原理的理解" class="headerlink" title="22、谈谈你对响应式原理的理解"></a>22、谈谈你对响应式原理的理解</h3><p>我提及到了Vue2.0和Vue3.0 区别 以及proxy还能做些什么</p><h3 id="23、你了解闭包吗？"><a href="#23、你了解闭包吗？" class="headerlink" title="23、你了解闭包吗？"></a>23、你了解闭包吗？</h3><h3 id="24、leetcode-电话号码的字母组合"><a href="#24、leetcode-电话号码的字母组合" class="headerlink" title="24、leetcode  电话号码的字母组合"></a>24、leetcode  电话号码的字母组合</h3><p>题目</p><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200327100131518.png"  alt=""></p><p>示例:<br>输入：”23”<br>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p><h3 id="25、最后，出了4到题"><a href="#25、最后，出了4到题" class="headerlink" title="25、最后，出了4到题"></a>25、最后，出了4到题</h3><p>① 异步、事件循环方面，具体题不急得了，但你能把下面这道题做出来，基本上没问题</p><p><a href="https://chocolate.blog.csdn.net/article/details/104907304" target="_blank" rel="noopener">原题地址及解析</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;挑战js面试题&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">            <span class="keyword">await</span> async2();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'async2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">        async1();</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>② 你如何将arguments参数改变为数组</p><p>③ box-sizing中content和border的区别</p><p>讲解各种盒模型：标准盒模型、IE（怪异）盒模型、flex、分列布局</p><p>④ 请你用正则表达式来解析腾讯qq或者腾讯其它网页的域名</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>好了，距离上次面试也过了两天了，我才打算写一份面经，有些题目可能不太记得了，如果后续学习的时候想到了，我会在评论区进行补充，100多分钟，想不到还问了这么多题…而且有些题目我还进行了深入探讨，比如对闭包，对v8引擎，Vue中响应式原理那一块探索设计模式。</p><p>尽管凉了，但也是一次不错的体验吧，<code>跌倒了一次，爬起来，继续走下去</code>…</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">学如逆水行舟，不进则退</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 腾讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端全家桶（面试题大整理）</title>
      <link href="/posts/vue-family/"/>
      <url>/posts/vue-family/</url>
      
        <content type="html"><![CDATA[<h2 id="面试准备——自我介绍"><a href="#面试准备——自我介绍" class="headerlink" title="面试准备——自我介绍"></a>面试准备——自我介绍</h2><h2 id="一面-二面"><a href="#一面-二面" class="headerlink" title="一面 / 二面"></a>一面 / 二面</h2><h3 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h3><ul><li>准备要充分</li><li>知识要系统</li><li>沟通要简洁</li><li>内心要诚实</li><li>态度要谦虚</li><li>回答要灵活</li></ul><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>假设高度已知，请写出三栏布局，其中左、右栏宽度各为300px，中间自适应</strong></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402113527886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="五种解决方式代码"><a href="#五种解决方式代码" class="headerlink" title="五种解决方式代码"></a>五种解决方式代码</h3><ul><li>浮动解决方式</li><li>绝对定位解决方式</li><li>flexbox解决方式</li><li>表格布局</li><li>网格布局</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Layout&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        html *&#123;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .layout&#123;</span></span><br><span class="line"><span class="regexp">            margin-top: 20px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .layout article div&#123;</span></span><br><span class="line"><span class="regexp">            min-height: 100px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 浮动解决方式 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout float"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.float .left&#123;</span></span><br><span class="line"><span class="regexp">                float: left;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.float .right&#123;</span></span><br><span class="line"><span class="regexp">                float: right;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.float .center&#123;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-right-center"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="right"&gt;&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"center"</span>&gt;</span><br><span class="line">                &lt;h1&gt;浮动解决方式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                1.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">                2.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/article&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>section&gt;</span><br><span class="line">    &lt;!-- 绝对定位解决方式 --&gt;</span><br><span class="line">    &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"layout absolute"</span>&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.absolute .left-center-right&gt;div&#123;</span><br><span class="line">                position: absolute;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .left&#123;</span><br><span class="line">                left: <span class="number">0</span>;</span><br><span class="line">                width: <span class="number">300</span>px;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .center&#123;</span><br><span class="line">                left: <span class="number">300</span>px;</span><br><span class="line">                right: <span class="number">300</span>px;</span><br><span class="line">                background: yellow;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .right&#123;</span><br><span class="line">                right: <span class="number">0</span>;</span><br><span class="line">                width: <span class="number">300</span>px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">        &lt;article class="left-center-right"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="left"&gt;&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"center"</span>&gt;</span><br><span class="line">                &lt;h1&gt;绝对定位解决方式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                1.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">                2.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- flexbox解决方式 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout flexbox"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox&#123;</span></span><br><span class="line"><span class="regexp">                margin-top: 140px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .left-center-right&#123;</span></span><br><span class="line"><span class="regexp">                display: flex;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .left&#123;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .center&#123;</span></span><br><span class="line"><span class="regexp">                flex: 1;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .right&#123;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-center-right"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="center"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;flexbox解决方式&lt;/</span>h1&gt;</span><br><span class="line">                <span class="number">1.</span>这是三栏布局的正中间部分</span><br><span class="line">                <span class="number">2.</span>这是三栏布局的正中间部分</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="right"&gt;&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/article&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>section&gt;</span><br><span class="line">    &lt;!-- 表格布局 --&gt;</span><br><span class="line">    &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"layout table"</span>&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.table .left-center-right&#123;</span><br><span class="line">                width: <span class="number">100</span>%;</span><br><span class="line">                display: table;</span><br><span class="line">                height: <span class="number">100</span>px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.table .left-center-right&gt;div&#123;</span><br><span class="line">                display: table-cell;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.table .left&#123;</span><br><span class="line">                width: <span class="number">300</span>px;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.table .center&#123;</span><br><span class="line">                background: yellow;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.table .right&#123;</span><br><span class="line">                width: <span class="number">300</span>px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">        &lt;article class="left-center-right"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="left"&gt;&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"center"</span>&gt;</span><br><span class="line">                &lt;h1&gt;表格解决方式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                1.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">                2.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 网格布局 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout grid"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.grid .left-center-right&#123;</span></span><br><span class="line"><span class="regexp">                display: grid;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">                grid-template-rows: 100px;</span></span><br><span class="line"><span class="regexp">                grid-template-columns: 300px auto 300px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.grid .left&#123;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.grid .center&#123;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.grid .right&#123;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-center-right"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="center"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;网格解决方式&lt;/</span>h1&gt;</span><br><span class="line">                <span class="number">1.</span>这是三栏布局的正中间部分</span><br><span class="line">                <span class="number">2.</span>这是三栏布局的正中间部分</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="right"&gt;&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/article&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>section&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402134031526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h3><p>上述5中解决方式是比较常见的，但是我们<code>不能只局限于为了问答而问答，我们应该从此基础上升华一下问题。</code></p><p>答完了这5种常见方式，并不代表我们页面布局这一话题就结束了，面试官可能还会延伸我们的问题，比如：</p><ul><li>这5种布局方式各自有什么优点和缺点？</li><li>如果<code>高度已知</code>条件去掉，考虑纵向，那么对于中间内容过多，导致中间格子撑开，此时需要左右跟着撑开，以上5种方式哪几种还能使用？</li><li>这5中方式的兼容性如何？如果让你选择一种最优的去应用于业务，你会选择哪种方式？</li></ul><p>那么，接下来就来围绕这三个问题来讲解：</p><h3 id="1、各自的优缺点"><a href="#1、各自的优缺点" class="headerlink" title="1、各自的优缺点"></a>1、各自的优缺点</h3><p><strong>① 对于浮动：</strong></p><p><strong>优点</strong></p><p>兼容性比较好，把清除浮动和其它浮动周边元素的关系处理好的话，那么它的兼容性是挺不错的。</p><p><strong>缺点</strong></p><p>设置浮动之后，脱离了文档流，处理不好的话，会带来很多问题，这是它本身的局限性。</p><p><strong>② 对于绝对定位：</strong></p><p><strong>优点</strong></p><p>快捷，不容易出问题</p><p><strong>缺点</strong></p><p>本身脱离了文档流，就会导致子元素跟着脱离文档流。因此，导致绝对定位的<code>有效性</code>、<code>可使用性</code>比较差。</p><p><strong>③ 对于flexbox</strong></p><p>css3中推出的flex布局，就是为了解决上述两种方式不足而出现的，算是比较完美的一种方式，尤其是对于移动端</p><p><strong>④ 对于表格布局</strong></p><p><strong>优点</strong></p><p>尽管多数人吐槽表格布局，但其实，表格布局在很多场景都适用的。比如上文写的三栏布局设计当中，表格布局是不是很轻松就实现了呢？</p><p>同时，表格布局的兼容性是非常好的，当用<code>flex</code>解决不了问题的时候，对于PC端  <code>IE8</code>是不支持<code>flex</code>的，此时就可以尝试表格布局</p><p><strong>缺点</strong></p><p>除开历史上一些诟病外，还有一个：</p><p>比如我们把三栏理解成为三个小单元格，那么当其中某一个单元格高度超出的时候，其余两侧也会跟着调整，于是对于有些场景是不合适的。因此，对于不同场景，我们可以在<code>flex</code>和<code>表格</code>布局进行选优操作</p><p><strong>⑤ 对于网格布局</strong></p><p>这一块的话，算是新热点，也是经历了一段时间的演变，从上文代码来看的话，通过网格布局我们能让代码更加简单、方便实现逻辑。在面试的时候提到也可以说明你比较关注新的事物，主动学习能力不错。</p><hr/><p>当然，以上表述有部分个人思考，也有现常说的优缺点，读者可以根据研究布局方式进行深入思考，学习更多的使用场景以及优缺点，其次，欢迎提出新的解决方案及相关知识点，后续进行补充。</p><h3 id="2、去掉高度，有哪几种布局可以使用？"><a href="#2、去掉高度，有哪几种布局可以使用？" class="headerlink" title="2、去掉高度，有哪几种布局可以使用？"></a>2、去掉高度，有哪几种布局可以使用？</h3><p>这里，我们就采用增加高度方式来看看，还有哪些布局能使用。（中间区域增加几个p标签）</p><p><strong>源代码</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Layout&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        html *&#123;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .layout&#123;</span></span><br><span class="line"><span class="regexp">            margin-top: 20px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .layout article div&#123;</span></span><br><span class="line"><span class="regexp">            min-height: 100px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 浮动解决方式 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout float"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.float .left&#123;</span></span><br><span class="line"><span class="regexp">                float: left;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.float .right&#123;</span></span><br><span class="line"><span class="regexp">                float: right;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.float .center&#123;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-right-center"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="right"&gt;&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"center"</span>&gt;</span><br><span class="line">                &lt;h1&gt;浮动解决方式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                1.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">                2.这是三栏布局的正中间部分</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 绝对定位解决方式 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout absolute"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.absolute .left-center-right&gt;div&#123;</span></span><br><span class="line"><span class="regexp">                position: absolute;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.absolute .left&#123;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.absolute .center&#123;</span></span><br><span class="line"><span class="regexp">                left: 300px;</span></span><br><span class="line"><span class="regexp">                right: 300px;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.absolute .right&#123;</span></span><br><span class="line"><span class="regexp">                right: 0;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-center-right"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="center"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;绝对定位解决方式&lt;/</span>h1&gt;</span><br><span class="line">                <span class="number">1.</span>这是三栏布局的正中间部分</span><br><span class="line">                <span class="number">2.</span>这是三栏布局的正中间部分</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- flexbox解决方式 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout flexbox"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox&#123;</span></span><br><span class="line"><span class="regexp">                margin-top: 140px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .left-center-right&#123;</span></span><br><span class="line"><span class="regexp">                display: flex;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .left&#123;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .center&#123;</span></span><br><span class="line"><span class="regexp">                flex: 1;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.flexbox .right&#123;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-center-right"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="center"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;flexbox解决方式&lt;/</span>h1&gt;</span><br><span class="line">                <span class="number">1.</span>这是三栏布局的正中间部分</span><br><span class="line">                <span class="number">2.</span>这是三栏布局的正中间部分</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 表格布局 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout table"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.table .left-center-right&#123;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">                display: table;</span></span><br><span class="line"><span class="regexp">                height: 100px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.table .left-center-right&gt;div&#123;</span></span><br><span class="line"><span class="regexp">                display: table-cell;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.table .left&#123;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.table .center&#123;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.table .right&#123;</span></span><br><span class="line"><span class="regexp">                width: 300px;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-center-right"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="center"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;表格解决方式&lt;/</span>h1&gt;</span><br><span class="line">                <span class="number">1.</span>这是三栏布局的正中间部分</span><br><span class="line">                <span class="number">2.</span>这是三栏布局的正中间部分</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 网格布局 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="layout grid"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            .layout.grid .left-center-right&#123;</span></span><br><span class="line"><span class="regexp">                display: grid;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">                grid-template-rows: 100px;</span></span><br><span class="line"><span class="regexp">                grid-template-columns: 300px auto 300px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.grid .left&#123;</span></span><br><span class="line"><span class="regexp">                background: red;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.grid .center&#123;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .layout.grid .right&#123;</span></span><br><span class="line"><span class="regexp">                background: blue;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-center-right"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="center"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;网格解决方式&lt;/</span>h1&gt;</span><br><span class="line">                <span class="number">1.</span>这是三栏布局的正中间部分</span><br><span class="line">                <span class="number">2.</span>这是三栏布局的正中间部分</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;增加高度&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;增加高度&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>article&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><strong>展示效果</strong></p><p>这里，图片可能不是特别清楚，读者可以跑一遍上述代码，在浏览器打开使用会更好一点嗷~</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402153629282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>总结</strong></p><p>从上述显示效果来看的话，改变了高度，用<code>flex</code>和<code>表格</code>布局还能继续使用。</p><p>对于第一块，也就是浮动布局那一块，我们还可以进行知识拓展：</p><ul><li><p>为什么会有两段文字跑到最左边去了呢？</p><p>  答：因为向左浮动的原因，上面文字被左边红色部分挡住了，当内容超过高度后，就会往左边移动了。</p></li><li><p>那你怎么将多余的两段文字接着上述文字显示，而不是向左移动？</p><p>  答：这就扯到了BFC的问题，清楚浮动等等，这里就不再进行拓展了，不然这篇文章没法完结啦。。。</p></li></ul><h3 id="页面布局模块——总结"><a href="#页面布局模块——总结" class="headerlink" title="页面布局模块——总结"></a>页面布局模块——总结</h3><ul><li>语义化掌握到位</li><li>页面布局深刻理解</li><li>CSS基础扎实</li><li>思维灵活且积极上进</li><li>代码书写规范</li></ul><h3 id="页面布局的变通"><a href="#页面布局的变通" class="headerlink" title="页面布局的变通"></a>页面布局的变通</h3><p><strong>三栏布局</strong></p><ul><li>左右宽度固定，中间自适应</li><li>上下高度固定，中间自适应</li></ul><p><strong>两栏布局</strong></p><ul><li>左宽度固定，右自适应</li><li>右宽度固定，左自适应</li><li>上宽度固定，下自适应</li><li>下宽度固定，上自适应</li></ul><h2 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><strong>谈谈你对CSS盒模型的认识</strong></p><ul><li><p>基本概念：标准模型+IE模型</p></li><li><p>标准模型和IE模型的区别</p></li><li><p>CSS如何设置这两种盒模型</p></li><li><p>JS如何设置获取盒模型对应的宽和高</p></li><li><p>实例题（根据盒模型解释边距重叠）</p></li><li><p>BFC（边距重叠解决方案）</p></li></ul><hr/><p>以上内容知识点由浅入深，知识点理论从CSS-&gt;JS-&gt;CSS</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104448450" target="_blank" rel="noopener">推荐阅读：这一次，彻底看懂 CSS 盒模型（图文并茂）</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>标准盒模型、怪异盒模型（IE盒模型）和flex弹性伸缩盒模型以及多列布局</p><ul><li>标准盒模型（box-sizing content-box）</li></ul><p> class="lazyload" data-src="https://img-blog.csdnimg.cn/20200222185449952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70" <img src="/"></img></p><ul><li>IE盒模型（box-sizing border-box）</li></ul><p>content = width+padding+border</p><p> class="lazyload" data-src="https://img-blog.csdnimg.cn/20200222185613912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70" <img src="/"></img></p><p><strong><font color=red>附完美回答方式：</font></strong></p><p>标准盒子模型，即box-sizing content-box，浏览器默认模型，我们所写的width和height并不是最终盒子的宽高，而是content的，盒子的宽高由我们的content+padding+border来组成的，但是这样在做项目时可能会遇到小问题，假如我想构建一个100x100的盒子大小，但是我发现我写的是width和height是100，于是我需要加上padding及border，但是加上去之后，盒子也会相应变大，这就造成改动麻烦。</p><p>后面css3中提供了IE盒子模型，能够直接控制盒子的大小。于是项目中大多数用上了IE盒子模型，以及我看过bootstrap以及element-ui源码中大部分也是用的IE盒子模型</p><blockquote><div>以上回答方式，请读者可以好好体会一下，挖掘其中的亮点！</div></blockquote><ul><li>FLEX盒模型</li></ul><p>关于这里可以参考阮一峰老师的文章</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">参考：Flex 布局教程：语法篇</a></p><ul><li>多列布局（基本上不用）</li></ul><p>读者可以适当了解一下，这里就不加以说明了</p><h3 id="JS如何获取盒模型对应的宽和高"><a href="#JS如何获取盒模型对应的宽和高" class="headerlink" title="JS如何获取盒模型对应的宽和高"></a>JS如何获取盒模型对应的宽和高</h3><p>①<code>dom.style.width / height</code></p><p>这种方法，有一定局限性，只能取内联样式的宽高。</p><p>②<code>dom.currentStyle.width / height</code></p><p>这种方法，也是有一定局限性，不过我们三种常用css样式都能获取。但是只支持<code>IE</code>，其它浏览器不支持</p><p>③ <code>window.getComputedStyle(dom).width / height</code></p><p>支持所有浏览器，兼容性好</p><p>④ <code>dom.getBoundingClientRect().width / height</code></p><p>这种方法，一般用于计算元素的绝对位置，根据视窗左上角的点来算的。可以拿到四个元素值：<code>left</code>、<code>top</code>、<code>width</code>、<code>height</code></p><h3 id="实例题（根据盒模型解释边距重叠）"><a href="#实例题（根据盒模型解释边距重叠）" class="headerlink" title="实例题（根据盒模型解释边距重叠）"></a>实例题（根据盒模型解释边距重叠）</h3><p>如下图，有两个盒子，深色的定为父元素，浅色的定位子元素，子元素的高度为<code>100px</code>，与父元素的上边距为<code>10px</code>，请问父元素实际高度是多少？<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402165051784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>结合这个标题的情况，你可能会说是100px，但你也可能就是直接相加，觉得是110px，但都不是面试官觉得满意的回答，因为要看父元素的盒模型是如何设置的，下面来探讨这个问题：</p><p>我们在界面里来写一个父子元素的盒子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;CSS盒模型&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        html *&#123;</span></span><br><span class="line"><span class="regexp">            padding: 0%;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section id="sec"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            #sec&#123;</span></span><br><span class="line"><span class="regexp">                background: #f00;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .children&#123;</span></span><br><span class="line"><span class="regexp">                height: 100px;</span></span><br><span class="line"><span class="regexp">                margin-top: 10px;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"children"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/article&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>section&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器，出现如下界面：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402190607634.png"  alt=""></p><p> 我们父级元素貌似没看到，打开开发者工具（按下<code>F12</code>）</p><p>此时，我们看一下计算属性 <code>Computed</code></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402192214142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>发现，此时高度是<code>100px</code>。</p><p>同时，我们也看一下子元素的高度，如下，也是<code>100px</code>。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402192306678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>那是不是就是<code>100px</code>呢？在回答之前，接着来如下操作，我们修改一个地方：</p><p>在父元素样式里设置 <code>overflow: hidden;</code><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040219294052.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>此时，我们再次查看content，变成了<code>110px</code>。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402201211584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>此时，就有疑问了，为什么之前是<code>100px</code>，而当我们加了<code>overflow: hidden;</code>之后变成了<code>110px</code>了呢？</p><p><strong>补充知识点：</strong></p><p>我们常见的边距重叠，有两种情况：</p><ul><li>父子元素重叠（如上文所述）</li><li>兄弟之间重叠：比如两个格子，第一个格子下边距30px，第二个上边距5px，会取一个最大值30px作为边距。另外，特殊一点的就是空元素了，会取<code>margin-top</code>和<code>margin-bottom</code><br>的最大值</li></ul><p>补充完后，接着回答上一个问题，为什么加了<code>overflow: hidden;</code>之后变成了<code>110px</code>了呢？</p><p>其实，是给父级元素创建了一个<code>BFC</code>，这里我们在下文继续讨论。</p><h3 id="BFC（边距重叠解决方案）"><a href="#BFC（边距重叠解决方案）" class="headerlink" title="BFC（边距重叠解决方案）"></a>BFC（边距重叠解决方案）</h3><p><strong>BFC基本概念</strong>：块级格式化上下文</p><p>与之并列的一个是IFC（内联格式化上下文）这个不常考，就提一下。</p><p><strong>BFC的原理（渲染规则）</strong></p><p>① 在BFC这个元素的<code>垂直方向</code>边距会发生重叠</p><p>② BFC的区域不会与浮动元素的box重叠，可用来<code>清除</code>浮动布局</p><p>③ BFC是一个<code>独立</code>的容器，外面的元素不会影响里面的元素，同时，里面的元素不会影响外面的元素。</p><p>④ 计算BFC元素高度的时候，<code>浮动元素也会参与计算</code></p><p><strong>怎么创建BFC？</strong></p><p>① <code>float</code>值不为none，因为CSS默认为none，只要设置了浮动，当前元素就设置了BFC</p><p>② static：静态定位。它是<code>position</code>的默认值，一般不设置position属性时，元素会按照正常的文档流进行排列。那么，只要position不为默认值static也是设置了BFC</p><p>③ <code>display</code>属性，table、table-cell等table相关的，都是设置了BFC</p><p>④ <code>overflow</code>: auto / hidden</p><p><strong>BFC使用场景</strong></p><h3 id="垂直方向边距重叠问题"><a href="#垂直方向边距重叠问题" class="headerlink" title="垂直方向边距重叠问题"></a>垂直方向边距重叠问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;CSS盒模型&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        html *&#123;</span></span><br><span class="line"><span class="regexp">            padding: 0%;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section id="sec"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">            #sec&#123;</span></span><br><span class="line"><span class="regexp">                background: #f00;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            .children&#123;</span></span><br><span class="line"><span class="regexp">                height: 100px;</span></span><br><span class="line"><span class="regexp">                margin-top: 10px;</span></span><br><span class="line"><span class="regexp">                background: yellow;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br><span class="line">        &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"children"</span>&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;<span class="regexp">/article&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>section&gt;</span><br><span class="line">    &lt;!-- BFC垂直方向边距重叠 --&gt;</span><br><span class="line">    &lt;section id=<span class="string">"margin"</span>&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            #margin&#123;</span><br><span class="line">                background: pink;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">            &#125;</span><br><span class="line">            #margin&gt;p&#123;</span><br><span class="line">                margin: <span class="number">5</span>px auto <span class="number">25</span>px;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;a&lt;/</span>p&gt;</span><br><span class="line">        &lt;p&gt;b&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;c&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>如下图所示，a的顶部只有5px，而b的顶部用到了a的底部25px，因此就造成了边距重叠问题<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402204846508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>如何消除上述情况？</p><p>给子元素创建父元素，让父元素设置BFC</p><p>如下图所示，仅需加一个div，然后设置<code>overflow: hidden</code>即可</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402211309341.png"  alt=""></p><p><strong>效果</strong></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402211300463.png"  alt=""></p><p>接下来，来一个左边固定，右边自适应的例子。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- BFC不予float重叠 --&gt;</span><br><span class="line">&lt;section id=<span class="string">"layout"</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #layout&#123;</span><br><span class="line">            margin-top: <span class="number">10</span>px;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">        #layout .left&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        #layout .right&#123;</span><br><span class="line">            height: <span class="number">110</span>px;</span><br><span class="line">            background: #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="left"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>section&gt;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402212208404.png"  alt=""><br>从上图可以看到，右边因为宽度设置的高一点，经过浮动重叠到了左边一部分，此时，我们仅需一行代码即可<code>overflow: auto;</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#layout .right&#123;</span><br><span class="line">height: <span class="number">110</span>px;</span><br><span class="line">background: #ccc;</span><br><span class="line">overflow: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402212438518.png"  alt=""></p><p><strong>计算BFC元素高度的时候，浮动元素也会参与计算</strong></p><p>怎么理解这个概念呢？比如下面代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- BFC子元素即使是float也会参与高度计算 --&gt;</span><br><span class="line">&lt;section id=<span class="string">"float"</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #float&#123;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line">        #float .float&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            font-size: <span class="number">30</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="float"&gt;I am 浮动元素&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/section&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402223151584.png"  alt=""><br>我们从上面图片发现，没有父级元素，于是检查一下，发现父级高度为0，因为子元素设置了浮动，高度没有算进去<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402223510992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>解决办法，父级元素设置清除浮动，于是形成了一个BFC，然后就会加上子级元素的高度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#float&#123;</span><br><span class="line">background: green;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从门再次打开开发者工具（F12），可以看到，父级元素已经有了高度</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200402223829514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h2 id="DOM-事件类"><a href="#DOM-事件类" class="headerlink" title="DOM 事件类"></a>DOM 事件类</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><ul><li><p>基本概念：DOM事件的级别</p></li><li><p>DOM事件模型</p></li><li><p>DOM事件流</p></li><li><p>描述DOM事件捕获的具体流程</p></li><li><p>Event对象的常见应用</p></li><li><p>自定义事件</p></li></ul><h3 id="基本概念：DOM事件的级别"><a href="#基本概念：DOM事件的级别" class="headerlink" title="基本概念：DOM事件的级别"></a>基本概念：DOM事件的级别</h3><table><thead><tr><th align="center">DMO事件类</th><th align="center">事件级别</th></tr></thead><tbody><tr><td align="center">DOM0</td><td align="center">element.onclick=function(){}</td></tr><tr><td align="center">DOM2</td><td align="center">element.addEventListener(‘click’, function(){} , false)</td></tr><tr><td align="center">DOM3</td><td align="center">element.addEventListener(‘keyup’, function(){} , false)</td></tr></tbody></table><p>为啥没有DOM1呢？</p><p>答：因为DOM1制定的时候，没有设计与事件相关的东西，但不代表DOM1标准不存在</p><p>DOM3也是一种事件定义方式，相对来说事件类型增加了，比如鼠标键盘事件等</p><p>最后一个<code>boolean</code>值表示事件模型是捕获还是冒泡，默认为<code>false</code>冒泡，为<code>true</code>表示捕获。</p><h3 id="DOM事件模型"><a href="#DOM事件模型" class="headerlink" title="DOM事件模型"></a>DOM事件模型</h3><p>分为捕获（从上到下）和冒泡（从目标元素往上）</p><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200403093615164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>如上图所示，这就是一个事件流，一个<code>完整的事件流</code>分为三个阶段：</p><ul><li>第一阶段是捕获</li><li>第二阶段是目标阶段，比如说点按钮就是目标阶段，或者说是事件通过捕获到达目标元素</li><li>第三阶段是从目标元素上传到window对象，也就是冒泡的过程</li></ul><h3 id="描述DOM事件捕获的具体流程"><a href="#描述DOM事件捕获的具体流程" class="headerlink" title="描述DOM事件捕获的具体流程"></a>描述DOM事件捕获的具体流程</h3><p>（冒泡方向与之相反）<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040309413230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h3><ul><li><code>event.preventDefault()</code>        （阻止默认，例如链接等）</li><li><code>event.stopPropagation()</code>    （阻止冒泡）</li><li><code>event.stopImmediateProgation()</code>         （事件响应优先级，例如给一个按钮添加两个事件A和B，你想要只执行A，不执行B，就在A的响应函数里添加这个方法，就会阻止B事件的执行）</li><li><code>event.currentTarget</code>        （表示当前所绑定的事件，如下面所述，指向的就是父级元素）</li><li><code>event.target</code>    （与事件委托相关，把子元素的事件全都转到父级元素上，进行优化，只需绑定一次事件，然而作响应的时候，需要区别是哪个子元素被点击，该方法就可以绑定当前被点击的元素）</li></ul><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">'custome'</span>);</span><br><span class="line">ev.addEventListener(<span class="string">'custome'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'custome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure><p><code>CustomEvent</code>是为了解决Event事件不能传数据的问题</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>上文讲述了相关知识点，下面我们通过代码来简单实现，让抽象的知识更加具体化</p><p><strong>DOM事件捕获的具体流程实例</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"ev"</span>&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            #ev&#123;</span><br><span class="line">                width: <span class="number">300</span>px;</span><br><span class="line">                height: <span class="number">100</span>px;</span><br><span class="line">                color: #fff;</span><br><span class="line">                text-align: center;</span><br><span class="line">                line-height: <span class="number">100</span>px;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">        目标元素</span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            var ev=document.getElementById('ev');</span></span><br><span class="line"><span class="string">            //DOM2中定义事件 window</span></span><br><span class="line"><span class="string">            window.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="string">                console.log('window capture')</span></span><br><span class="line"><span class="string">            &#125;,true)</span></span><br><span class="line"><span class="string">            //document</span></span><br><span class="line"><span class="string">            document.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="string">                console.log('document capture')</span></span><br><span class="line"><span class="string">            &#125;,true)</span></span><br><span class="line"><span class="string">            //html</span></span><br><span class="line"><span class="string">            document.documentElement.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="string">                console.log('html capture')</span></span><br><span class="line"><span class="string">            &#125;,true)</span></span><br><span class="line"><span class="string">            //body</span></span><br><span class="line"><span class="string">            document.body.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="string">                console.log('body capture')</span></span><br><span class="line"><span class="string">            &#125;,true)</span></span><br><span class="line"><span class="string">            //目标元素</span></span><br><span class="line"><span class="string">            ev.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="string">                console.log('ev capture')</span></span><br><span class="line"><span class="string">            &#125;,true)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            /* 自定义事件 */</span></span><br><span class="line"><span class="string">            var eve = new Event('test');</span></span><br><span class="line"><span class="string">            ev.addEventListener('test',function()&#123;</span></span><br><span class="line"><span class="string">                console.log('test dispatch')</span></span><br><span class="line"><span class="string">            &#125;,true)</span></span><br><span class="line"><span class="string">            setTimeout(function()&#123;</span></span><br><span class="line"><span class="string">                ev.dispatchEvent(eve);</span></span><br><span class="line"><span class="string">            &#125;,2000)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040311370377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h2 id="HTTP-协议类"><a href="#HTTP-协议类" class="headerlink" title="HTTP 协议类"></a>HTTP 协议类</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><ul><li><p>HTTP协议的主要特点</p></li><li><p>HTTP报文的组成部分</p></li><li><p>HTTP方法</p></li><li><p>POST和GET的区别</p></li><li><p>HTTP状态码</p></li><li><p>什么是持久连接</p></li><li><p>什么是管线化</p></li></ul><h3 id="HTTP协议的主要特点"><a href="#HTTP协议的主要特点" class="headerlink" title="HTTP协议的主要特点"></a>HTTP协议的主要特点</h3><ul><li>简单快速    （每个资源URL是固定的，一个图片或页面地址，统一资源符，只需输入URL即可访问）</li><li>灵活    （在HTTP协议头部head部分有一个数据类型，通过http协议可以完成不同数据类型的传输）</li><li>无连接    （连接一次会断掉，不会保持连接）</li><li>无状态    （客户端和服务端连接两次，不能区分两次连接者身份）</li></ul><h3 id="HTTP报文的组成部分"><a href="#HTTP报文的组成部分" class="headerlink" title="HTTP报文的组成部分"></a>HTTP报文的组成部分</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200403132018916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><ul><li>请求行：包含方法、页面地址、HTTP协议版本</li><li>请求头：key-value值，告诉服务端需要什么内容，要注意什么类型</li><li>空行：告诉服务端请求头结束，接下来是请求体部分了</li><li>请求体：数据部分</li></ul><p>同理，响应报文</p><p><strong>请求示例</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200403135448592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>以上第一行就是请求行，包含<code>GET</code>方法 / 表示首页  <code>HTTP/1.1</code> 表示HTTP协议版本</p><p>后面内容都是请求头，都是<code>key-value</code>键值对</p><p>空行在这里没有显示出来，然后对于请求体就是一些数据部分了。</p><p><strong>响应示例</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200403135749252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p>第一行是状态行，包含HTTP协议版本，协议状态码200</p><p>下面就是响应头了，也是键值对的形式</p><p>下面会有一个空行，类似下面这种效果（下面这条分割横线）</p><hr/><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">获取资源</td></tr><tr><td align="center">POST</td><td align="center">传输资源</td></tr><tr><td align="center">PUT</td><td align="center">更新资源</td></tr><tr><td align="center">DELETE</td><td align="center">删除资源</td></tr><tr><td align="center">HEAD</td><td align="center">获取报文首部</td></tr></tbody></table><h3 id="POST和GET的区别（重点前5条）"><a href="#POST和GET的区别（重点前5条）" class="headerlink" title="POST和GET的区别（重点前5条）"></a>POST和GET的区别（重点前5条）</h3><ul><li><p>get在浏览器回退时是无害的，而post会再次提交请求</p></li><li><p>get请求会被浏览器主动缓存，而post不会，除非手动设置</p></li><li><p>get请求参数会被完整保留在浏览器历史记录里，而post中的参数不会被保留</p></li><li><p>get请求在URL中传送的参数是有长度限制的，而POST没有限制</p></li><li><p>get参数通过URL传递，post放在Request body中</p></li><li><p>get请求只能进行url编码，而post支持多种编码方式</p></li><li><p>对参数的数据类型，get只接受ASCALL字符，而post没有限制</p></li><li><p>get比post更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</p></li><li><p>get产生的URL地址可以被收藏，而post不可以</p></li></ul><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ul><li>1xx：指示信息——表示请求已接收，继续处理</li><li>2xx：成功——表示请求已经被成功接收</li><li>3xx：重定向——要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误——请求有语法错误或请求无法实现</li><li>5xx：服务器错误——服务器未能实现合法的请求</li></ul><p>一般答完上述基本ok了，如果问的详细一点的话，就多加一点知识上去：</p><ul><li><code>200 OK</code>：客户端请求成功</li><li><code>206 Partial Content</code>：客户发送了一个带有Range（范围）头的GET请求，服务器完成了它（比如客户端请求0-1w字节，服务器就会返回206,常见播放视频和音频地址，文件过大时一般返回206）</li></ul><hr/><ul><li><code>301 Moved Permanently</code>：所请求的页面已经转移至新的URL</li><li><code>302 Found</code>：所请求的页面已经<code>临时</code>转移至新的URL</li><li><code>304 Not  Modified</code>：客户端有<code>缓冲</code>的文档并发出一个条件性的请求，服务器告诉客户，原来缓冲的文档还可以继续使用</li></ul><hr/><ul><li><code>400 Bad Request</code>：客户端请求有语法错误，不能被服务器所理解</li><li><code>401 Unauthorized</code>：请求未经授权，这个状态码必须和<code>WWW-Authenticate</code>报头域一起使用</li><li><code>403 Forbidden</code>：请求访问的页面被禁止（比如页面只能通过服务端去访问）</li><li><code>404 Not Found</code>：请求资源不存在</li></ul><hr/><ul><li><code>500 Internal Server Error</code>：服务器发生不可预料的错误但原来缓冲的文档还可以继续使用</li><li><code>503 Server Unavailable</code>：请求未完成，服务器临时过载或当机，一段时候后可能恢复正常</li></ul><h3 id="什么是持久连接"><a href="#什么是持久连接" class="headerlink" title="什么是持久连接"></a>什么是持久连接</h3><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即<code>非 Keep-Alive</code> 模式时，每个请求 / 应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）</p><p>当使用 <code>Keep-Alive</code>模式（又称持久连接、连接重用）时，<code>Keep-Alive</code> 功能使客户端到服务端的连接持续有效，当出现对服务器的后续请求时，<code>Keep-Alive</code> 功能避免了建立或者重新建立连接</p><p>PS：只有HTTP 1.1 版本才支持持久连接，1.0不支持。</p><h3 id="什么是管线化（加分点）"><a href="#什么是管线化（加分点）" class="headerlink" title="什么是管线化（加分点）"></a>什么是管线化（加分点）</h3><p>在使用持久连接的情况下，某个连接上消息的传递类似于</p><p>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p><p>某个连接上的消息类似变成了这样：</p><p>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p><p>（将请求打包一起发送，然后服务器一起打包回来响应）</p><p><strong>拓展知识：</strong></p><ul><li>管线化机制通过持久连接完成，仅 <code>HTTP / 1.1</code> 支持此技术（重点）</li><li>只有<code>get</code>和<code>head</code>请求可以进行管线化，而 <code>post</code> 有所限制（重点）</li><li>初次创建连接时不应启动管线机制，因为对方（服务器）不一定支持 <code>HTTP /1.1</code>版本的协议（重点）</li><li>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</li><li><code>HTTP / 1.1</code>要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</li><li>由于上面提到的服务器端的问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如 <code>Chrome</code> 和 <code>Firefox</code> 默认并未开启管线化支持</li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><ul><li>创建对象有几种方法</li><li>原型、构造函数、实例、原型链</li><li>instanceof的原理</li><li>new运算符</li></ul><h3 id="创建对象有几种方法"><a href="#创建对象有几种方法" class="headerlink" title="创建对象有几种方法"></a>创建对象有几种方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">name</span>:<span class="string">'o1'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o11 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">name</span>:<span class="string">'o11'</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.name=<span class="string">'o2'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> M();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> P = &#123;<span class="attr">name</span>:<span class="string">'o3'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(P);</span><br></pre></td></tr></table></figure><h3 id="原型、构造函数、实例、原型链"><a href="#原型、构造函数、实例、原型链" class="headerlink" title="原型、构造函数、实例、原型链"></a>原型、构造函数、实例、原型链</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404091811124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name=name&#125;;    <span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> M(<span class="string">'o2'</span>);   <span class="comment">//实例</span></span><br></pre></td></tr></table></figure><p>构造函数和原型对象的关系<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404092424139.png"  alt=""></p><p>实例和构造函数的关系</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404092715485.png"  alt=""></p><p>原型链：通过原型链的方式，找到原型对象，原型对象的方法是被不同实例所共有的。例如Object上有toString()方法，因此其它所有的实例都共有这个方法。</p><h3 id="instanceof的原理"><a href="#instanceof的原理" class="headerlink" title="instanceof的原理"></a>instanceof的原理</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404093505976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><code>instanceof</code>原理就是判断当前实例是不是当前构造函数的实例对象，判断依据就是实例对象的<code>__proto__</code>和构造函数的<code>prototype</code>是否指向相同的引用，只要在一条原型链上，<code>instanceof</code>就会返回<code>true</code>。</p><p>很抽象是吧，下面我们还是举上文的例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name=name&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> M(<span class="string">'o2'</span>);</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404094108600.png"  alt=""></p><p>因此，<code>instanceof</code>判断不严谨，比如m继承了a、b、c，我怎么判断是继承了哪一个呢？用<code>instanceof</code>判断都返回<code>true</code>。</p><p>下面就来，介绍<code>constructor</code>判断方式</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404094632985.png"  alt=""></p><h3 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h3><ul><li><p>一个新对象被创建。它继承自<code>foo.prototype</code></p></li><li><p>构造函数foo被执行。执行的时候，相应的参数会被传入，同时上下文（this）会被指定为这个新实例。<code>new foo</code> 等同于 <code>new foo()</code>，只能用在不传递任何参数的情况</p></li><li><p>如果构造函数返回一个“对象”，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那么new出来的结果为步骤1创建的对象</p></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p><strong>类与实例</strong></p><ul><li>类的声明</li><li>生成实例</li></ul><p><strong>类与继承</strong></p><ul><li>如何实现继承</li><li>继承的几种方式</li></ul><h3 id="类与实例"><a href="#类与实例" class="headerlink" title="类与实例"></a>类与实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">/* 类的声明 */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=<span class="string">'aaa'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* ES6中的class的声明 */</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Animal2</span></span>&#123;</span><br><span class="line">            <span class="keyword">constructor</span>()&#123;</span><br><span class="line">                <span class="keyword">this</span>.name = <span class="string">'bbb'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 实例化一个类 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> Animal(),<span class="keyword">new</span> Animal2());</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404101354316.png"  alt=""></p><h3 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h3><p><strong>方法一：借助构造函数来实现继承</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 借助构造函数来实现继承 */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          fruit.call(<span class="keyword">this</span>);</span><br><span class="line">          <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> apple);</span><br></pre></td></tr></table></figure><p>上述这种方式，是通过改变<code>fruit</code>构造函数运行时this指向，指向了<code>apple</code>上，但是<code>fruit</code>原型链上的东西并没有被继承。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 借助构造函数来实现继承 */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fruit.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'吃水果啦！'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          fruit.call(<span class="keyword">this</span>);</span><br><span class="line">          <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> apple().eat());</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404105822522.png"  alt=""><br>因此，通过构造函数来实现的继承，只能继承父类构造函数的属性，如果原型<code>prototype</code>上面还有方法甚至原型链上的方法，不会继承。</p><p><strong>方法二：借助原型链实现继承</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 借助原型链实现继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">&#125;</span><br><span class="line">apple.prototype = <span class="keyword">new</span> fruit();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> apple());</span><br></pre></td></tr></table></figure><p>掌握之前原型链相关的知识，下面的等式应该就比较容易理解了<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040411063490.png"  alt=""><br>但这种继承方式也是有缺点的，下文来探讨这个问题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 借助原型链实现继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">&#125;</span><br><span class="line">apple.prototype = <span class="keyword">new</span> fruit();</span><br><span class="line"><span class="keyword">var</span> app1 = <span class="keyword">new</span> apple();</span><br><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> apple();</span><br><span class="line">app1.arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(app1,app2);</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404110957499.png"  alt=""></p><p>从上述结果来看，当我们修改某一个对象时，该函数的所有新出的实例对象都会跟着改变，这就造成了<code>污染</code>问题，肯定不是我们面向对象思想所想要的。（因为它们引用的是同一个父类实例对象）</p><p><strong>方式三：组合方式实现继承</strong></p><p>这种方式就是结合前两种的优点，弥补它们的缺点。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;面向对象&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">/* 关于继承的几种方式</span></span><br><span class="line"><span class="comment">        **使用方法：</span></span><br><span class="line"><span class="comment">        **读者按需将对应模块注释取消掉即可 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 借助原型链实现继承 */</span></span><br><span class="line">        <span class="comment">/*function fruit()&#123;</span></span><br><span class="line"><span class="comment">            this.name = 'fruit';</span></span><br><span class="line"><span class="comment">            this.arr = [1,2,3];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        function apple()&#123;</span></span><br><span class="line"><span class="comment">            this.type='apple';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        apple.prototype = new fruit();</span></span><br><span class="line"><span class="comment">        var app1 = new apple();</span></span><br><span class="line"><span class="comment">        var app2 = new apple();</span></span><br><span class="line"><span class="comment">        app1.arr.push(4);</span></span><br><span class="line"><span class="comment">        console.log(app1,app2);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 组合方式实现继承 */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *此方法的缺点：new fruit() 父类构造函数执行了两次，可以但没必要</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">            <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fruit.call(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        apple.prototype = <span class="keyword">new</span> fruit();  <span class="comment">//这里拿的是父类的实例，没有自己的constructor</span></span><br><span class="line">        <span class="keyword">var</span> app1 = <span class="keyword">new</span> apple();</span><br><span class="line">        <span class="keyword">var</span> app2 = <span class="keyword">new</span> apple();</span><br><span class="line">        app1.arr.push(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//console.log(app1,app2);</span></span><br><span class="line">        <span class="comment">//console.log(app1.constructor,app2.constructor)   </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 组合方式实现继承优化1 */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fruit1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">            <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">apple1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fruit.call(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        apple1.prototype = fruit1.prototype;  <span class="comment">//这里拿的是父类的原型对象，但依旧没有自己的constructor</span></span><br><span class="line">        <span class="keyword">var</span> app3 = <span class="keyword">new</span> apple1();</span><br><span class="line">        <span class="keyword">var</span> app4 = <span class="keyword">new</span> apple1();</span><br><span class="line">        app3.arr.push(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//console.log(app3,app4);</span></span><br><span class="line">        <span class="comment">//判断实例</span></span><br><span class="line">        <span class="comment">//console.log(app3 instanceof apple1);</span></span><br><span class="line">        <span class="comment">//console.log(app3 instanceof fruit1); //这里无法判断当前对象是由父类产生的实例对象还是由子类产生的实例对象</span></span><br><span class="line">        <span class="comment">//判断构造函数</span></span><br><span class="line">        <span class="comment">//console.log(app3.constructor);      </span></span><br><span class="line">        <span class="comment">//console.log(app4.constructor);       //因为和父类的原型对象是一个对象，导致constructor也是指向的父类的constructor，无法判断自己</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 组合方式实现继承优化2 */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fruit2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">'fruit'</span>;</span><br><span class="line">            <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">apple2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fruit.call(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.type=<span class="string">'apple'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        apple2.prototype = <span class="built_in">Object</span>.create(fruit2.prototype);  <span class="comment">//这里使用Object.create()方法，和之前直接用fruit2.prototype来说，它创建了一个中间对象，和父类不是指向同一个区域了</span></span><br><span class="line">        <span class="comment">//这样就能区分父类和子类的原型对象了，达到父类和子类原型对象的隔离效果</span></span><br><span class="line">        apple2.prototype.constructor = apple2;  <span class="comment">//由于隔离了父类子类的原型对象，我们就可以指定子类自己的constructor</span></span><br><span class="line">        <span class="keyword">var</span> app5 = <span class="keyword">new</span> apple2();</span><br><span class="line">        <span class="keyword">var</span> app6 = <span class="keyword">new</span> apple2();</span><br><span class="line">        app5.arr.push(<span class="number">4</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(app5,app6);</span><br><span class="line">         <span class="comment">//判断实例</span></span><br><span class="line">        <span class="built_in">console</span>.log(app5 <span class="keyword">instanceof</span> apple2);</span><br><span class="line">        <span class="built_in">console</span>.log(app5 <span class="keyword">instanceof</span> fruit2); <span class="comment">//因此，这里可以判断当前对象是由父类产生的实例对象还是由子类产生的实例对象</span></span><br><span class="line">        <span class="comment">//判断构造函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(app5.constructor);       <span class="comment">//指向的是自己的constructor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="通信类"><a href="#通信类" class="headerlink" title="通信类"></a>通信类</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><ul><li>什么是同源策略及限制</li><li>前后端如何通信</li><li>如何创建Ajax</li><li>跨域通信的几种方式（重点）</li></ul><h3 id="什么是同源策略及限制"><a href="#什么是同源策略及限制" class="headerlink" title="什么是同源策略及限制"></a>什么是同源策略及限制</h3><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。<br>这是一个用于隔离潜在恶意文件的关键的安全机制。</p><p> 源包括协议、域名、端口</p><ul><li>Cookie、LocalStorage和IndexDB无法读取</li><li>DOM无法获得</li><li>AJAX请求不能发送</li></ul><h3 id="前后端如何通信"><a href="#前后端如何通信" class="headerlink" title="前后端如何通信"></a>前后端如何通信</h3><ul><li>Ajax（同源下的通信）</li><li>WebSocket（不限制，不受同源策略的限制）</li><li>CORS（支持同源通信，也支持跨域通信，新型）</li></ul><h3 id="如何创建Ajax"><a href="#如何创建Ajax" class="headerlink" title="如何创建Ajax"></a>如何创建Ajax</h3><ul><li>XMLHttpRequest（高级浏览器才支持）对象的工作流程</li><li>兼容性处理</li><li>事件的触发条件</li><li>事件的触发顺序</li></ul><h3 id="跨域通信的几种方式（重点）"><a href="#跨域通信的几种方式（重点）" class="headerlink" title="跨域通信的几种方式（重点）"></a>跨域通信的几种方式（重点）</h3><ul><li>JSONP</li><li>Hash（改变页面不刷新，search改变会刷新，因此search不可以）</li><li>postMessage（H5中出现的标准，实现跨域通信）</li><li>WebSocket</li><li>CORS（可以理解为支持跨域通信的Ajax，在请求头上加了Origin）</li></ul><p><strong>JSONP实现原理：</strong></p><p>根据script标签异步加载而来</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404135628568.png"  alt=""></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040413390361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>将<code>html</code>加入<code>script</code>标签，即把请求发送出去<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404135715278.png"  alt=""></p><p>很关键一点是会向服务端发送一个<code>callbackName</code>，然后服务器就会响应如下内容（下面那个script里的内容）利用<code>callbackName</code>作为函数名来返回，而且本地必须有这个函数名的函数。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404133842188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>Hash与postMessage实现原理</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404135948962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>WebSocket实现原理</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040414064464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>CORS实现原理</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404141010376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>PS：CORS为什么支持跨域通信？</p><p>浏览器回拦截<code>Ajax</code>请求，如果觉得是跨域的，就会在请求头上加上<code>origin</code>。</p><h2 id="安全类"><a href="#安全类" class="headerlink" title="安全类"></a>安全类</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><ul><li><p>CSRF</p><p>  基本概念和缩写<br>  攻击原理<br>  防御措施</p></li><li><p>XSS</p></li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p><strong>基本概念和缩写</strong></p><p>CSRF，通常称为跨站请求伪造，英文名（Cross-site request forgery）缩写CSRF</p><p><strong>CSRF攻击原理</strong></p><ul><li>用户必须在网站登录过</li><li>网站中某个接口存在漏洞<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404141759423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></li></ul><p><strong>CSRF防御措施</strong></p><ul><li>Token验证</li><li>Referer验证（页面来源验证）</li><li>隐藏令牌（类似Token，隐藏在http的head头中，不放在链接上）</li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p><strong>基本概念和缩写</strong></p><p>跨域脚本攻击（cross-site scripting）</p><p><strong>攻击原理</strong></p><p>比如可以在你的提交区里面写上script标签，即用一些渠道向你的页面注入js脚本</p><p><strong>防御措施</strong></p><p>让插入的js不可执行</p><h3 id="CSRF与XSS区别"><a href="#CSRF与XSS区别" class="headerlink" title="CSRF与XSS区别"></a>CSRF与XSS区别</h3><p>CSRF是利用本身的漏洞自动执行接口，依赖于用户登录网站</p><p>XSS是向页面注入js，js函数体里面做想做的事</p><h2 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><ul><li>排序</li><li>堆栈、队列、链表</li><li>递归</li><li>波兰式和逆波兰式</li><li>…</li></ul><p>PS：由于文章篇幅所限，并且算法这一块需要的是自己平时的积累，这里就不作长文加载了，关于算法这一块我会在github里有相应专栏，记录题库。因此，在这里就给大家分享一些比较好的文章提供学习。</p><hr/><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li>快速排序：<a href="https://segmentfault.com/a/1190000009426421" target="_blank" rel="noopener">传送门</a></li><li>选择排序：<a href="https://segmentfault.com/a/1190000009366805" target="_blank" rel="noopener">传送门</a></li><li>希尔排序：<a href="https://segmentfault.com/a/1190000009461832" target="_blank" rel="noopener">传送门</a></li></ul><p><a href="https://chocolate.blog.csdn.net/article/details/105218288" target="_blank" rel="noopener">推荐：【再也不怕面试官要你手写排序算法】一文详细解读前后端之各种排序算法及知识拓展（附图示） JS / C / C++</a></p><h3 id="堆栈、队列、链表"><a href="#堆栈、队列、链表" class="headerlink" title="堆栈、队列、链表"></a>堆栈、队列、链表</h3><p><a href="https://juejin.im/entry/58759e79128fe1006b48cdfd" target="_blank" rel="noopener">参考：JS中的数据结构与算法</a></p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><a href="https://segmentfault.com/a/1190000009857470" target="_blank" rel="noopener">参考：JS中的递归</a></p><h3 id="波兰式和逆波兰式"><a href="#波兰式和逆波兰式" class="headerlink" title="波兰式和逆波兰式"></a>波兰式和逆波兰式</h3><p><a href="https://www.cnblogs.com/chenying99/p/3675876.html" target="_blank" rel="noopener">参考：波兰式、逆波兰式与表达式求值</a></p><p><a href="https://github.com/Tairraos/rpn.js" target="_blank" rel="noopener">参考：源码</a></p><h3 id="关于算法的心得"><a href="#关于算法的心得" class="headerlink" title="关于算法的心得"></a>关于算法的心得</h3><p>首先，对于前端来说，算法要求没有后端那么严格，考察的一般不会很刁专，一般就是看下你的思考能力。如果一开始就考察算法题，如果你回答不了的话，也很正常，或许这不是一个关于前端的部门…可能招的是算法工程师，算法这一块问的话，多半是中间时间段。算法这一块的话，在于平时积累，如果时间充裕的话，可以深入了解一点，这也是面试加分点，如果时间紧迫的话，把上文提到的部分专题弄懂已经不错了。</p><hr/><h2 id="二面-三面"><a href="#二面-三面" class="headerlink" title="二面 / 三面"></a>二面 / 三面</h2><h3 id="面试技巧-1"><a href="#面试技巧-1" class="headerlink" title="面试技巧"></a>面试技巧</h3><ul><li>知识面要广</li><li>理解要深刻</li><li>内心要诚实</li><li>态度要谦虚</li><li>回答要灵活</li><li>要学会赞美</li></ul><h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><ul><li>什么是DOCTYPE及作用</li><li>浏览器渲染过程</li><li>重排Reflow</li><li>重绘Repaint</li><li>布局Layout</li></ul><h3 id="什么是DOCTYPE及作用"><a href="#什么是DOCTYPE及作用" class="headerlink" title="什么是DOCTYPE及作用"></a>什么是DOCTYPE及作用</h3><ul><li>DTD（document type ，文档类型定义）是一系列的语法规则，用来定义XML或（X）HTML的文件类型。浏览器会使用它来判断文件类型，决定使用何种协议来解析，以及切换浏览器模式</li><li>DOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器就会出现一些解析错误。（简单来说，就是告诉浏览器我用了哪一个DTD）</li></ul><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404161808788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br>PS：这里要记住html5该如何声明，以及4.0版本有严格模式和传统模式，具体区别如上图下划线所示</p><h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404162046639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>简单快速回答：</strong></p><p>第一步，HTML经过HTML解析器解析成为DOM Tree</p><p>第二步，CSS通过CSS解析器形成样式规则</p><p>第三步，将两个DOM结合形成Render Tree，这里就类似于告诉浏览器渲染树结构基本出来了，此时有一个平行操作，Layout，经过这个，就能知道元素具体应该显示在屏幕在哪个位置（宽、高、颜色等）</p><p>最后一步，浏览器通过GUI画图，呈现页面内容，最后Display显示页面</p><hr/><p>下面通过几个比较好理解的图形来将抽象具体化：</p><p><strong>DOM Tree</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404163122362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>CSSOM Tree</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404163149664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>Render Tree</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404163230751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>Layout</strong><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404163324722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h3 id="重排Reflow"><a href="#重排Reflow" class="headerlink" title="重排Reflow"></a>重排Reflow</h3><p><strong>定义</strong></p><p>DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow</p><p><strong>触发Reflow</strong></p><ul><li>当你增加、删除、修改<code>DOM</code>结点时，会导致 <code>Reflow</code> 或 <code>Repaint</code></li><li>当你移动<code>DOM</code>的位置，或是搞个动画的时候</li><li>当你修改<code>CSS</code>样式的时候</li><li>当你 <code>Resize</code> 窗口的时候（移动端没有这个问题），或是滚动的时候</li><li>当你修改网页的默认字体时候（影响比较大，性能问题）</li></ul><h3 id="重绘Repaint"><a href="#重绘Repaint" class="headerlink" title="重绘Repaint"></a>重绘Repaint</h3><p><strong>定义</strong></p><p>当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等确定下来后，浏览器于是便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为<code>repaint</code>。即页面需要呈现的内容，一起画到屏幕上。</p><p><strong>触发Repaint</strong></p><ul><li>DOM改动</li><li>CSS改动</li></ul><p><strong>（重点）如何尽量减小Repaint？</strong></p><p>比如页面有一个计算器，用户在输入框输入一些计算表达式，最后显示计算结果，然后把输入给隐藏掉。这里就有两个交互，先是用户输入，将输入隐藏掉，然后将结果显示出来。这两个交互呈现内容不一样，当然就需要Repaint，那怎么做少画点东西？</p><p>好像是有一个documentFrame这个东西，把n个节点创建成一个片段，向浏览器一次添加这个片段。</p><p>（这里我的朋友考察过，遗留一下这个问题，可以帮助我完善这个问题，谢谢！）</p><h2 id="js运行机制"><a href="#js运行机制" class="headerlink" title="js运行机制"></a>js运行机制</h2><p>关于这一专题，我之前的文章也是写的挺多的了。</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104907304" target="_blank" rel="noopener">推荐阅读：【金三银四】一个问题就知道你会不会JS了 阿里、头条真题解析</a></p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104990407" target="_blank" rel="noopener">推荐阅读：【金三银四】 一文弄懂 js 数据类型、堆栈内存、作用域（链）、闭包知识拓展 （一）</a></p><p>下面就例举几个经典题，读者可以好好体会一下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;js运行机制&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        &#125;,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">   &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><ul><li>如何理解JS的单线程</li><li>什么是任务队列</li><li>什么是Event Loop</li></ul><p>以上三个问题的详细表述：</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/104990407" target="_blank" rel="noopener">推荐阅读：【金三银四】 一文弄懂 js 数据类型、堆栈内存、作用域（链）、闭包知识拓展 （一）</a></p><h3 id="如何理解JS的单线程"><a href="#如何理解JS的单线程" class="headerlink" title="如何理解JS的单线程"></a>如何理解JS的单线程</h3><p>学过JS，不对，听过JS的同学应该都知道，JS是单线程的，而浏览器是多线程的，分配的时间内js只能干一件事情</p><h3 id="什么是任务队列"><a href="#什么是任务队列" class="headerlink" title="什么是任务队列"></a>什么是任务队列</h3><p>分同步任务和异步任务</p><h3 id="什么是Event-Loop"><a href="#什么是Event-Loop" class="headerlink" title="什么是Event Loop"></a>什么是Event Loop</h3><p>为了解决同步和异步问题，浏览器提供了一个事件队列 Event Queue，根据特征不同，分为微任务和宏任务队列</p><p>执行顺序是：主线程代码 &gt; 微任务 &gt; 宏任务</p><p><strong>宏任务：</strong></p><p>定时器例如setTimeout（异步）、事件绑定</p><p><strong>微任务：</strong></p><p>await（异步，执行x函数并等待返回结果，有结果再执行下面代码）</p><p>resolve() / reject() 执行的时候把 then / catch 中的代码执行</p><p>promise、async</p><p><strong>特殊情况：</strong></p><p>new Promise（同步）会立即执行</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>理解Js的单线程的概念</li><li>理解任务队列</li><li>理解 Event Loop</li><li>理解哪些语句会放入异步任务队列</li><li>理解语句放入异步任务队列的时机</li></ul><h2 id="页面性能"><a href="#页面性能" class="headerlink" title="页面性能"></a>页面性能</h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><p>提升页面性能的方法有哪些？</p><ul><li>1、资源压缩合并，减少HTTP请求</li><li>2、非核心代码异步加载——异步加载的方式——异步加载的区别</li><li>3、利用浏览器缓存——缓存的分类——缓存的原理</li><li>4、使用CDN</li><li>5、预解析DNS</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"x-dns-prefetch-control"</span> content=<span class="string">"on"</span>&gt; <span class="comment">//打开a标签dns预解析</span></span><br><span class="line"><span class="comment">//有些https默认关了dns预解析，使用上述可以打开（加分点）</span></span><br><span class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"//host_name_to_prefetch.com"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>1、异步加载的方式</p><ul><li>动态脚本加载（用过js添加到document中，比如加入到body或head中）</li><li>defer</li><li>async</li></ul><p>2、异步加载的区别</p><p>（1）<code>defer</code>是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行<br>（2）<code>async</code>是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p><strong>1、缓存的分类</strong></p><ul><li><p>① <strong>强缓存</strong>（不用任何请求，拿过来就用，如果两个都下发，以第二个<code>Cache</code>为准）</p><p>  <strong>Expires（过期时间-服务器绝对时间）</strong> Expires:Thu,21 Jan 2017 23:39:02 GMT<br>  （会导致客户端时间和服务器时间之间时间差问题）<br>  <strong>Cache-Control（客户端相对时间，单位秒）</strong> Cache-Control:max-age=3600</p></li></ul><ul><li><p>② <strong>协商缓存</strong>（浏览器发现本地有这个副本，但是不确定用不用它，于是得向服务器问一下，这个副本要不要用）</p><p>  <strong>Last-Modified</strong>（拿到某个资源文件时，通过这个字段服务器下发一个时间）  <strong>If-Modified-Since</strong> （当下次请求这个资源是否发生变化时，是用这个<code>key</code>值，对比两个时间）</p><p>  Last-Modified: Web,26 Jan 2017 00:35:11 GMT</p><p>  （上述方式会存在问题，例如我可能时间上修改了，但是内容并没有修改）</p><p>  <strong>Etage</strong>（解决上述问题，服务器给Etage值，当过了强缓存时间，浏览器请求是否可用副本时，会在http请求头中用 <strong>If-None-Match</strong> 当做key值，加上<code>value</code>，此value就是Etage的值）</p></li></ul><p><strong>PS：（面试真题-鹅厂）你知道浏览器与缓存相关的http头有哪些？</strong></p><p>答案就是上述<strong>加粗字体</strong></p><h2 id="错误监控"><a href="#错误监控" class="headerlink" title="错误监控"></a>错误监控</h2><p><strong>问法：如何检测JS错误，如何保证你的产品质量？</strong></p><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><ul><li>前端错误的分类</li><li>错误的捕获方式</li><li>上报错误的基本原理</li></ul><h3 id="前端错误的分类"><a href="#前端错误的分类" class="headerlink" title="前端错误的分类"></a>前端错误的分类</h3><p>即时运行错误：代码错误<br>资源加载错误</p><h3 id="错误的捕获方式"><a href="#错误的捕获方式" class="headerlink" title="错误的捕获方式"></a>错误的捕获方式</h3><p><strong>即时运行错误</strong>的捕获方式</p><p>（1） try…catch<br>（2）window.onerror（无法捕获资源加载错误，理由如下）</p><p><strong>资源加载错误</strong>（上述原因：因为资源加载错误不会冒泡）</p><p>（1）<code>object.onerror</code>（节点上绑定<code>onerror</code>事件）</p><p>（2）<code>performance.getEntries()</code> （获得目前已加载的资源，例如图片，然后用document.getElementsByTagName(‘img’)来获取需要加载的图片，然后用总的去减已加载的，就能知道未加载的有多少了）</p><p>（3）<code>Error</code>事件捕获（之前说不能冒泡，但可以捕获）</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404205139389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404205209691.png"  alt=""></p><p><strong>延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？</strong></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020040420481855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""><br><strong>处理</strong></p><ul><li>在script标签增加 <code>crossorigin</code> 属性</li><li>设置js资源响应头 `Access-Control-Allow-Origin:*（可以指定域名）</li></ul><h3 id="上报错误的基本原理"><a href="#上报错误的基本原理" class="headerlink" title="上报错误的基本原理"></a>上报错误的基本原理</h3><p>1、采用Ajax通信的方式上报<br>2、利用Image对象上报（重点，加分点）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;利用Image对象上报&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        (<span class="keyword">new</span> Image()).src=<span class="string">'http://baidu.com/test?name=123'</span>;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>此时，我们查看<code>Nerwork</code>，可以发现，我们的请求已经发出去了（比Ajax简单，不用借用任何第三方库）<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200404205701538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70"  alt=""></p><h2 id="三面-四面"><a href="#三面-四面" class="headerlink" title="三面 / 四面"></a>三面 / 四面</h2><h3 id="面试技巧-2"><a href="#面试技巧-2" class="headerlink" title="面试技巧"></a>面试技巧</h3><ul><li>准备要充分</li><li>描述要熟练</li><li>引导找时机</li><li>优势要发挥</li><li>回答要灵活</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><font color="Tomato"><strong>如若本文有瑕疵需修改的地方，请提出来，谢谢您的贡献！</strong></font></p><p><font color=chocolate>欢迎关注微信公众号：小狮子前端Vue</font></p><p>谢谢您的支持！✿✿ヽ(°▽°)ノ✿</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">学如逆水行舟，不进则退</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
